var ApiClient;
var DocumentUploadsApi;
var GeneralMerchantsApi;
var GeneralStoresApi;
var LoyaltyCardgroupsApi;
var LoyaltyCardsApi;
var LoyaltyCustomersApi;
var LoyaltyMerchantcardsApi;
var LoyaltySalesApi;
var LoyaltyStoregroupsApi;
var PaymentContainersApi;
var PaymentContractsApi;
var PaymentCustomersApi;
var PaymentSecupayCreditcardsApi;
var PaymentSecupayDebitsApi;
var PaymentSecupayInvoicesApi;
var PaymentSecupayPrepaysApi;
var PaymentTransactionsApi;
var PrepaidItemsApi;
var SmartDevicesApi;
var SmartTransactionsApi;
var AuthenticationCredentials;
var Authenticator;
var OAuthApplicationUserCredentials;
var OAuthClientCredentials;
var OAuthDeviceCredentials;
var SDKCache;
var Address;
var AddressComponents;
var AssignedBy;
var BankAccountDescriptor;
var Contact;
var DayTime;
var DocumentUploadsBaseProductModel;
var DocumentUploadsDTOContent;
var DocumentUploadsProductModel;
var GeneralMerchantsCheckoutOptions;
var GeneralMerchantsCheckoutOptionsCollection;
var GeneralMerchantsCheckoutOptionsCollectionSmartDevices;
var GeneralMerchantsCheckoutOptionsShipping;
var GeneralMerchantsDTO;
var GeneralMerchantsLegalDetails;
var GeneralMerchantsList;
var GeneralMerchantsProductModel;
var GeneralMerchantsUrls;
var GeneralMerchantsUser;
var GeneralStoresDTO;
var GeneralStoresDTOReason;
var GeneralStoresDTOType;
var GeneralStoresList;
var GeneralStoresProductModel;
var GeoAddress;
var GeoAddressGeometry;
var InvitedBy;
var ItemGroup;
var LoyaltyCardgroupsDTO;
var LoyaltyCardgroupsDTOCheckPasscodeEnabled;
var LoyaltyCardgroupsDTOMerchant;
var LoyaltyCardgroupsList;
var LoyaltyCardgroupsProductModel;
var LoyaltyCardsDTOAccount;
var LoyaltyCardsList;
var LoyaltyCardsProductModel;
var LoyaltyCustomersContactDTO;
var LoyaltyCustomersDTO;
var LoyaltyCustomersList;
var LoyaltyCustomersPaymentContainerModel;
var LoyaltyCustomersProductModel;
var LoyaltyCustomersRemoved;
var LoyaltyDTOMerchant;
var LoyaltyDTOStore;
var LoyaltyMerchantcardsDTO;
var LoyaltyMerchantcardsDTOCardsAmount;
var LoyaltyMerchantcardsDTOCheckPasscode;
var LoyaltyMerchantcardsDTOCsc;
var LoyaltyMerchantcardsDTOLock;
var LoyaltyMerchantcardsDTONewPasscode;
var LoyaltyMerchantcardsDTOPaymentContainer;
var LoyaltyMerchantcardsDTOResetPasscode;
var LoyaltyMerchantcardsDTOTransaction;
var LoyaltyMerchantcardsDTOValidateMerchantCard;
var LoyaltyMerchantcardsList;
var LoyaltyMerchantcardsProductModel;
var LoyaltyMerchantcardsProductWithReceiptModel;
var LoyaltyMerchantcardsValidateMerchantCard;
var LoyaltyStoregroupsDTO;
var LoyaltyStoregroupsDTOStoresAddressComponents;
var LoyaltyStoregroupsList;
var LoyaltyStoregroupsProductModel;
var OpenHours;
var ParentModel;
var PaymentContainerMandate;
var PaymentContainersDTO;
var PaymentContainersDTOCustomer;
var PaymentContainersDTOPrivate;
var PaymentContainersList;
var PaymentContainersProductModel;
var PaymentContractsDTO;
var PaymentContractsDTOClone;
var PaymentContractsDTOIFrameOpts;
var PaymentContractsDTORequestId;
var PaymentContractsList;
var PaymentContractsProductModel;
var PaymentContractsRequestIdResult;
var PaymentCustomersDTO;
var PaymentCustomersList;
var PaymentCustomersProductModel;
var PaymentInformation;
var PaymentTransactionsCancelList;
var PaymentTransactionsList;
var PaymentTransactionsProductModel;
var PaymentTransactionsProductModelCustomer;
var PaymentTransactionsProductModelDetails;
var PaymentTransactionsProductModelMerchant;
var PaymentTransactionsShippingUrl;
var PrepaidItemsList;
var PrepaidItemsProductModel;
var PrepaidSalesItem;
var PrepaidSalesProductModel;
var PrepaidSalesSmartDevice;
var ProductExceptionPayload;
var ProductInstanceID;
var ProductInstanceUID;
var ReceiptType;
var ReceiptTypeValue;
var ReceiptValue;
var SecupayBasketItem;
var SecupaySubTransactionProductModel;
var SecupayTransactionCancelDTO;
var SecupayTransactionCaptureDTO;
var SecupayTransactionDTOExternalInvoicePdf;
var SecupayTransactionExternalInvoicePdf;
var SecupayTransactionExternalInvoicePdfDocument;
var SecupayTransactionProductDTO;
var SecupayTransactionProductDTOExperience;
var SecupayTransactionProductDTOOptData;
var SecupayTransactionProductDTORedirectUrl;
var SecupayTransactionProductDTOSubscription;
var SecupayTransactionProductModel;
var SecupayTransactionProductModelRedirectUrl;
var SecupayTransactionProductModelTransferAccount;
var SecupayTransactionProductModelUsedPaymentInstrument;
var SecupayTransactionReverseAccrualDTO;
var SecupayTransactionSetShippingInformationDTO;
var SecupayTransactionUpdateBasketDTO;
var SmartDeviceProductsEnabled;
var SmartDeviceProductsPrepaid;
var SmartDevicesDTO;
var SmartDevicesDTOPrepaidTid;
var SmartDevicesDTOSecubaseConfig;
var SmartDevicesDevice;
var SmartDevicesList;
var SmartDevicesList1;
var SmartDevicesProductModel;
var SmartDevicesProducts;
var SmartDevicesSecubaseConfig;
var SmartDevicesSecubaseConfigLogging;
var SmartDevicesSecubaseConfigLoggingFileNet;
var SmartTransactionsBasket;
var SmartTransactionsBasketInfo;
var SmartTransactionsBasketProduct;
var SmartTransactionsBasketProductGroup;
var SmartTransactionsBasketText;
var SmartTransactionsBonusProducts;
var SmartTransactionsCheckin;
var SmartTransactionsDTO;
var SmartTransactionsIdent;
var SmartTransactionsList;
var SmartTransactionsMerchant;
var SmartTransactionsPickupOptions;
var SmartTransactionsPreTransactionModel;
var SmartTransactionsProductModel;
var SmartTransactionsReceipt;
var SmartTransactionsReceiptValue;
var Store;
var VirtualTerminalData;
var StompClient;
var StompSmartTransactionsApi;
var Frame;
var BrowserSocket;
var NodeSocket;
var SocketProvider;

(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){

},{}],2:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  for (var i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],3:[function(require,module,exports){
arguments[4][1][0].apply(exports,arguments)
},{"dup":1}],4:[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

},{"base64-js":2,"ieee754":6}],5:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var objectCreate = Object.create || objectCreatePolyfill
var objectKeys = Object.keys || objectKeysPolyfill
var bind = Function.prototype.bind || functionBindPolyfill

function EventEmitter() {
  if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {
    this._events = objectCreate(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

var hasDefineProperty;
try {
  var o = {};
  if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });
  hasDefineProperty = o.x === 0;
} catch (err) { hasDefineProperty = false }
if (hasDefineProperty) {
  Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
    enumerable: true,
    get: function() {
      return defaultMaxListeners;
    },
    set: function(arg) {
      // check whether the input is a positive number (whose value is zero or
      // greater and not a NaN).
      if (typeof arg !== 'number' || arg < 0 || arg !== arg)
        throw new TypeError('"defaultMaxListeners" must be a positive number');
      defaultMaxListeners = arg;
    }
  });
} else {
  EventEmitter.defaultMaxListeners = defaultMaxListeners;
}

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || isNaN(n))
    throw new TypeError('"n" argument must be a positive number');
  this._maxListeners = n;
  return this;
};

function $getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return $getMaxListeners(this);
};

// These standalone emit* functions are used to optimize calling of event
// handlers for fast cases because emit() itself often has a variable number of
// arguments and can be deoptimized because of that. These functions always have
// the same number of arguments and thus do not get deoptimized, so the code
// inside them can execute faster.
function emitNone(handler, isFn, self) {
  if (isFn)
    handler.call(self);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self);
  }
}
function emitOne(handler, isFn, self, arg1) {
  if (isFn)
    handler.call(self, arg1);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1);
  }
}
function emitTwo(handler, isFn, self, arg1, arg2) {
  if (isFn)
    handler.call(self, arg1, arg2);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2);
  }
}
function emitThree(handler, isFn, self, arg1, arg2, arg3) {
  if (isFn)
    handler.call(self, arg1, arg2, arg3);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].call(self, arg1, arg2, arg3);
  }
}

function emitMany(handler, isFn, self, args) {
  if (isFn)
    handler.apply(self, args);
  else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      listeners[i].apply(self, args);
  }
}

EventEmitter.prototype.emit = function emit(type) {
  var er, handler, len, args, i, events;
  var doError = (type === 'error');

  events = this._events;
  if (events)
    doError = (doError && events.error == null);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    if (arguments.length > 1)
      er = arguments[1];
    if (er instanceof Error) {
      throw er; // Unhandled 'error' event
    } else {
      // At least give some kind of context to the user
      var err = new Error('Unhandled "error" event. (' + er + ')');
      err.context = er;
      throw err;
    }
    return false;
  }

  handler = events[type];

  if (!handler)
    return false;

  var isFn = typeof handler === 'function';
  len = arguments.length;
  switch (len) {
      // fast cases
    case 1:
      emitNone(handler, isFn, this);
      break;
    case 2:
      emitOne(handler, isFn, this, arguments[1]);
      break;
    case 3:
      emitTwo(handler, isFn, this, arguments[1], arguments[2]);
      break;
    case 4:
      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
      break;
      // slower
    default:
      args = new Array(len - 1);
      for (i = 1; i < len; i++)
        args[i - 1] = arguments[i];
      emitMany(handler, isFn, this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');

  events = target._events;
  if (!events) {
    events = target._events = objectCreate(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener) {
      target.emit('newListener', type,
          listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (!existing) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
          prepend ? [listener, existing] : [existing, listener];
    } else {
      // If we've already got an array, just append.
      if (prepend) {
        existing.unshift(listener);
      } else {
        existing.push(listener);
      }
    }

    // Check for listener leak
    if (!existing.warned) {
      m = $getMaxListeners(target);
      if (m && m > 0 && existing.length > m) {
        existing.warned = true;
        var w = new Error('Possible EventEmitter memory leak detected. ' +
            existing.length + ' "' + String(type) + '" listeners ' +
            'added. Use emitter.setMaxListeners() to ' +
            'increase limit.');
        w.name = 'MaxListenersExceededWarning';
        w.emitter = target;
        w.type = type;
        w.count = existing.length;
        if (typeof console === 'object' && console.warn) {
          console.warn('%s: %s', w.name, w.message);
        }
      }
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    switch (arguments.length) {
      case 0:
        return this.listener.call(this.target);
      case 1:
        return this.listener.call(this.target, arguments[0]);
      case 2:
        return this.listener.call(this.target, arguments[0], arguments[1]);
      case 3:
        return this.listener.call(this.target, arguments[0], arguments[1],
            arguments[2]);
      default:
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; ++i)
          args[i] = arguments[i];
        this.listener.apply(this.target, args);
    }
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = bind.call(onceWrapper, state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  if (typeof listener !== 'function')
    throw new TypeError('"listener" argument must be a function');
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');

      events = this._events;
      if (!events)
        return this;

      list = events[type];
      if (!list)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = objectCreate(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else
          spliceOne(list, position);

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (!events)
        return this;

      // not listening for removeListener, no need to emit
      if (!events.removeListener) {
        if (arguments.length === 0) {
          this._events = objectCreate(null);
          this._eventsCount = 0;
        } else if (events[type]) {
          if (--this._eventsCount === 0)
            this._events = objectCreate(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = objectKeys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = objectCreate(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (!events)
    return [];

  var evlistener = events[type];
  if (!evlistener)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
};

// About 1.5x faster than the two-arg version of Array#splice().
function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
    list[i] = list[k];
  list.pop();
}

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function objectCreatePolyfill(proto) {
  var F = function() {};
  F.prototype = proto;
  return new F;
}
function objectKeysPolyfill(obj) {
  var keys = [];
  for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {
    keys.push(k);
  }
  return k;
}
function functionBindPolyfill(context) {
  var fn = this;
  return function () {
    return fn.apply(context, arguments);
  };
}

},{}],6:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],7:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

},{}],8:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};

},{}],9:[function(require,module,exports){
'use strict';

exports.decode = exports.parse = require('./decode');
exports.encode = exports.stringify = require('./encode');

},{"./decode":7,"./encode":8}],10:[function(require,module,exports){
var charenc = {
  // UTF-8 encoding
  utf8: {
    // Convert a string to a byte array
    stringToBytes: function(str) {
      return charenc.bin.stringToBytes(unescape(encodeURIComponent(str)));
    },

    // Convert a byte array to a string
    bytesToString: function(bytes) {
      return decodeURIComponent(escape(charenc.bin.bytesToString(bytes)));
    }
  },

  // Binary encoding
  bin: {
    // Convert a string to a byte array
    stringToBytes: function(str) {
      for (var bytes = [], i = 0; i < str.length; i++)
        bytes.push(str.charCodeAt(i) & 0xFF);
      return bytes;
    },

    // Convert a byte array to a string
    bytesToString: function(bytes) {
      for (var str = [], i = 0; i < bytes.length; i++)
        str.push(String.fromCharCode(bytes[i]));
      return str.join('');
    }
  }
};

module.exports = charenc;

},{}],11:[function(require,module,exports){

/**
 * Expose `Emitter`.
 */

if (typeof module !== 'undefined') {
  module.exports = Emitter;
}

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

function Emitter(obj) {
  if (obj) return mixin(obj);
};

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.on =
Emitter.prototype.addEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};
  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
    .push(fn);
  return this;
};

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.once = function(event, fn){
  function on() {
    this.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.off =
Emitter.prototype.removeListener =
Emitter.prototype.removeAllListeners =
Emitter.prototype.removeEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};

  // all
  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  }

  // specific event
  var callbacks = this._callbacks['$' + event];
  if (!callbacks) return this;

  // remove all handlers
  if (1 == arguments.length) {
    delete this._callbacks['$' + event];
    return this;
  }

  // remove specific handler
  var cb;
  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];
    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }
  return this;
};

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

Emitter.prototype.emit = function(event){
  this._callbacks = this._callbacks || {};
  var args = [].slice.call(arguments, 1)
    , callbacks = this._callbacks['$' + event];

  if (callbacks) {
    callbacks = callbacks.slice(0);
    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

Emitter.prototype.listeners = function(event){
  this._callbacks = this._callbacks || {};
  return this._callbacks['$' + event] || [];
};

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

Emitter.prototype.hasListeners = function(event){
  return !! this.listeners(event).length;
};

},{}],12:[function(require,module,exports){
(function() {
  var base64map
      = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',

  crypt = {
    // Bit-wise rotation left
    rotl: function(n, b) {
      return (n << b) | (n >>> (32 - b));
    },

    // Bit-wise rotation right
    rotr: function(n, b) {
      return (n << (32 - b)) | (n >>> b);
    },

    // Swap big-endian to little-endian and vice versa
    endian: function(n) {
      // If number given, swap endian
      if (n.constructor == Number) {
        return crypt.rotl(n, 8) & 0x00FF00FF | crypt.rotl(n, 24) & 0xFF00FF00;
      }

      // Else, assume array and swap all items
      for (var i = 0; i < n.length; i++)
        n[i] = crypt.endian(n[i]);
      return n;
    },

    // Generate an array of any length of random bytes
    randomBytes: function(n) {
      for (var bytes = []; n > 0; n--)
        bytes.push(Math.floor(Math.random() * 256));
      return bytes;
    },

    // Convert a byte array to big-endian 32-bit words
    bytesToWords: function(bytes) {
      for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)
        words[b >>> 5] |= bytes[i] << (24 - b % 32);
      return words;
    },

    // Convert big-endian 32-bit words to a byte array
    wordsToBytes: function(words) {
      for (var bytes = [], b = 0; b < words.length * 32; b += 8)
        bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);
      return bytes;
    },

    // Convert a byte array to a hex string
    bytesToHex: function(bytes) {
      for (var hex = [], i = 0; i < bytes.length; i++) {
        hex.push((bytes[i] >>> 4).toString(16));
        hex.push((bytes[i] & 0xF).toString(16));
      }
      return hex.join('');
    },

    // Convert a hex string to a byte array
    hexToBytes: function(hex) {
      for (var bytes = [], c = 0; c < hex.length; c += 2)
        bytes.push(parseInt(hex.substr(c, 2), 16));
      return bytes;
    },

    // Convert a byte array to a base-64 string
    bytesToBase64: function(bytes) {
      for (var base64 = [], i = 0; i < bytes.length; i += 3) {
        var triplet = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];
        for (var j = 0; j < 4; j++)
          if (i * 8 + j * 6 <= bytes.length * 8)
            base64.push(base64map.charAt((triplet >>> 6 * (3 - j)) & 0x3F));
          else
            base64.push('=');
      }
      return base64.join('');
    },

    // Convert a base-64 string to a byte array
    base64ToBytes: function(base64) {
      // Remove non-base-64 characters
      base64 = base64.replace(/[^A-Z0-9+\/]/ig, '');

      for (var bytes = [], i = 0, imod4 = 0; i < base64.length;
          imod4 = ++i % 4) {
        if (imod4 == 0) continue;
        bytes.push(((base64map.indexOf(base64.charAt(i - 1))
            & (Math.pow(2, -2 * imod4 + 8) - 1)) << (imod4 * 2))
            | (base64map.indexOf(base64.charAt(i)) >>> (6 - imod4 * 2)));
      }
      return bytes;
    }
  };

  module.exports = crypt;
})();

},{}],13:[function(require,module,exports){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

},{}],14:[function(require,module,exports){
(function(){
  var crypt = require('crypt'),
      utf8 = require('charenc').utf8,
      isBuffer = require('is-buffer'),
      bin = require('charenc').bin,

  // The core
  md5 = function (message, options) {
    // Convert to byte array
    if (message.constructor == String)
      if (options && options.encoding === 'binary')
        message = bin.stringToBytes(message);
      else
        message = utf8.stringToBytes(message);
    else if (isBuffer(message))
      message = Array.prototype.slice.call(message, 0);
    else if (!Array.isArray(message))
      message = message.toString();
    // else, assume byte array already

    var m = crypt.bytesToWords(message),
        l = message.length * 8,
        a =  1732584193,
        b = -271733879,
        c = -1732584194,
        d =  271733878;

    // Swap endian
    for (var i = 0; i < m.length; i++) {
      m[i] = ((m[i] <<  8) | (m[i] >>> 24)) & 0x00FF00FF |
             ((m[i] << 24) | (m[i] >>>  8)) & 0xFF00FF00;
    }

    // Padding
    m[l >>> 5] |= 0x80 << (l % 32);
    m[(((l + 64) >>> 9) << 4) + 14] = l;

    // Method shortcuts
    var FF = md5._ff,
        GG = md5._gg,
        HH = md5._hh,
        II = md5._ii;

    for (var i = 0; i < m.length; i += 16) {

      var aa = a,
          bb = b,
          cc = c,
          dd = d;

      a = FF(a, b, c, d, m[i+ 0],  7, -680876936);
      d = FF(d, a, b, c, m[i+ 1], 12, -389564586);
      c = FF(c, d, a, b, m[i+ 2], 17,  606105819);
      b = FF(b, c, d, a, m[i+ 3], 22, -1044525330);
      a = FF(a, b, c, d, m[i+ 4],  7, -176418897);
      d = FF(d, a, b, c, m[i+ 5], 12,  1200080426);
      c = FF(c, d, a, b, m[i+ 6], 17, -1473231341);
      b = FF(b, c, d, a, m[i+ 7], 22, -45705983);
      a = FF(a, b, c, d, m[i+ 8],  7,  1770035416);
      d = FF(d, a, b, c, m[i+ 9], 12, -1958414417);
      c = FF(c, d, a, b, m[i+10], 17, -42063);
      b = FF(b, c, d, a, m[i+11], 22, -1990404162);
      a = FF(a, b, c, d, m[i+12],  7,  1804603682);
      d = FF(d, a, b, c, m[i+13], 12, -40341101);
      c = FF(c, d, a, b, m[i+14], 17, -1502002290);
      b = FF(b, c, d, a, m[i+15], 22,  1236535329);

      a = GG(a, b, c, d, m[i+ 1],  5, -165796510);
      d = GG(d, a, b, c, m[i+ 6],  9, -1069501632);
      c = GG(c, d, a, b, m[i+11], 14,  643717713);
      b = GG(b, c, d, a, m[i+ 0], 20, -373897302);
      a = GG(a, b, c, d, m[i+ 5],  5, -701558691);
      d = GG(d, a, b, c, m[i+10],  9,  38016083);
      c = GG(c, d, a, b, m[i+15], 14, -660478335);
      b = GG(b, c, d, a, m[i+ 4], 20, -405537848);
      a = GG(a, b, c, d, m[i+ 9],  5,  568446438);
      d = GG(d, a, b, c, m[i+14],  9, -1019803690);
      c = GG(c, d, a, b, m[i+ 3], 14, -187363961);
      b = GG(b, c, d, a, m[i+ 8], 20,  1163531501);
      a = GG(a, b, c, d, m[i+13],  5, -1444681467);
      d = GG(d, a, b, c, m[i+ 2],  9, -51403784);
      c = GG(c, d, a, b, m[i+ 7], 14,  1735328473);
      b = GG(b, c, d, a, m[i+12], 20, -1926607734);

      a = HH(a, b, c, d, m[i+ 5],  4, -378558);
      d = HH(d, a, b, c, m[i+ 8], 11, -2022574463);
      c = HH(c, d, a, b, m[i+11], 16,  1839030562);
      b = HH(b, c, d, a, m[i+14], 23, -35309556);
      a = HH(a, b, c, d, m[i+ 1],  4, -1530992060);
      d = HH(d, a, b, c, m[i+ 4], 11,  1272893353);
      c = HH(c, d, a, b, m[i+ 7], 16, -155497632);
      b = HH(b, c, d, a, m[i+10], 23, -1094730640);
      a = HH(a, b, c, d, m[i+13],  4,  681279174);
      d = HH(d, a, b, c, m[i+ 0], 11, -358537222);
      c = HH(c, d, a, b, m[i+ 3], 16, -722521979);
      b = HH(b, c, d, a, m[i+ 6], 23,  76029189);
      a = HH(a, b, c, d, m[i+ 9],  4, -640364487);
      d = HH(d, a, b, c, m[i+12], 11, -421815835);
      c = HH(c, d, a, b, m[i+15], 16,  530742520);
      b = HH(b, c, d, a, m[i+ 2], 23, -995338651);

      a = II(a, b, c, d, m[i+ 0],  6, -198630844);
      d = II(d, a, b, c, m[i+ 7], 10,  1126891415);
      c = II(c, d, a, b, m[i+14], 15, -1416354905);
      b = II(b, c, d, a, m[i+ 5], 21, -57434055);
      a = II(a, b, c, d, m[i+12],  6,  1700485571);
      d = II(d, a, b, c, m[i+ 3], 10, -1894986606);
      c = II(c, d, a, b, m[i+10], 15, -1051523);
      b = II(b, c, d, a, m[i+ 1], 21, -2054922799);
      a = II(a, b, c, d, m[i+ 8],  6,  1873313359);
      d = II(d, a, b, c, m[i+15], 10, -30611744);
      c = II(c, d, a, b, m[i+ 6], 15, -1560198380);
      b = II(b, c, d, a, m[i+13], 21,  1309151649);
      a = II(a, b, c, d, m[i+ 4],  6, -145523070);
      d = II(d, a, b, c, m[i+11], 10, -1120210379);
      c = II(c, d, a, b, m[i+ 2], 15,  718787259);
      b = II(b, c, d, a, m[i+ 9], 21, -343485551);

      a = (a + aa) >>> 0;
      b = (b + bb) >>> 0;
      c = (c + cc) >>> 0;
      d = (d + dd) >>> 0;
    }

    return crypt.endian([a, b, c, d]);
  };

  // Auxiliary functions
  md5._ff  = function (a, b, c, d, x, s, t) {
    var n = a + (b & c | ~b & d) + (x >>> 0) + t;
    return ((n << s) | (n >>> (32 - s))) + b;
  };
  md5._gg  = function (a, b, c, d, x, s, t) {
    var n = a + (b & d | c & ~d) + (x >>> 0) + t;
    return ((n << s) | (n >>> (32 - s))) + b;
  };
  md5._hh  = function (a, b, c, d, x, s, t) {
    var n = a + (b ^ c ^ d) + (x >>> 0) + t;
    return ((n << s) | (n >>> (32 - s))) + b;
  };
  md5._ii  = function (a, b, c, d, x, s, t) {
    var n = a + (c ^ (b | ~d)) + (x >>> 0) + t;
    return ((n << s) | (n >>> (32 - s))) + b;
  };

  // Package private blocksize
  md5._blocksize = 16;
  md5._digestsize = 16;

  module.exports = function (message, options) {
    if (message === undefined || message === null)
      throw new Error('Illegal argument ' + message);

    var digestbytes = crypt.wordsToBytes(md5(message, options));
    return options && options.asBytes ? digestbytes :
        options && options.asString ? bin.bytesToString(digestbytes) :
        crypt.bytesToHex(digestbytes);
  };

})();

},{"charenc":10,"crypt":12,"is-buffer":13}],15:[function(require,module,exports){
function Agent() {
  this._defaults = [];
}

["use", "on", "once", "set", "query", "type", "accept", "auth", "withCredentials", "sortQuery", "retry", "ok", "redirects",
 "timeout", "buffer", "serialize", "parse", "ca", "key", "pfx", "cert"].forEach(function(fn) {
  /** Default setting for all requests from this agent */
  Agent.prototype[fn] = function(/*varargs*/) {
    this._defaults.push({fn:fn, arguments:arguments});
    return this;
  }
});

Agent.prototype._setDefaults = function(req) {
    this._defaults.forEach(function(def) {
      req[def.fn].apply(req, def.arguments);
    });
};

module.exports = Agent;

},{}],16:[function(require,module,exports){
/**
 * Root reference for iframes.
 */

var root;
if (typeof window !== 'undefined') { // Browser window
  root = window;
} else if (typeof self !== 'undefined') { // Web Worker
  root = self;
} else { // Other environments
  console.warn("Using browser-only version of superagent in non-browser environment");
  root = this;
}

var Emitter = require('component-emitter');
var RequestBase = require('./request-base');
var isObject = require('./is-object');
var ResponseBase = require('./response-base');
var Agent = require('./agent-base');

/**
 * Noop.
 */

function noop(){};

/**
 * Expose `request`.
 */

var request = exports = module.exports = function(method, url) {
  // callback
  if ('function' == typeof url) {
    return new exports.Request('GET', method).end(url);
  }

  // url first
  if (1 == arguments.length) {
    return new exports.Request('GET', method);
  }

  return new exports.Request(method, url);
}

exports.Request = Request;

/**
 * Determine XHR.
 */

request.getXHR = function () {
  if (root.XMLHttpRequest
      && (!root.location || 'file:' != root.location.protocol
          || !root.ActiveXObject)) {
    return new XMLHttpRequest;
  } else {
    try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch(e) {}
    try { return new ActiveXObject('Msxml2.XMLHTTP.6.0'); } catch(e) {}
    try { return new ActiveXObject('Msxml2.XMLHTTP.3.0'); } catch(e) {}
    try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch(e) {}
  }
  throw Error("Browser-only version of superagent could not find XHR");
};

/**
 * Removes leading and trailing whitespace, added to support IE.
 *
 * @param {String} s
 * @return {String}
 * @api private
 */

var trim = ''.trim
  ? function(s) { return s.trim(); }
  : function(s) { return s.replace(/(^\s*|\s*$)/g, ''); };

/**
 * Serialize the given `obj`.
 *
 * @param {Object} obj
 * @return {String}
 * @api private
 */

function serialize(obj) {
  if (!isObject(obj)) return obj;
  var pairs = [];
  for (var key in obj) {
    pushEncodedKeyValuePair(pairs, key, obj[key]);
  }
  return pairs.join('&');
}

/**
 * Helps 'serialize' with serializing arrays.
 * Mutates the pairs array.
 *
 * @param {Array} pairs
 * @param {String} key
 * @param {Mixed} val
 */

function pushEncodedKeyValuePair(pairs, key, val) {
  if (val != null) {
    if (Array.isArray(val)) {
      val.forEach(function(v) {
        pushEncodedKeyValuePair(pairs, key, v);
      });
    } else if (isObject(val)) {
      for(var subkey in val) {
        pushEncodedKeyValuePair(pairs, key + '[' + subkey + ']', val[subkey]);
      }
    } else {
      pairs.push(encodeURIComponent(key)
        + '=' + encodeURIComponent(val));
    }
  } else if (val === null) {
    pairs.push(encodeURIComponent(key));
  }
}

/**
 * Expose serialization method.
 */

request.serializeObject = serialize;

/**
  * Parse the given x-www-form-urlencoded `str`.
  *
  * @param {String} str
  * @return {Object}
  * @api private
  */

function parseString(str) {
  var obj = {};
  var pairs = str.split('&');
  var pair;
  var pos;

  for (var i = 0, len = pairs.length; i < len; ++i) {
    pair = pairs[i];
    pos = pair.indexOf('=');
    if (pos == -1) {
      obj[decodeURIComponent(pair)] = '';
    } else {
      obj[decodeURIComponent(pair.slice(0, pos))] =
        decodeURIComponent(pair.slice(pos + 1));
    }
  }

  return obj;
}

/**
 * Expose parser.
 */

request.parseString = parseString;

/**
 * Default MIME type map.
 *
 *     superagent.types.xml = 'application/xml';
 *
 */

request.types = {
  html: 'text/html',
  json: 'application/json',
  xml: 'text/xml',
  urlencoded: 'application/x-www-form-urlencoded',
  'form': 'application/x-www-form-urlencoded',
  'form-data': 'application/x-www-form-urlencoded'
};

/**
 * Default serialization map.
 *
 *     superagent.serialize['application/xml'] = function(obj){
 *       return 'generated xml here';
 *     };
 *
 */

request.serialize = {
  'application/x-www-form-urlencoded': serialize,
  'application/json': JSON.stringify
};

/**
  * Default parsers.
  *
  *     superagent.parse['application/xml'] = function(str){
  *       return { object parsed from str };
  *     };
  *
  */

request.parse = {
  'application/x-www-form-urlencoded': parseString,
  'application/json': JSON.parse
};

/**
 * Parse the given header `str` into
 * an object containing the mapped fields.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */

function parseHeader(str) {
  var lines = str.split(/\r?\n/);
  var fields = {};
  var index;
  var line;
  var field;
  var val;

  for (var i = 0, len = lines.length; i < len; ++i) {
    line = lines[i];
    index = line.indexOf(':');
    if (index === -1) { // could be empty line, just skip it
      continue;
    }
    field = line.slice(0, index).toLowerCase();
    val = trim(line.slice(index + 1));
    fields[field] = val;
  }

  return fields;
}

/**
 * Check if `mime` is json or has +json structured syntax suffix.
 *
 * @param {String} mime
 * @return {Boolean}
 * @api private
 */

function isJSON(mime) {
  // should match /json or +json
  // but not /json-seq
  return /[\/+]json($|[^-\w])/.test(mime);
}

/**
 * Initialize a new `Response` with the given `xhr`.
 *
 *  - set flags (.ok, .error, etc)
 *  - parse header
 *
 * Examples:
 *
 *  Aliasing `superagent` as `request` is nice:
 *
 *      request = superagent;
 *
 *  We can use the promise-like API, or pass callbacks:
 *
 *      request.get('/').end(function(res){});
 *      request.get('/', function(res){});
 *
 *  Sending data can be chained:
 *
 *      request
 *        .post('/user')
 *        .send({ name: 'tj' })
 *        .end(function(res){});
 *
 *  Or passed to `.send()`:
 *
 *      request
 *        .post('/user')
 *        .send({ name: 'tj' }, function(res){});
 *
 *  Or passed to `.post()`:
 *
 *      request
 *        .post('/user', { name: 'tj' })
 *        .end(function(res){});
 *
 * Or further reduced to a single call for simple cases:
 *
 *      request
 *        .post('/user', { name: 'tj' }, function(res){});
 *
 * @param {XMLHTTPRequest} xhr
 * @param {Object} options
 * @api private
 */

function Response(req) {
  this.req = req;
  this.xhr = this.req.xhr;
  // responseText is accessible only if responseType is '' or 'text' and on older browsers
  this.text = ((this.req.method !='HEAD' && (this.xhr.responseType === '' || this.xhr.responseType === 'text')) || typeof this.xhr.responseType === 'undefined')
     ? this.xhr.responseText
     : null;
  this.statusText = this.req.xhr.statusText;
  var status = this.xhr.status;
  // handle IE9 bug: http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request
  if (status === 1223) {
    status = 204;
  }
  this._setStatusProperties(status);
  this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders());
  // getAllResponseHeaders sometimes falsely returns "" for CORS requests, but
  // getResponseHeader still works. so we get content-type even if getting
  // other headers fails.
  this.header['content-type'] = this.xhr.getResponseHeader('content-type');
  this._setHeaderProperties(this.header);

  if (null === this.text && req._responseType) {
    this.body = this.xhr.response;
  } else {
    this.body = this.req.method != 'HEAD'
      ? this._parseBody(this.text ? this.text : this.xhr.response)
      : null;
  }
}

ResponseBase(Response.prototype);

/**
 * Parse the given body `str`.
 *
 * Used for auto-parsing of bodies. Parsers
 * are defined on the `superagent.parse` object.
 *
 * @param {String} str
 * @return {Mixed}
 * @api private
 */

Response.prototype._parseBody = function(str) {
  var parse = request.parse[this.type];
  if (this.req._parser) {
    return this.req._parser(this, str);
  }
  if (!parse && isJSON(this.type)) {
    parse = request.parse['application/json'];
  }
  return parse && str && (str.length || str instanceof Object)
    ? parse(str)
    : null;
};

/**
 * Return an `Error` representative of this response.
 *
 * @return {Error}
 * @api public
 */

Response.prototype.toError = function(){
  var req = this.req;
  var method = req.method;
  var url = req.url;

  var msg = 'cannot ' + method + ' ' + url + ' (' + this.status + ')';
  var err = new Error(msg);
  err.status = this.status;
  err.method = method;
  err.url = url;

  return err;
};

/**
 * Expose `Response`.
 */

request.Response = Response;

/**
 * Initialize a new `Request` with the given `method` and `url`.
 *
 * @param {String} method
 * @param {String} url
 * @api public
 */

function Request(method, url) {
  var self = this;
  this._query = this._query || [];
  this.method = method;
  this.url = url;
  this.header = {}; // preserves header name case
  this._header = {}; // coerces header names to lowercase
  this.on('end', function(){
    var err = null;
    var res = null;

    try {
      res = new Response(self);
    } catch(e) {
      err = new Error('Parser is unable to parse the response');
      err.parse = true;
      err.original = e;
      // issue #675: return the raw response if the response parsing fails
      if (self.xhr) {
        // ie9 doesn't have 'response' property
        err.rawResponse = typeof self.xhr.responseType == 'undefined' ? self.xhr.responseText : self.xhr.response;
        // issue #876: return the http status code if the response parsing fails
        err.status = self.xhr.status ? self.xhr.status : null;
        err.statusCode = err.status; // backwards-compat only
      } else {
        err.rawResponse = null;
        err.status = null;
      }

      return self.callback(err);
    }

    self.emit('response', res);

    var new_err;
    try {
      if (!self._isResponseOK(res)) {
        new_err = new Error(res.statusText || 'Unsuccessful HTTP response');
      }
    } catch(custom_err) {
      new_err = custom_err; // ok() callback can throw
    }

    // #1000 don't catch errors from the callback to avoid double calling it
    if (new_err) {
      new_err.original = err;
      new_err.response = res;
      new_err.status = res.status;
      self.callback(new_err, res);
    } else {
      self.callback(null, res);
    }
  });
}

/**
 * Mixin `Emitter` and `RequestBase`.
 */

Emitter(Request.prototype);
RequestBase(Request.prototype);

/**
 * Set Content-Type to `type`, mapping values from `request.types`.
 *
 * Examples:
 *
 *      superagent.types.xml = 'application/xml';
 *
 *      request.post('/')
 *        .type('xml')
 *        .send(xmlstring)
 *        .end(callback);
 *
 *      request.post('/')
 *        .type('application/xml')
 *        .send(xmlstring)
 *        .end(callback);
 *
 * @param {String} type
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.type = function(type){
  this.set('Content-Type', request.types[type] || type);
  return this;
};

/**
 * Set Accept to `type`, mapping values from `request.types`.
 *
 * Examples:
 *
 *      superagent.types.json = 'application/json';
 *
 *      request.get('/agent')
 *        .accept('json')
 *        .end(callback);
 *
 *      request.get('/agent')
 *        .accept('application/json')
 *        .end(callback);
 *
 * @param {String} accept
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.accept = function(type){
  this.set('Accept', request.types[type] || type);
  return this;
};

/**
 * Set Authorization field value with `user` and `pass`.
 *
 * @param {String} user
 * @param {String} [pass] optional in case of using 'bearer' as type
 * @param {Object} options with 'type' property 'auto', 'basic' or 'bearer' (default 'basic')
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.auth = function(user, pass, options){
  if (1 === arguments.length) pass = '';
  if (typeof pass === 'object' && pass !== null) { // pass is optional and can be replaced with options
    options = pass;
    pass = '';
  }
  if (!options) {
    options = {
      type: 'function' === typeof btoa ? 'basic' : 'auto',
    };
  }

  var encoder = function(string) {
    if ('function' === typeof btoa) {
      return btoa(string);
    }
    throw new Error('Cannot use basic auth, btoa is not a function');
  };

  return this._auth(user, pass, options, encoder);
};

/**
 * Add query-string `val`.
 *
 * Examples:
 *
 *   request.get('/shoes')
 *     .query('size=10')
 *     .query({ color: 'blue' })
 *
 * @param {Object|String} val
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.query = function(val){
  if ('string' != typeof val) val = serialize(val);
  if (val) this._query.push(val);
  return this;
};

/**
 * Queue the given `file` as an attachment to the specified `field`,
 * with optional `options` (or filename).
 *
 * ``` js
 * request.post('/upload')
 *   .attach('content', new Blob(['<a id="a"><b id="b">hey!</b></a>'], { type: "text/html"}))
 *   .end(callback);
 * ```
 *
 * @param {String} field
 * @param {Blob|File} file
 * @param {String|Object} options
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.attach = function(field, file, options){
  if (file) {
    if (this._data) {
      throw Error("superagent can't mix .send() and .attach()");
    }

    this._getFormData().append(field, file, options || file.name);
  }
  return this;
};

Request.prototype._getFormData = function(){
  if (!this._formData) {
    this._formData = new root.FormData();
  }
  return this._formData;
};

/**
 * Invoke the callback with `err` and `res`
 * and handle arity check.
 *
 * @param {Error} err
 * @param {Response} res
 * @api private
 */

Request.prototype.callback = function(err, res){
  if (this._shouldRetry(err, res)) {
    return this._retry();
  }

  var fn = this._callback;
  this.clearTimeout();

  if (err) {
    if (this._maxRetries) err.retries = this._retries - 1;
    this.emit('error', err);
  }

  fn(err, res);
};

/**
 * Invoke callback with x-domain error.
 *
 * @api private
 */

Request.prototype.crossDomainError = function(){
  var err = new Error('Request has been terminated\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.');
  err.crossDomain = true;

  err.status = this.status;
  err.method = this.method;
  err.url = this.url;

  this.callback(err);
};

// This only warns, because the request is still likely to work
Request.prototype.buffer = Request.prototype.ca = Request.prototype.agent = function(){
  console.warn("This is not supported in browser version of superagent");
  return this;
};

// This throws, because it can't send/receive data as expected
Request.prototype.pipe = Request.prototype.write = function(){
  throw Error("Streaming is not supported in browser version of superagent");
};

/**
 * Check if `obj` is a host object,
 * we don't want to serialize these :)
 *
 * @param {Object} obj
 * @return {Boolean}
 * @api private
 */
Request.prototype._isHost = function _isHost(obj) {
  // Native objects stringify to [object File], [object Blob], [object FormData], etc.
  return obj && 'object' === typeof obj && !Array.isArray(obj) && Object.prototype.toString.call(obj) !== '[object Object]';
}

/**
 * Initiate request, invoking callback `fn(res)`
 * with an instanceof `Response`.
 *
 * @param {Function} fn
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.end = function(fn){
  if (this._endCalled) {
    console.warn("Warning: .end() was called twice. This is not supported in superagent");
  }
  this._endCalled = true;

  // store callback
  this._callback = fn || noop;

  // querystring
  this._finalizeQueryString();

  return this._end();
};

Request.prototype._end = function() {
  var self = this;
  var xhr = (this.xhr = request.getXHR());
  var data = this._formData || this._data;

  this._setTimeouts();

  // state change
  xhr.onreadystatechange = function(){
    var readyState = xhr.readyState;
    if (readyState >= 2 && self._responseTimeoutTimer) {
      clearTimeout(self._responseTimeoutTimer);
    }
    if (4 != readyState) {
      return;
    }

    // In IE9, reads to any property (e.g. status) off of an aborted XHR will
    // result in the error "Could not complete the operation due to error c00c023f"
    var status;
    try { status = xhr.status } catch(e) { status = 0; }

    if (!status) {
      if (self.timedout || self._aborted) return;
      return self.crossDomainError();
    }
    self.emit('end');
  };

  // progress
  var handleProgress = function(direction, e) {
    if (e.total > 0) {
      e.percent = e.loaded / e.total * 100;
    }
    e.direction = direction;
    self.emit('progress', e);
  };
  if (this.hasListeners('progress')) {
    try {
      xhr.onprogress = handleProgress.bind(null, 'download');
      if (xhr.upload) {
        xhr.upload.onprogress = handleProgress.bind(null, 'upload');
      }
    } catch(e) {
      // Accessing xhr.upload fails in IE from a web worker, so just pretend it doesn't exist.
      // Reported here:
      // https://connect.microsoft.com/IE/feedback/details/837245/xmlhttprequest-upload-throws-invalid-argument-when-used-from-web-worker-context
    }
  }

  // initiate request
  try {
    if (this.username && this.password) {
      xhr.open(this.method, this.url, true, this.username, this.password);
    } else {
      xhr.open(this.method, this.url, true);
    }
  } catch (err) {
    // see #1149
    return this.callback(err);
  }

  // CORS
  if (this._withCredentials) xhr.withCredentials = true;

  // body
  if (!this._formData && 'GET' != this.method && 'HEAD' != this.method && 'string' != typeof data && !this._isHost(data)) {
    // serialize stuff
    var contentType = this._header['content-type'];
    var serialize = this._serializer || request.serialize[contentType ? contentType.split(';')[0] : ''];
    if (!serialize && isJSON(contentType)) {
      serialize = request.serialize['application/json'];
    }
    if (serialize) data = serialize(data);
  }

  // set header fields
  for (var field in this.header) {
    if (null == this.header[field]) continue;

    if (this.header.hasOwnProperty(field))
      xhr.setRequestHeader(field, this.header[field]);
  }

  if (this._responseType) {
    xhr.responseType = this._responseType;
  }

  // send stuff
  this.emit('request', this);

  // IE11 xhr.send(undefined) sends 'undefined' string as POST payload (instead of nothing)
  // We need null here if data is undefined
  xhr.send(typeof data !== 'undefined' ? data : null);
  return this;
};

request.agent = function() {
  return new Agent();
};

["GET", "POST", "OPTIONS", "PATCH", "PUT", "DELETE"].forEach(function(method) {
  Agent.prototype[method.toLowerCase()] = function(url, fn) {
    var req = new request.Request(method, url);
    this._setDefaults(req);
    if (fn) {
      req.end(fn);
    }
    return req;
  };
});

Agent.prototype.del = Agent.prototype['delete'];

/**
 * GET `url` with optional callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} [data] or fn
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.get = function(url, data, fn) {
  var req = request('GET', url);
  if ('function' == typeof data) (fn = data), (data = null);
  if (data) req.query(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * HEAD `url` with optional callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} [data] or fn
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.head = function(url, data, fn) {
  var req = request('HEAD', url);
  if ('function' == typeof data) (fn = data), (data = null);
  if (data) req.query(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * OPTIONS query to `url` with optional callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} [data] or fn
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.options = function(url, data, fn) {
  var req = request('OPTIONS', url);
  if ('function' == typeof data) (fn = data), (data = null);
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * DELETE `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed} [data]
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

function del(url, data, fn) {
  var req = request('DELETE', url);
  if ('function' == typeof data) (fn = data), (data = null);
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
}

request['del'] = del;
request['delete'] = del;

/**
 * PATCH `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed} [data]
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.patch = function(url, data, fn) {
  var req = request('PATCH', url);
  if ('function' == typeof data) (fn = data), (data = null);
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * POST `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed} [data]
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.post = function(url, data, fn) {
  var req = request('POST', url);
  if ('function' == typeof data) (fn = data), (data = null);
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * PUT `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} [data] or fn
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.put = function(url, data, fn) {
  var req = request('PUT', url);
  if ('function' == typeof data) (fn = data), (data = null);
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

},{"./agent-base":15,"./is-object":17,"./request-base":18,"./response-base":19,"component-emitter":11}],17:[function(require,module,exports){
'use strict';

/**
 * Check if `obj` is an object.
 *
 * @param {Object} obj
 * @return {Boolean}
 * @api private
 */

function isObject(obj) {
  return null !== obj && 'object' === typeof obj;
}

module.exports = isObject;

},{}],18:[function(require,module,exports){
'use strict';

/**
 * Module of mixed-in functions shared between node and client code
 */
var isObject = require('./is-object');

/**
 * Expose `RequestBase`.
 */

module.exports = RequestBase;

/**
 * Initialize a new `RequestBase`.
 *
 * @api public
 */

function RequestBase(obj) {
  if (obj) return mixin(obj);
}

/**
 * Mixin the prototype properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in RequestBase.prototype) {
    obj[key] = RequestBase.prototype[key];
  }
  return obj;
}

/**
 * Clear previous timeout.
 *
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.clearTimeout = function _clearTimeout(){
  clearTimeout(this._timer);
  clearTimeout(this._responseTimeoutTimer);
  delete this._timer;
  delete this._responseTimeoutTimer;
  return this;
};

/**
 * Override default response body parser
 *
 * This function will be called to convert incoming data into request.body
 *
 * @param {Function}
 * @api public
 */

RequestBase.prototype.parse = function parse(fn){
  this._parser = fn;
  return this;
};

/**
 * Set format of binary response body.
 * In browser valid formats are 'blob' and 'arraybuffer',
 * which return Blob and ArrayBuffer, respectively.
 *
 * In Node all values result in Buffer.
 *
 * Examples:
 *
 *      req.get('/')
 *        .responseType('blob')
 *        .end(callback);
 *
 * @param {String} val
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.responseType = function(val){
  this._responseType = val;
  return this;
};

/**
 * Override default request body serializer
 *
 * This function will be called to convert data set via .send or .attach into payload to send
 *
 * @param {Function}
 * @api public
 */

RequestBase.prototype.serialize = function serialize(fn){
  this._serializer = fn;
  return this;
};

/**
 * Set timeouts.
 *
 * - response timeout is time between sending request and receiving the first byte of the response. Includes DNS and connection time.
 * - deadline is the time from start of the request to receiving response body in full. If the deadline is too short large files may not load at all on slow connections.
 *
 * Value of 0 or false means no timeout.
 *
 * @param {Number|Object} ms or {response, deadline}
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.timeout = function timeout(options){
  if (!options || 'object' !== typeof options) {
    this._timeout = options;
    this._responseTimeout = 0;
    return this;
  }

  for(var option in options) {
    switch(option) {
      case 'deadline':
        this._timeout = options.deadline;
        break;
      case 'response':
        this._responseTimeout = options.response;
        break;
      default:
        console.warn("Unknown timeout option", option);
    }
  }
  return this;
};

/**
 * Set number of retry attempts on error.
 *
 * Failed requests will be retried 'count' times if timeout or err.code >= 500.
 *
 * @param {Number} count
 * @param {Function} [fn]
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.retry = function retry(count, fn){
  // Default to 1 if no count passed or true
  if (arguments.length === 0 || count === true) count = 1;
  if (count <= 0) count = 0;
  this._maxRetries = count;
  this._retries = 0;
  this._retryCallback = fn;
  return this;
};

var ERROR_CODES = [
  'ECONNRESET',
  'ETIMEDOUT',
  'EADDRINFO',
  'ESOCKETTIMEDOUT'
];

/**
 * Determine if a request should be retried.
 * (Borrowed from segmentio/superagent-retry)
 *
 * @param {Error} err
 * @param {Response} [res]
 * @returns {Boolean}
 */
RequestBase.prototype._shouldRetry = function(err, res) {
  if (!this._maxRetries || this._retries++ >= this._maxRetries) {
    return false;
  }
  if (this._retryCallback) {
    try {
      var override = this._retryCallback(err, res);
      if (override === true) return true;
      if (override === false) return false;
      // undefined falls back to defaults
    } catch(e) {
      console.error(e);
    }
  }
  if (res && res.status && res.status >= 500 && res.status != 501) return true;
  if (err) {
    if (err.code && ~ERROR_CODES.indexOf(err.code)) return true;
    // Superagent timeout
    if (err.timeout && err.code == 'ECONNABORTED') return true;
    if (err.crossDomain) return true;
  }
  return false;
};

/**
 * Retry request
 *
 * @return {Request} for chaining
 * @api private
 */

RequestBase.prototype._retry = function() {

  this.clearTimeout();

  // node
  if (this.req) {
    this.req = null;
    this.req = this.request();
  }

  this._aborted = false;
  this.timedout = false;

  return this._end();
};

/**
 * Promise support
 *
 * @param {Function} resolve
 * @param {Function} [reject]
 * @return {Request}
 */

RequestBase.prototype.then = function then(resolve, reject) {
  if (!this._fullfilledPromise) {
    var self = this;
    if (this._endCalled) {
      console.warn("Warning: superagent request was sent twice, because both .end() and .then() were called. Never call .end() if you use promises");
    }
    this._fullfilledPromise = new Promise(function(innerResolve, innerReject) {
      self.end(function(err, res) {
        if (err) innerReject(err);
        else innerResolve(res);
      });
    });
  }
  return this._fullfilledPromise.then(resolve, reject);
};

RequestBase.prototype['catch'] = function(cb) {
  return this.then(undefined, cb);
};

/**
 * Allow for extension
 */

RequestBase.prototype.use = function use(fn) {
  fn(this);
  return this;
};

RequestBase.prototype.ok = function(cb) {
  if ('function' !== typeof cb) throw Error("Callback required");
  this._okCallback = cb;
  return this;
};

RequestBase.prototype._isResponseOK = function(res) {
  if (!res) {
    return false;
  }

  if (this._okCallback) {
    return this._okCallback(res);
  }

  return res.status >= 200 && res.status < 300;
};

/**
 * Get request header `field`.
 * Case-insensitive.
 *
 * @param {String} field
 * @return {String}
 * @api public
 */

RequestBase.prototype.get = function(field){
  return this._header[field.toLowerCase()];
};

/**
 * Get case-insensitive header `field` value.
 * This is a deprecated internal API. Use `.get(field)` instead.
 *
 * (getHeader is no longer used internally by the superagent code base)
 *
 * @param {String} field
 * @return {String}
 * @api private
 * @deprecated
 */

RequestBase.prototype.getHeader = RequestBase.prototype.get;

/**
 * Set header `field` to `val`, or multiple fields with one object.
 * Case-insensitive.
 *
 * Examples:
 *
 *      req.get('/')
 *        .set('Accept', 'application/json')
 *        .set('X-API-Key', 'foobar')
 *        .end(callback);
 *
 *      req.get('/')
 *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })
 *        .end(callback);
 *
 * @param {String|Object} field
 * @param {String} val
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.set = function(field, val){
  if (isObject(field)) {
    for (var key in field) {
      this.set(key, field[key]);
    }
    return this;
  }
  this._header[field.toLowerCase()] = val;
  this.header[field] = val;
  return this;
};

/**
 * Remove header `field`.
 * Case-insensitive.
 *
 * Example:
 *
 *      req.get('/')
 *        .unset('User-Agent')
 *        .end(callback);
 *
 * @param {String} field
 */
RequestBase.prototype.unset = function(field){
  delete this._header[field.toLowerCase()];
  delete this.header[field];
  return this;
};

/**
 * Write the field `name` and `val`, or multiple fields with one object
 * for "multipart/form-data" request bodies.
 *
 * ``` js
 * request.post('/upload')
 *   .field('foo', 'bar')
 *   .end(callback);
 *
 * request.post('/upload')
 *   .field({ foo: 'bar', baz: 'qux' })
 *   .end(callback);
 * ```
 *
 * @param {String|Object} name
 * @param {String|Blob|File|Buffer|fs.ReadStream} val
 * @return {Request} for chaining
 * @api public
 */
RequestBase.prototype.field = function(name, val) {
  // name should be either a string or an object.
  if (null === name || undefined === name) {
    throw new Error('.field(name, val) name can not be empty');
  }

  if (this._data) {
    console.error(".field() can't be used if .send() is used. Please use only .send() or only .field() & .attach()");
  }

  if (isObject(name)) {
    for (var key in name) {
      this.field(key, name[key]);
    }
    return this;
  }

  if (Array.isArray(val)) {
    for (var i in val) {
      this.field(name, val[i]);
    }
    return this;
  }

  // val should be defined now
  if (null === val || undefined === val) {
    throw new Error('.field(name, val) val can not be empty');
  }
  if ('boolean' === typeof val) {
    val = '' + val;
  }
  this._getFormData().append(name, val);
  return this;
};

/**
 * Abort the request, and clear potential timeout.
 *
 * @return {Request}
 * @api public
 */
RequestBase.prototype.abort = function(){
  if (this._aborted) {
    return this;
  }
  this._aborted = true;
  this.xhr && this.xhr.abort(); // browser
  this.req && this.req.abort(); // node
  this.clearTimeout();
  this.emit('abort');
  return this;
};

RequestBase.prototype._auth = function(user, pass, options, base64Encoder) {
  switch (options.type) {
    case 'basic':
      this.set('Authorization', 'Basic ' + base64Encoder(user + ':' + pass));
      break;

    case 'auto':
      this.username = user;
      this.password = pass;
      break;

    case 'bearer': // usage would be .auth(accessToken, { type: 'bearer' })
      this.set('Authorization', 'Bearer ' + user);
      break;
  }
  return this;
};

/**
 * Enable transmission of cookies with x-domain requests.
 *
 * Note that for this to work the origin must not be
 * using "Access-Control-Allow-Origin" with a wildcard,
 * and also must set "Access-Control-Allow-Credentials"
 * to "true".
 *
 * @api public
 */

RequestBase.prototype.withCredentials = function(on) {
  // This is browser-only functionality. Node side is no-op.
  if (on == undefined) on = true;
  this._withCredentials = on;
  return this;
};

/**
 * Set the max redirects to `n`. Does noting in browser XHR implementation.
 *
 * @param {Number} n
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.redirects = function(n){
  this._maxRedirects = n;
  return this;
};

/**
 * Maximum size of buffered response body, in bytes. Counts uncompressed size.
 * Default 200MB.
 *
 * @param {Number} n
 * @return {Request} for chaining
 */
RequestBase.prototype.maxResponseSize = function(n){
  if ('number' !== typeof n) {
    throw TypeError("Invalid argument");
  }
  this._maxResponseSize = n;
  return this;
};

/**
 * Convert to a plain javascript object (not JSON string) of scalar properties.
 * Note as this method is designed to return a useful non-this value,
 * it cannot be chained.
 *
 * @return {Object} describing method, url, and data of this request
 * @api public
 */

RequestBase.prototype.toJSON = function() {
  return {
    method: this.method,
    url: this.url,
    data: this._data,
    headers: this._header,
  };
};

/**
 * Send `data` as the request body, defaulting the `.type()` to "json" when
 * an object is given.
 *
 * Examples:
 *
 *       // manual json
 *       request.post('/user')
 *         .type('json')
 *         .send('{"name":"tj"}')
 *         .end(callback)
 *
 *       // auto json
 *       request.post('/user')
 *         .send({ name: 'tj' })
 *         .end(callback)
 *
 *       // manual x-www-form-urlencoded
 *       request.post('/user')
 *         .type('form')
 *         .send('name=tj')
 *         .end(callback)
 *
 *       // auto x-www-form-urlencoded
 *       request.post('/user')
 *         .type('form')
 *         .send({ name: 'tj' })
 *         .end(callback)
 *
 *       // defaults to x-www-form-urlencoded
 *      request.post('/user')
 *        .send('name=tobi')
 *        .send('species=ferret')
 *        .end(callback)
 *
 * @param {String|Object} data
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.send = function(data){
  var isObj = isObject(data);
  var type = this._header['content-type'];

  if (this._formData) {
    console.error(".send() can't be used if .attach() or .field() is used. Please use only .send() or only .field() & .attach()");
  }

  if (isObj && !this._data) {
    if (Array.isArray(data)) {
      this._data = [];
    } else if (!this._isHost(data)) {
      this._data = {};
    }
  } else if (data && this._data && this._isHost(this._data)) {
    throw Error("Can't merge these send calls");
  }

  // merge
  if (isObj && isObject(this._data)) {
    for (var key in data) {
      this._data[key] = data[key];
    }
  } else if ('string' == typeof data) {
    // default to x-www-form-urlencoded
    if (!type) this.type('form');
    type = this._header['content-type'];
    if ('application/x-www-form-urlencoded' == type) {
      this._data = this._data
        ? this._data + '&' + data
        : data;
    } else {
      this._data = (this._data || '') + data;
    }
  } else {
    this._data = data;
  }

  if (!isObj || this._isHost(data)) {
    return this;
  }

  // default to json
  if (!type) this.type('json');
  return this;
};

/**
 * Sort `querystring` by the sort function
 *
 *
 * Examples:
 *
 *       // default order
 *       request.get('/user')
 *         .query('name=Nick')
 *         .query('search=Manny')
 *         .sortQuery()
 *         .end(callback)
 *
 *       // customized sort function
 *       request.get('/user')
 *         .query('name=Nick')
 *         .query('search=Manny')
 *         .sortQuery(function(a, b){
 *           return a.length - b.length;
 *         })
 *         .end(callback)
 *
 *
 * @param {Function} sort
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.sortQuery = function(sort) {
  // _sort default to true but otherwise can be a function or boolean
  this._sort = typeof sort === 'undefined' ? true : sort;
  return this;
};

/**
 * Compose querystring to append to req.url
 *
 * @api private
 */
RequestBase.prototype._finalizeQueryString = function(){
  var query = this._query.join('&');
  if (query) {
    this.url += (this.url.indexOf('?') >= 0 ? '&' : '?') + query;
  }
  this._query.length = 0; // Makes the call idempotent

  if (this._sort) {
    var index = this.url.indexOf('?');
    if (index >= 0) {
      var queryArr = this.url.substring(index + 1).split('&');
      if ('function' === typeof this._sort) {
        queryArr.sort(this._sort);
      } else {
        queryArr.sort();
      }
      this.url = this.url.substring(0, index) + '?' + queryArr.join('&');
    }
  }
};

// For backwards compat only
RequestBase.prototype._appendQueryString = function() {console.trace("Unsupported");}

/**
 * Invoke callback with timeout error.
 *
 * @api private
 */

RequestBase.prototype._timeoutError = function(reason, timeout, errno){
  if (this._aborted) {
    return;
  }
  var err = new Error(reason + timeout + 'ms exceeded');
  err.timeout = timeout;
  err.code = 'ECONNABORTED';
  err.errno = errno;
  this.timedout = true;
  this.abort();
  this.callback(err);
};

RequestBase.prototype._setTimeouts = function() {
  var self = this;

  // deadline
  if (this._timeout && !this._timer) {
    this._timer = setTimeout(function(){
      self._timeoutError('Timeout of ', self._timeout, 'ETIME');
    }, this._timeout);
  }
  // response timeout
  if (this._responseTimeout && !this._responseTimeoutTimer) {
    this._responseTimeoutTimer = setTimeout(function(){
      self._timeoutError('Response timeout of ', self._responseTimeout, 'ETIMEDOUT');
    }, this._responseTimeout);
  }
};

},{"./is-object":17}],19:[function(require,module,exports){
'use strict';

/**
 * Module dependencies.
 */

var utils = require('./utils');

/**
 * Expose `ResponseBase`.
 */

module.exports = ResponseBase;

/**
 * Initialize a new `ResponseBase`.
 *
 * @api public
 */

function ResponseBase(obj) {
  if (obj) return mixin(obj);
}

/**
 * Mixin the prototype properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in ResponseBase.prototype) {
    obj[key] = ResponseBase.prototype[key];
  }
  return obj;
}

/**
 * Get case-insensitive `field` value.
 *
 * @param {String} field
 * @return {String}
 * @api public
 */

ResponseBase.prototype.get = function(field) {
  return this.header[field.toLowerCase()];
};

/**
 * Set header related properties:
 *
 *   - `.type` the content type without params
 *
 * A response of "Content-Type: text/plain; charset=utf-8"
 * will provide you with a `.type` of "text/plain".
 *
 * @param {Object} header
 * @api private
 */

ResponseBase.prototype._setHeaderProperties = function(header){
    // TODO: moar!
    // TODO: make this a util

    // content-type
    var ct = header['content-type'] || '';
    this.type = utils.type(ct);

    // params
    var params = utils.params(ct);
    for (var key in params) this[key] = params[key];

    this.links = {};

    // links
    try {
        if (header.link) {
            this.links = utils.parseLinks(header.link);
        }
    } catch (err) {
        // ignore
    }
};

/**
 * Set flags such as `.ok` based on `status`.
 *
 * For example a 2xx response will give you a `.ok` of __true__
 * whereas 5xx will be __false__ and `.error` will be __true__. The
 * `.clientError` and `.serverError` are also available to be more
 * specific, and `.statusType` is the class of error ranging from 1..5
 * sometimes useful for mapping respond colors etc.
 *
 * "sugar" properties are also defined for common cases. Currently providing:
 *
 *   - .noContent
 *   - .badRequest
 *   - .unauthorized
 *   - .notAcceptable
 *   - .notFound
 *
 * @param {Number} status
 * @api private
 */

ResponseBase.prototype._setStatusProperties = function(status){
    var type = status / 100 | 0;

    // status / class
    this.status = this.statusCode = status;
    this.statusType = type;

    // basics
    this.info = 1 == type;
    this.ok = 2 == type;
    this.redirect = 3 == type;
    this.clientError = 4 == type;
    this.serverError = 5 == type;
    this.error = (4 == type || 5 == type)
        ? this.toError()
        : false;

    // sugar
    this.created = 201 == status;
    this.accepted = 202 == status;
    this.noContent = 204 == status;
    this.badRequest = 400 == status;
    this.unauthorized = 401 == status;
    this.notAcceptable = 406 == status;
    this.forbidden = 403 == status;
    this.notFound = 404 == status;
    this.unprocessableEntity = 422 == status;
};

},{"./utils":20}],20:[function(require,module,exports){
'use strict';

/**
 * Return the mime type for the given `str`.
 *
 * @param {String} str
 * @return {String}
 * @api private
 */

exports.type = function(str){
  return str.split(/ *; */).shift();
};

/**
 * Return header field parameters.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */

exports.params = function(str){
  return str.split(/ *; */).reduce(function(obj, str){
    var parts = str.split(/ *= */);
    var key = parts.shift();
    var val = parts.shift();

    if (key && val) obj[key] = val;
    return obj;
  }, {});
};

/**
 * Parse Link header fields.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */

exports.parseLinks = function(str){
  return str.split(/ *, */).reduce(function(obj, str){
    var parts = str.split(/ *; */);
    var url = parts[0].slice(1, -1);
    var rel = parts[1].split(/ *= */)[1].slice(1, -1);
    obj[rel] = url;
    return obj;
  }, {});
};

/**
 * Strip content related fields from `header`.
 *
 * @param {Object} header
 * @return {Object} header
 * @api private
 */

exports.cleanHeader = function(header, changesOrigin){
  delete header['content-type'];
  delete header['content-length'];
  delete header['transfer-encoding'];
  delete header['host'];
  // secuirty
  if (changesOrigin) {
    delete header['authorization'];
    delete header['cookie'];
  }
  return header;
};

},{}],21:[function(require,module,exports){
(function (Buffer){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _superagent = require("superagent");

var _superagent2 = _interopRequireDefault(_superagent);

var _querystring = require("querystring");

var _querystring2 = _interopRequireDefault(_querystring);

var _FileCache = require("./cache/FileCache");

var _FileCache2 = _interopRequireDefault(_FileCache);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Manages low level client-server communications, parameter marshalling, etc. There should not be any need for an
 * application to use this class directly - the *Api and model classes provide the public API for the service. The
 * contents of this file should be regarded as internal but are documented for completeness.
 * @alias module:ApiClient
 * @class
 * @module ApiClient
 */
ApiClient = function () {
    function ApiClient() {
        _classCallCheck(this, ApiClient);

        /**
         * The base URL against which to resolve every API call's (relative) path.
         * @type {String}
         * @default https://connect-testing.secupay-ag.de/api/v2
         */
        this.basePath = 'https://connect-testing.secupay-ag.de/api/v2'.replace(/\/+$/, '');

        /**
         * The authentication methods to be included for all API calls.
         * @type {Array.<String>}
         */
        this.authentications = {
            'oauth_token': { type: 'oauth2' }

            /**
             * The default HTTP headers to be included for all API calls.
             * @type {Array.<String>}
             * @default {}
             */
        };this.defaultHeaders = {};

        /**
         * The default HTTP timeout for all API calls.
         * @type {Number}
         * @default 60000
         */
        this.timeout = 60000;

        /**
         * If set to false an additional timestamp parameter is added to all API GET calls to
         * prevent browser caching
         * @type {Boolean}
         * @default true
         */
        this.cache = true;
        this.cachePool = new _FileCache2.default();

        /**
         * If set to true, the client will save the cookies from each server
         * response, and return them in the next request.
         * @default false
         */
        this.enableCookies = false;

        /*
         * Used to save and return cookies in a node.js (non-browser) setting,
         * if this.enableCookies is set to true.
         */
        if (typeof window === 'undefined') {
            this.agent = new _superagent2.default.agent();
        }
    }

    /**
    * Returns a string representation for an actual parameter.
    * @param param The actual parameter.
    * @returns {String} The string representation of <code>param</code>.
    */


    _createClass(ApiClient, [{
        key: "paramToString",
        value: function paramToString(param) {
            if (param == undefined || param == null) {
                return '';
            }
            if (param instanceof Date) {
                return param.toJSON();
            }

            return param.toString();
        }

        /**
        * Builds full URL by appending the given path to the base URL and replacing path parameter place-holders with parameter values.
        * NOTE: query parameters are not handled here.
        * @param {String} path The path to append to the base URL.
        * @param {Object} pathParams The parameter values to append.
        * @returns {String} The encoded path with parameter values substituted.
        */

    }, {
        key: "buildUrl",
        value: function buildUrl(path, pathParams) {
            var _this = this;

            if (!path.match(/^\//)) {
                path = '/' + path;
            }

            var url = this.basePath + path;
            url = url.replace(/\{([\w-]+)\}/g, function (fullMatch, key) {
                var value;
                if (pathParams.hasOwnProperty(key)) {
                    value = _this.paramToString(pathParams[key]);
                } else {
                    value = fullMatch;
                }

                return encodeURIComponent(value);
            });

            return url;
        }

        /**
        * Checks whether the given content type represents JSON.<br>
        * JSON content type examples:<br>
        * <ul>
        * <li>application/json</li>
        * <li>application/json; charset=UTF8</li>
        * <li>APPLICATION/JSON</li>
        * </ul>
        * @param {String} contentType The MIME content type to check.
        * @returns {Boolean} <code>true</code> if <code>contentType</code> represents JSON, otherwise <code>false</code>.
        */

    }, {
        key: "isJsonMime",
        value: function isJsonMime(contentType) {
            return Boolean(contentType != null && contentType.match(/^application\/json(;.*)?$/i));
        }

        /**
        * Chooses a content type from the given array, with JSON preferred; i.e. return JSON if included, otherwise return the first.
        * @param {Array.<String>} contentTypes
        * @returns {String} The chosen content type, preferring JSON.
        */

    }, {
        key: "jsonPreferredMime",
        value: function jsonPreferredMime(contentTypes) {
            for (var i = 0; i < contentTypes.length; i++) {
                if (this.isJsonMime(contentTypes[i])) {
                    return contentTypes[i];
                }
            }

            return contentTypes[0];
        }

        /**
        * Checks whether the given parameter value represents file-like content.
        * @param param The parameter to check.
        * @returns {Boolean} <code>true</code> if <code>param</code> represents a file.
        */

    }, {
        key: "isFileParam",
        value: function isFileParam(param) {
            // fs.ReadStream in Node.js and Electron (but not in runtime like browserify)
            if (typeof require === 'function') {
                var fs = void 0;
                try {
                    fs = require('fs');
                } catch (err) {}
                if (fs && fs.ReadStream && param instanceof fs.ReadStream) {
                    return true;
                }
            }

            // Buffer in Node.js
            if (typeof Buffer === 'function' && param instanceof Buffer) {
                return true;
            }

            // Blob in browser
            if (typeof Blob === 'function' && param instanceof Blob) {
                return true;
            }

            // File in browser (it seems File object is also instance of Blob, but keep this for safe)
            if (typeof File === 'function' && param instanceof File) {
                return true;
            }

            return false;
        }

        /**
        * Normalizes parameter values:
        * <ul>
        * <li>remove nils</li>
        * <li>keep files and arrays</li>
        * <li>format to string with `paramToString` for other cases</li>
        * </ul>
        * @param {Object.<String, Object>} params The parameters as object properties.
        * @returns {Object.<String, Object>} normalized parameters.
        */

    }, {
        key: "normalizeParams",
        value: function normalizeParams(params) {
            var newParams = {};
            for (var key in params) {
                if (params.hasOwnProperty(key) && params[key] != undefined && params[key] != null) {
                    var value = params[key];
                    if (this.isFileParam(value) || Array.isArray(value)) {
                        newParams[key] = value;
                    } else {
                        newParams[key] = this.paramToString(value);
                    }
                }
            }

            return newParams;
        }

        /**
        * Enumeration of collection format separator strategies.
        * @enum {String}
        * @readonly
        */

    }, {
        key: "buildCollectionParam",


        /**
        * Builds a string representation of an array-type actual parameter, according to the given collection format.
        * @param {Array} param An array parameter.
        * @param {module:ApiClient.CollectionFormatEnum} collectionFormat The array element separator strategy.
        * @returns {String|Array} A string representation of the supplied collection, using the specified delimiter. Returns
        * <code>param</code> as is if <code>collectionFormat</code> is <code>multi</code>.
        */
        value: function buildCollectionParam(param, collectionFormat) {
            if (param == null) {
                return null;
            }
            switch (collectionFormat) {
                case 'csv':
                    return param.map(this.paramToString).join(',');
                case 'ssv':
                    return param.map(this.paramToString).join(' ');
                case 'tsv':
                    return param.map(this.paramToString).join('\t');
                case 'pipes':
                    return param.map(this.paramToString).join('|');
                case 'multi':
                    //return the array directly as SuperAgent will handle it as expected
                    return param.map(this.paramToString);
                default:
                    throw new Error('Unknown collection format: ' + collectionFormat);
            }
        }

        /**
        * Applies authentication headers to the request.
        * @param {Object} request The request object created by a <code>superagent()</code> call.
        * @param {Array.<String>} authNames An array of authentication method names.
        */

    }, {
        key: "applyAuthToRequest",
        value: function applyAuthToRequest(request, authNames) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = authNames[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var authName = _step.value;

                    var auth = this.authentications[authName];
                    switch (auth.type) {
                        case 'basic':
                            if (auth.username || auth.password) {
                                request.auth(auth.username || '', auth.password || '');
                            }

                            break;
                        case 'apiKey':
                            if (auth.apiKey) {
                                var data = {};
                                if (auth.apiKeyPrefix) {
                                    data[auth.name] = auth.apiKeyPrefix + ' ' + auth.apiKey;
                                } else {
                                    data[auth.name] = auth.apiKey;
                                }

                                if (auth['in'] === 'header') {
                                    request.set(data);
                                } else {
                                    request.query(data);
                                }
                            }

                            break;
                        case 'oauth2':
                            if (auth.accessToken) {
                                // return auth.accessToken.then(function (token) {
                                    request.set({ 'Authorization': 'Bearer ' + auth.accessToken });
                                // });
                            }

                            break;
                        default:
                            throw new Error('Unknown authentication type: ' + auth.type);
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            ;
        }

        /**
        * Deserializes an HTTP response body into a value of the specified type.
        * @param {Object} response A SuperAgent response object.
        * @param {(String|Array.<String>|Object.<String, Object>|Function)} returnType The type to return. Pass a string for simple types
        * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To
        * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:
        * all properties on <code>data<code> will be converted to this type.
        * @returns A value of the specified type.
        */

    }, {
        key: "deserialize",
        value: function deserialize(response, returnType) {
            if (response == null || returnType == null || response.status == 204) {
                return null;
            }

            // Rely on SuperAgent for parsing response body.
            // See http://visionmedia.github.io/superagent/#parsing-response-bodies
            var data = response.body;
            if (data == null || (typeof data === "undefined" ? "undefined" : _typeof(data)) === 'object' && typeof data.length === 'undefined' && !Object.keys(data).length) {
                // SuperAgent does not always produce a body; use the unparsed response as a fallback
                data = response.text;
            }

            return ApiClient.convertToType(data, returnType);
        }

        /**
        * Invokes the REST service using the supplied settings and parameters.
        * @param {String} path The base URL to invoke.
        * @param {String} httpMethod The HTTP method to use.
        * @param {Object.<String, String>} pathParams A map of path parameters and their values.
        * @param {Object.<String, Object>} queryParams A map of query parameters and their values.
        * @param {Object.<String, Object>} headerParams A map of header parameters and their values.
        * @param {Object.<String, Object>} formParams A map of form parameters and their values.
        * @param {Object} bodyParam The value to pass as the request body.
        * @param {Array.<String>} authNames An array of authentication type names.
        * @param {Array.<String>} contentTypes An array of request MIME types.
        * @param {Array.<String>} accepts An array of acceptable response MIME types.
        * @param {(String|Array|ObjectFunction)} returnType The required type to return; can be a string for simple types or the
        * constructor for a complex type.
        * @returns {Promise} A {@link https://www.promisejs.org/|Promise} object.
        */

    }, {
        key: "callApi",
        value: function callApi(path, httpMethod, pathParams, queryParams, headerParams, formParams, bodyParam, authNames, contentTypes, accepts, returnType) {
            var _this2 = this;

            var url = this.buildUrl(path, pathParams);
            var request = (0, _superagent2.default)(httpMethod, url);

            // set query parameters
            if (httpMethod.toUpperCase() === 'GET' && this.cache === false) {
                queryParams['_'] = new Date().getTime();
            }

            request.query(this.normalizeParams(queryParams));

            // set header parameters
            request.set(this.defaultHeaders).set(this.normalizeParams(headerParams));

            // set request timeout
            request.timeout(this.timeout);

            var contentType = this.jsonPreferredMime(contentTypes);
            if (contentType) {
                // Issue with superagent and multipart/form-data (https://github.com/visionmedia/superagent/issues/746)
                if (contentType != 'multipart/form-data') {
                    request.type(contentType);
                }
            } else if (!request.header['Content-Type']) {
                request.type('application/json');
            }

            if (contentType === 'application/x-www-form-urlencoded') {
                request.send(_querystring2.default.stringify(this.normalizeParams(formParams)));
            } else if (contentType == 'multipart/form-data') {
                var _formParams = this.normalizeParams(formParams);
                for (var key in _formParams) {
                    if (_formParams.hasOwnProperty(key)) {
                        if (this.isFileParam(_formParams[key])) {
                            // file field
                            request.attach(key, _formParams[key]);
                        } else {
                            request.field(key, _formParams[key]);
                        }
                    }
                }
            } else if (bodyParam) {
                request.send(bodyParam);
            }

            var accept = this.jsonPreferredMime(accepts);
            if (accept) {
                request.accept(accept);
            }

            if (returnType === 'Blob') {
                request.responseType('blob');
            } else if (returnType === 'String') {
                request.responseType('string');
            }

            // Attach previously saved cookies, if enabled
            if (this.enableCookies) {
                if (typeof window === 'undefined') {
                    this.agent.attachCookies(request);
                } else {
                    request.withCredentials();
                }
            }

            var applayAuthIfRequired = function applayAuthIfRequired() {
                // apply authentications
                return _this2.applyAuthToRequest(request, authNames);
            };

            var sendRequestAndReturnPromise = function sendRequestAndReturnPromise() {
                return new Promise(function (resolve, reject) {
                    return request.end(function (error, response) {
                        if (error) {
                            reject(error);
                        } else {
                            try {
                                var data = _this2.deserialize(response, returnType);
                                if (_this2.enableCookies && typeof window === 'undefined') {
                                    _this2.agent.saveCookies(response);
                                }

                                resolve({ data: data, response: response });
                            } catch (err) {
                                reject(err);
                            }
                        }
                    });
                });
            };

            return Promise.resolve().then(applayAuthIfRequired).then(sendRequestAndReturnPromise);
        }

        /**
        * Parses an ISO-8601 string representation of a date value.
        * @param {String} str The date value as a string.
        * @returns {Date} The parsed date object.
        */

    }], [{
        key: "parseDate",
        value: function parseDate(str) {
            return new Date(str.replace(/T/i, ' '));
        }

        /**
        * Converts a value to the specified type.
        * @param {(String|Object)} data The data to convert, as a string or object.
        * @param {(String|Array.<String>|Object.<String, Object>|Function)} type The type to return. Pass a string for simple types
        * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To
        * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:
        * all properties on <code>data<code> will be converted to this type.
        * @returns An instance of the specified type or null or undefined if data is null or undefined.
        */

    }, {
        key: "convertToType",
        value: function convertToType(data, type) {
            if (data === null || data === undefined) return data;

            switch (type) {
                case 'Boolean':
                    return Boolean(data);
                case 'Integer':
                    return parseInt(data, 10);
                case 'Number':
                    return parseFloat(data);
                case 'String':
                    return String(data);
                case 'Date':
                    return ApiClient.parseDate(String(data));
                case 'Blob':
                    return data;
                default:
                    if (type === Object) {
                        // generic object, return directly
                        return data;
                    } else if (typeof type === 'function') {
                        // for model type like: User
                        return type.constructFromObject(data);
                    } else if (Array.isArray(type)) {
                        // for array type like: ['String']
                        var itemType = type[0];

                        return data.map(function (item) {
                            return ApiClient.convertToType(item, itemType);
                        });
                    } else if ((typeof type === "undefined" ? "undefined" : _typeof(type)) === 'object') {
                        // for plain object type like: {'String': 'Integer'}
                        var keyType, valueType;
                        for (var k in type) {
                            if (type.hasOwnProperty(k)) {
                                keyType = k;
                                valueType = type[k];
                                break;
                            }
                        }

                        var result = {};
                        for (var k in data) {
                            if (data.hasOwnProperty(k)) {
                                var key = ApiClient.convertToType(k, keyType);
                                var value = ApiClient.convertToType(data[k], valueType);
                                result[key] = value;
                            }
                        }

                        return result;
                    } else {
                        // for unknown type, return the data directly
                        return data;
                    }
            }
        }

        /**
        * Constructs a new map or array model from REST data.
        * @param data {Object|Array} The REST data.
        * @param obj {Object|Array} The target object or array.
        */

    }, {
        key: "constructFromObject",
        value: function constructFromObject(data, obj, itemType) {
            if (Array.isArray(data)) {
                for (var i = 0; i < data.length; i++) {
                    if (data.hasOwnProperty(i)) obj[i] = ApiClient.convertToType(data[i], itemType);
                }
            } else {
                for (var k in data) {
                    if (data.hasOwnProperty(k)) obj[k] = ApiClient.convertToType(data[k], itemType);
                }
            }
        }
    }]);

    return ApiClient;
}();

/**
 * The default API client implementation.
 * @type {module:ApiClient}
 */


ApiClient.CollectionFormatEnum = {
    /**
     * Comma-separated values. Value: <code>csv</code>
     * @const
     */
    CSV: ',',

    /**
     * Space-separated values. Value: <code>ssv</code>
     * @const
     */
    SSV: ' ',

    /**
     * Tab-separated values. Value: <code>tsv</code>
     * @const
     */
    TSV: '\t',

    /**
     * Pipe(|)-separated values. Value: <code>pipes</code>
     * @const
     */
    PIPES: '|',

    /**
     * Native array. Value: <code>multi</code>
     * @const
     */
    MULTI: 'multi'
};
exports.default = ApiClient;
ApiClient.instance = new ApiClient();
}).call(this,require("buffer").Buffer)
},{"./cache/FileCache":47,"buffer":4,"fs":3,"querystring":9,"superagent":16}],22:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _DocumentUploadsBaseProductModel = require('../model/DocumentUploadsBaseProductModel');

var _DocumentUploadsBaseProductModel2 = _interopRequireDefault(_DocumentUploadsBaseProductModel);

var _DocumentUploadsDTOContent = require('../model/DocumentUploadsDTOContent');

var _DocumentUploadsDTOContent2 = _interopRequireDefault(_DocumentUploadsDTOContent);

var _DocumentUploadsProductModel = require('../model/DocumentUploadsProductModel');

var _DocumentUploadsProductModel2 = _interopRequireDefault(_DocumentUploadsProductModel);

var _ProductExceptionPayload = require('../model/ProductExceptionPayload');

var _ProductExceptionPayload2 = _interopRequireDefault(_ProductExceptionPayload);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* DocumentUploads service.
* @module api/DocumentUploadsApi
*/
DocumentUploadsApi = function () {

  /**
  * Constructs a new DocumentUploadsApi. 
  * @alias module:api/DocumentUploadsApi
  * @class
  * @param {module:ApiClient} apiClient Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function DocumentUploadsApi(apiClient) {
    _classCallCheck(this, DocumentUploadsApi);

    this.apiClient = apiClient || _ApiClient2.default.instance;
  }

  /**
   * POST Document/Uploads
   * Store uploaded file
   * @param {module:model/DocumentUploadsDTOContent} content Content
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DocumentUploadsBaseProductModel} and HTTP response
   */


  _createClass(DocumentUploadsApi, [{
    key: 'documentUploadsPostWithHttpInfo',
    value: function documentUploadsPostWithHttpInfo(content) {
      var postBody = content;

      // verify the required parameter 'content' is set
      if (content === undefined || content === null) {
        throw new Error("Missing the required parameter 'content' when calling documentUploadsPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _DocumentUploadsBaseProductModel2.default;

      return this.apiClient.callApi('/Document/Uploads', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Document/Uploads
     * Store uploaded file
     * @param {module:model/DocumentUploadsDTOContent} content Content
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DocumentUploadsBaseProductModel}
     */

  }, {
    key: 'documentUploadsPost',
    value: function documentUploadsPost(content) {
      return this.documentUploadsPostWithHttpInfo(content).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST Document/Uploads
     * Store uploaded file
     * @param {File} fileToUpload File to upload
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DocumentUploadsProductModel} and HTTP response
     */

  }, {
    key: 'documentUploadsmultipartPostWithHttpInfo',
    value: function documentUploadsmultipartPostWithHttpInfo(fileToUpload) {
      var postBody = null;

      // verify the required parameter 'fileToUpload' is set
      if (fileToUpload === undefined || fileToUpload === null) {
        throw new Error("Missing the required parameter 'fileToUpload' when calling documentUploadsmultipartPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {
        'fileToUpload': fileToUpload
      };

      var authNames = ['oauth_token'];
      var contentTypes = ['multipart/form-data'];
      var accepts = [];
      var returnType = _DocumentUploadsProductModel2.default;

      return this.apiClient.callApi('/Document/Uploads?multipart', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Document/Uploads
     * Store uploaded file
     * @param {File} fileToUpload File to upload
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DocumentUploadsProductModel}
     */

  }, {
    key: 'documentUploadsmultipartPost',
    value: function documentUploadsmultipartPost(fileToUpload) {
      return this.documentUploadsmultipartPostWithHttpInfo(fileToUpload).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return DocumentUploadsApi;
}();

exports.default = DocumentUploadsApi;
},{"../ApiClient":21,"../model/DocumentUploadsBaseProductModel":56,"../model/DocumentUploadsDTOContent":57,"../model/DocumentUploadsProductModel":58,"../model/ProductExceptionPayload":143}],23:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _GeneralMerchantsDTO = require('../model/GeneralMerchantsDTO');

var _GeneralMerchantsDTO2 = _interopRequireDefault(_GeneralMerchantsDTO);

var _GeneralMerchantsList = require('../model/GeneralMerchantsList');

var _GeneralMerchantsList2 = _interopRequireDefault(_GeneralMerchantsList);

var _GeneralMerchantsProductModel = require('../model/GeneralMerchantsProductModel');

var _GeneralMerchantsProductModel2 = _interopRequireDefault(_GeneralMerchantsProductModel);

var _ProductExceptionPayload = require('../model/ProductExceptionPayload');

var _ProductExceptionPayload2 = _interopRequireDefault(_ProductExceptionPayload);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* GeneralMerchants service.
* @module api/GeneralMerchantsApi
*/
GeneralMerchantsApi = function () {

  /**
  * Constructs a new GeneralMerchantsApi. 
  * @alias module:api/GeneralMerchantsApi
  * @class
  * @param {module:ApiClient} apiClient Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function GeneralMerchantsApi(apiClient) {
    _classCallCheck(this, GeneralMerchantsApi);

    this.apiClient = apiClient || _ApiClient2.default.instance;
  }

  /**
   * GET General/Merchants
   * Get a list of general merchants
   * @param {Object} opts Optional parameters
   * @param {Number} opts.count The number of items to return.
   * @param {Number} opts.offset The position within the whole result set to start returning items (First element is at 0).
   * @param {String} opts.fields List of fields to include in the result. Nested properties can be accessed with this notation: prop1.prop2  Example: prop3,prop1.prop2
   * @param {String} opts.q A query string to restrict the returned items to given conditions. The query string must consist of any combination of single expressions in the form property:condition.  *                  A condition may contain:  *                      - wildcard \&quot;*\&quot; for any number of characters  *                      - wildcard \&quot;?\&quot; for one character  *                      - ranges in the form [value TO value]  *  *                  Single expressions may combined by &#39;AND&#39;, &#39;OR&#39;, &#39;NOT&#39; operators and parenthesis &#39;(&#39;, &#39;)&#39; for grouping.  *                  Property names can be nested like \&quot;prop1.prop2\&quot;.  *                  Example: (NOT customer.name:meier*) AND (customer.age:[30 TO 40] OR customer.age:[50 TO 60])  *                  
   * @param {String} opts.sort String with comma separated pairs of field:order (e.g. contact.surname:asc,contact.comapnyname:desc). Result set will be sorted by included fields, in ascending &#39;asc&#39;, or descending &#39;dsc&#39; order.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GeneralMerchantsList} and HTTP response
   */


  _createClass(GeneralMerchantsApi, [{
    key: 'getAllWithHttpInfo',
    value: function getAllWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {};
      var queryParams = {
        'count': opts['count'],
        'offset': opts['offset'],
        'fields': opts['fields'],
        'q': opts['q'],
        'sort': opts['sort']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _GeneralMerchantsList2.default;

      return this.apiClient.callApi('/General/Merchants', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * GET General/Merchants
     * Get a list of general merchants
     * @param {Object} opts Optional parameters
     * @param {Number} opts.count The number of items to return.
     * @param {Number} opts.offset The position within the whole result set to start returning items (First element is at 0).
     * @param {String} opts.fields List of fields to include in the result. Nested properties can be accessed with this notation: prop1.prop2  Example: prop3,prop1.prop2
     * @param {String} opts.q A query string to restrict the returned items to given conditions. The query string must consist of any combination of single expressions in the form property:condition.  *                  A condition may contain:  *                      - wildcard \&quot;*\&quot; for any number of characters  *                      - wildcard \&quot;?\&quot; for one character  *                      - ranges in the form [value TO value]  *  *                  Single expressions may combined by &#39;AND&#39;, &#39;OR&#39;, &#39;NOT&#39; operators and parenthesis &#39;(&#39;, &#39;)&#39; for grouping.  *                  Property names can be nested like \&quot;prop1.prop2\&quot;.  *                  Example: (NOT customer.name:meier*) AND (customer.age:[30 TO 40] OR customer.age:[50 TO 60])  *                  
     * @param {String} opts.sort String with comma separated pairs of field:order (e.g. contact.surname:asc,contact.comapnyname:desc). Result set will be sorted by included fields, in ascending &#39;asc&#39;, or descending &#39;dsc&#39; order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GeneralMerchantsList}
     */

  }, {
    key: 'getAll',
    value: function getAll(opts) {
      return this.getAllWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * GET General/Merchants/{generalMerchantId}
     * Get one general merchant for a specific id
     * @param {String} generalMerchantId General merchant id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GeneralMerchantsProductModel} and HTTP response
     */

  }, {
    key: 'getOneWithHttpInfo',
    value: function getOneWithHttpInfo(generalMerchantId) {
      var postBody = null;

      // verify the required parameter 'generalMerchantId' is set
      if (generalMerchantId === undefined || generalMerchantId === null) {
        throw new Error("Missing the required parameter 'generalMerchantId' when calling getOne");
      }

      var pathParams = {
        'generalMerchantId': generalMerchantId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _GeneralMerchantsProductModel2.default;

      return this.apiClient.callApi('/General/Merchants/{generalMerchantId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * GET General/Merchants/{generalMerchantId}
     * Get one general merchant for a specific id
     * @param {String} generalMerchantId General merchant id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GeneralMerchantsProductModel}
     */

  }, {
    key: 'getOne',
    value: function getOne(generalMerchantId) {
      return this.getOneWithHttpInfo(generalMerchantId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * PUT General/Merchants/{generalMerchantId}
     * Update general merchant
     * @param {String} generalMerchantId General merchant id
     * @param {module:model/GeneralMerchantsDTO} body General merchant properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GeneralMerchantsProductModel} and HTTP response
     */

  }, {
    key: 'updateMerchantWithHttpInfo',
    value: function updateMerchantWithHttpInfo(generalMerchantId, body) {
      var postBody = body;

      // verify the required parameter 'generalMerchantId' is set
      if (generalMerchantId === undefined || generalMerchantId === null) {
        throw new Error("Missing the required parameter 'generalMerchantId' when calling updateMerchant");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateMerchant");
      }

      var pathParams = {
        'generalMerchantId': generalMerchantId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _GeneralMerchantsProductModel2.default;

      return this.apiClient.callApi('/General/Merchants/{generalMerchantId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * PUT General/Merchants/{generalMerchantId}
     * Update general merchant
     * @param {String} generalMerchantId General merchant id
     * @param {module:model/GeneralMerchantsDTO} body General merchant properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GeneralMerchantsProductModel}
     */

  }, {
    key: 'updateMerchant',
    value: function updateMerchant(generalMerchantId, body) {
      return this.updateMerchantWithHttpInfo(generalMerchantId, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return GeneralMerchantsApi;
}();

exports.default = GeneralMerchantsApi;
},{"../ApiClient":21,"../model/GeneralMerchantsDTO":63,"../model/GeneralMerchantsList":65,"../model/GeneralMerchantsProductModel":66,"../model/ProductExceptionPayload":143}],24:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _GeneralStoresDTO = require('../model/GeneralStoresDTO');

var _GeneralStoresDTO2 = _interopRequireDefault(_GeneralStoresDTO);

var _GeneralStoresDTOReason = require('../model/GeneralStoresDTOReason');

var _GeneralStoresDTOReason2 = _interopRequireDefault(_GeneralStoresDTOReason);

var _GeneralStoresDTOType = require('../model/GeneralStoresDTOType');

var _GeneralStoresDTOType2 = _interopRequireDefault(_GeneralStoresDTOType);

var _GeneralStoresList = require('../model/GeneralStoresList');

var _GeneralStoresList2 = _interopRequireDefault(_GeneralStoresList);

var _GeneralStoresProductModel = require('../model/GeneralStoresProductModel');

var _GeneralStoresProductModel2 = _interopRequireDefault(_GeneralStoresProductModel);

var _ProductExceptionPayload = require('../model/ProductExceptionPayload');

var _ProductExceptionPayload2 = _interopRequireDefault(_ProductExceptionPayload);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* GeneralStores service.
* @module api/GeneralStoresApi
*/
GeneralStoresApi = function () {

  /**
  * Constructs a new GeneralStoresApi. 
  * @alias module:api/GeneralStoresApi
  * @class
  * @param {module:ApiClient} apiClient Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function GeneralStoresApi(apiClient) {
    _classCallCheck(this, GeneralStoresApi);

    this.apiClient = apiClient || _ApiClient2.default.instance;
  }

  /**
   * POST General/Stores
   * Create general store
   * @param {module:model/GeneralStoresDTO} body General store properties
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GeneralStoresProductModel} and HTTP response
   */


  _createClass(GeneralStoresApi, [{
    key: 'addStoreWithHttpInfo',
    value: function addStoreWithHttpInfo(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addStore");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _GeneralStoresProductModel2.default;

      return this.apiClient.callApi('/General/Stores', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST General/Stores
     * Create general store
     * @param {module:model/GeneralStoresDTO} body General store properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GeneralStoresProductModel}
     */

  }, {
    key: 'addStore',
    value: function addStore(body) {
      return this.addStoreWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST General/Stores/{generalStoreId}/assign/{googleKey}
     * Assign some object to general store
     * @param {String} generalStoreId General store id
     * @param {String} googleKey Google key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: 'assignGoogleKeyWithHttpInfo',
    value: function assignGoogleKeyWithHttpInfo(generalStoreId, googleKey) {
      var postBody = null;

      // verify the required parameter 'generalStoreId' is set
      if (generalStoreId === undefined || generalStoreId === null) {
        throw new Error("Missing the required parameter 'generalStoreId' when calling assignGoogleKey");
      }

      // verify the required parameter 'googleKey' is set
      if (googleKey === undefined || googleKey === null) {
        throw new Error("Missing the required parameter 'googleKey' when calling assignGoogleKey");
      }

      var pathParams = {
        'generalStoreId': generalStoreId,
        'googleKey': googleKey
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi('/General/Stores/{generalStoreId}/assign/{googleKey}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST General/Stores/{generalStoreId}/assign/{googleKey}
     * Assign some object to general store
     * @param {String} generalStoreId General store id
     * @param {String} googleKey Google key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: 'assignGoogleKey',
    value: function assignGoogleKey(generalStoreId, googleKey) {
      return this.assignGoogleKeyWithHttpInfo(generalStoreId, googleKey).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST General/Stores/{generalStoreId}/checkin
     * Check in
     * @param {String} generalStoreId General store id
     * @param {module:model/GeneralStoresDTOType} body Type
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: 'checkInWithHttpInfo',
    value: function checkInWithHttpInfo(generalStoreId, body) {
      var postBody = body;

      // verify the required parameter 'generalStoreId' is set
      if (generalStoreId === undefined || generalStoreId === null) {
        throw new Error("Missing the required parameter 'generalStoreId' when calling checkIn");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling checkIn");
      }

      var pathParams = {
        'generalStoreId': generalStoreId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi('/General/Stores/{generalStoreId}/checkin', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST General/Stores/{generalStoreId}/checkin
     * Check in
     * @param {String} generalStoreId General store id
     * @param {module:model/GeneralStoresDTOType} body Type
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: 'checkIn',
    value: function checkIn(generalStoreId, body) {
      return this.checkInWithHttpInfo(generalStoreId, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * GET General/Stores
     * Get a list of general stores
     * @param {Object} opts Optional parameters
     * @param {Number} opts.count The number of items to return.
     * @param {Number} opts.offset The position within the whole result set to start returning items (First element is at 0).
     * @param {String} opts.fields List of fields to include in the result. Nested properties can be accessed with this notation: prop1.prop2  Example: prop3,prop1.prop2
     * @param {String} opts.q A query string to restrict the returned items to given conditions. The query string must consist of any combination of single expressions in the form property:condition.  *                  A condition may contain:  *                      - wildcard \&quot;*\&quot; for any number of characters  *                      - wildcard \&quot;?\&quot; for one character  *                      - ranges in the form [value TO value]  *  *                  Single expressions may combined by &#39;AND&#39;, &#39;OR&#39;, &#39;NOT&#39; operators and parenthesis &#39;(&#39;, &#39;)&#39; for grouping.  *                  Property names can be nested like \&quot;prop1.prop2\&quot;.  *                  Example: (NOT customer.name:meier*) AND (customer.age:[30 TO 40] OR customer.age:[50 TO 60])  *                  
     * @param {String} opts.sort String with comma separated pairs of field:order (e.g. contact.surname:asc,contact.comapnyname:desc). Result set will be sorted by included fields, in ascending &#39;asc&#39;, or descending &#39;dsc&#39; order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GeneralStoresList} and HTTP response
     */

  }, {
    key: 'getAllWithHttpInfo',
    value: function getAllWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {};
      var queryParams = {
        'count': opts['count'],
        'offset': opts['offset'],
        'fields': opts['fields'],
        'q': opts['q'],
        'sort': opts['sort']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _GeneralStoresList2.default;

      return this.apiClient.callApi('/General/Stores', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * GET General/Stores
     * Get a list of general stores
     * @param {Object} opts Optional parameters
     * @param {Number} opts.count The number of items to return.
     * @param {Number} opts.offset The position within the whole result set to start returning items (First element is at 0).
     * @param {String} opts.fields List of fields to include in the result. Nested properties can be accessed with this notation: prop1.prop2  Example: prop3,prop1.prop2
     * @param {String} opts.q A query string to restrict the returned items to given conditions. The query string must consist of any combination of single expressions in the form property:condition.  *                  A condition may contain:  *                      - wildcard \&quot;*\&quot; for any number of characters  *                      - wildcard \&quot;?\&quot; for one character  *                      - ranges in the form [value TO value]  *  *                  Single expressions may combined by &#39;AND&#39;, &#39;OR&#39;, &#39;NOT&#39; operators and parenthesis &#39;(&#39;, &#39;)&#39; for grouping.  *                  Property names can be nested like \&quot;prop1.prop2\&quot;.  *                  Example: (NOT customer.name:meier*) AND (customer.age:[30 TO 40] OR customer.age:[50 TO 60])  *                  
     * @param {String} opts.sort String with comma separated pairs of field:order (e.g. contact.surname:asc,contact.comapnyname:desc). Result set will be sorted by included fields, in ascending &#39;asc&#39;, or descending &#39;dsc&#39; order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GeneralStoresList}
     */

  }, {
    key: 'getAll',
    value: function getAll(opts) {
      return this.getAllWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * GET General/Stores/{generalStoreId}
     * Get one general store for a specific id
     * @param {String} generalStoreId General store id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GeneralStoresProductModel} and HTTP response
     */

  }, {
    key: 'getOneWithHttpInfo',
    value: function getOneWithHttpInfo(generalStoreId) {
      var postBody = null;

      // verify the required parameter 'generalStoreId' is set
      if (generalStoreId === undefined || generalStoreId === null) {
        throw new Error("Missing the required parameter 'generalStoreId' when calling getOne");
      }

      var pathParams = {
        'generalStoreId': generalStoreId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _GeneralStoresProductModel2.default;

      return this.apiClient.callApi('/General/Stores/{generalStoreId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * GET General/Stores/{generalStoreId}
     * Get one general store for a specific id
     * @param {String} generalStoreId General store id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GeneralStoresProductModel}
     */

  }, {
    key: 'getOne',
    value: function getOne(generalStoreId) {
      return this.getOneWithHttpInfo(generalStoreId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST General/Stores/{generalStoreId}/setDefault
     * Set default flag on general store
     * @param {String} generalStoreId General store id
     * @param {Object} opts Optional parameters
     * @param {module:model/GeneralStoresDTOReason} opts.body Reason
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: 'setDefaultWithHttpInfo',
    value: function setDefaultWithHttpInfo(generalStoreId, opts) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'generalStoreId' is set
      if (generalStoreId === undefined || generalStoreId === null) {
        throw new Error("Missing the required parameter 'generalStoreId' when calling setDefault");
      }

      var pathParams = {
        'generalStoreId': generalStoreId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi('/General/Stores/{generalStoreId}/setDefault', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST General/Stores/{generalStoreId}/setDefault
     * Set default flag on general store
     * @param {String} generalStoreId General store id
     * @param {Object} opts Optional parameters
     * @param {module:model/GeneralStoresDTOReason} opts.body Reason
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: 'setDefault',
    value: function setDefault(generalStoreId, opts) {
      return this.setDefaultWithHttpInfo(generalStoreId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * PUT General/Stores/{generalStoreId}
     * Update general store
     * @param {String} generalStoreId General store id
     * @param {module:model/GeneralStoresDTO} body General store properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GeneralStoresProductModel} and HTTP response
     */

  }, {
    key: 'updateStoreWithHttpInfo',
    value: function updateStoreWithHttpInfo(generalStoreId, body) {
      var postBody = body;

      // verify the required parameter 'generalStoreId' is set
      if (generalStoreId === undefined || generalStoreId === null) {
        throw new Error("Missing the required parameter 'generalStoreId' when calling updateStore");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateStore");
      }

      var pathParams = {
        'generalStoreId': generalStoreId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _GeneralStoresProductModel2.default;

      return this.apiClient.callApi('/General/Stores/{generalStoreId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * PUT General/Stores/{generalStoreId}
     * Update general store
     * @param {String} generalStoreId General store id
     * @param {module:model/GeneralStoresDTO} body General store properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GeneralStoresProductModel}
     */

  }, {
    key: 'updateStore',
    value: function updateStore(generalStoreId, body) {
      return this.updateStoreWithHttpInfo(generalStoreId, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return GeneralStoresApi;
}();

exports.default = GeneralStoresApi;
},{"../ApiClient":21,"../model/GeneralStoresDTO":69,"../model/GeneralStoresDTOReason":70,"../model/GeneralStoresDTOType":71,"../model/GeneralStoresList":72,"../model/GeneralStoresProductModel":73,"../model/ProductExceptionPayload":143}],25:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _LoyaltyCardgroupsDTO = require('../model/LoyaltyCardgroupsDTO');

var _LoyaltyCardgroupsDTO2 = _interopRequireDefault(_LoyaltyCardgroupsDTO);

var _LoyaltyCardgroupsDTOCheckPasscodeEnabled = require('../model/LoyaltyCardgroupsDTOCheckPasscodeEnabled');

var _LoyaltyCardgroupsDTOCheckPasscodeEnabled2 = _interopRequireDefault(_LoyaltyCardgroupsDTOCheckPasscodeEnabled);

var _LoyaltyCardgroupsList = require('../model/LoyaltyCardgroupsList');

var _LoyaltyCardgroupsList2 = _interopRequireDefault(_LoyaltyCardgroupsList);

var _LoyaltyCardgroupsProductModel = require('../model/LoyaltyCardgroupsProductModel');

var _LoyaltyCardgroupsProductModel2 = _interopRequireDefault(_LoyaltyCardgroupsProductModel);

var _ProductExceptionPayload = require('../model/ProductExceptionPayload');

var _ProductExceptionPayload2 = _interopRequireDefault(_ProductExceptionPayload);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* LoyaltyCardgroups service.
* @module api/LoyaltyCardgroupsApi
*/
LoyaltyCardgroupsApi = function () {

  /**
  * Constructs a new LoyaltyCardgroupsApi. 
  * @alias module:api/LoyaltyCardgroupsApi
  * @class
  * @param {module:ApiClient} apiClient Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function LoyaltyCardgroupsApi(apiClient) {
    _classCallCheck(this, LoyaltyCardgroupsApi);

    this.apiClient = apiClient || _ApiClient2.default.instance;
  }

  /**
   * POST Loyalty/Cardgroups
   * Add loyalty card group
   * @param {module:model/LoyaltyCardgroupsDTO} body Loyalty card group properties
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LoyaltyCardgroupsProductModel} and HTTP response
   */


  _createClass(LoyaltyCardgroupsApi, [{
    key: 'addCardGroupWithHttpInfo',
    value: function addCardGroupWithHttpInfo(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addCardGroup");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _LoyaltyCardgroupsProductModel2.default;

      return this.apiClient.callApi('/Loyalty/Cardgroups', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Loyalty/Cardgroups
     * Add loyalty card group
     * @param {module:model/LoyaltyCardgroupsDTO} body Loyalty card group properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LoyaltyCardgroupsProductModel}
     */

  }, {
    key: 'addCardGroup',
    value: function addCardGroup(body) {
      return this.addCardGroupWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST Loyalty/Cardgroups/{loyaltyCardGroupId}/checkPasscodeEnabled
     * Check whether passcode check is enabled
     * @param {String} loyaltyCardGroupId Loyalty card group id
     * @param {Object} opts Optional parameters
     * @param {module:model/LoyaltyCardgroupsDTOCheckPasscodeEnabled} opts.body Check passcode details
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: 'checkPassCodeEnabledWithHttpInfo',
    value: function checkPassCodeEnabledWithHttpInfo(loyaltyCardGroupId, opts) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'loyaltyCardGroupId' is set
      if (loyaltyCardGroupId === undefined || loyaltyCardGroupId === null) {
        throw new Error("Missing the required parameter 'loyaltyCardGroupId' when calling checkPassCodeEnabled");
      }

      var pathParams = {
        'loyaltyCardGroupId': loyaltyCardGroupId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi('/Loyalty/Cardgroups/{loyaltyCardGroupId}/checkPasscodeEnabled', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Loyalty/Cardgroups/{loyaltyCardGroupId}/checkPasscodeEnabled
     * Check whether passcode check is enabled
     * @param {String} loyaltyCardGroupId Loyalty card group id
     * @param {Object} opts Optional parameters
     * @param {module:model/LoyaltyCardgroupsDTOCheckPasscodeEnabled} opts.body Check passcode details
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: 'checkPassCodeEnabled',
    value: function checkPassCodeEnabled(loyaltyCardGroupId, opts) {
      return this.checkPassCodeEnabledWithHttpInfo(loyaltyCardGroupId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * GET Loyalty/Cardgroups
     * Get a list of loyalty card groups
     * @param {Object} opts Optional parameters
     * @param {Number} opts.count The number of items to return.
     * @param {Number} opts.offset The position within the whole result set to start returning items (First element is at 0).
     * @param {String} opts.fields List of fields to include in the result. Nested properties can be accessed with this notation: prop1.prop2  Example: prop3,prop1.prop2
     * @param {String} opts.q A query string to restrict the returned items to given conditions. The query string must consist of any combination of single expressions in the form property:condition.  *                  A condition may contain:  *                      - wildcard \&quot;*\&quot; for any number of characters  *                      - wildcard \&quot;?\&quot; for one character  *                      - ranges in the form [value TO value]  *  *                  Single expressions may combined by &#39;AND&#39;, &#39;OR&#39;, &#39;NOT&#39; operators and parenthesis &#39;(&#39;, &#39;)&#39; for grouping.  *                  Property names can be nested like \&quot;prop1.prop2\&quot;.  *                  Example: (NOT customer.name:meier*) AND (customer.age:[30 TO 40] OR customer.age:[50 TO 60])  *                  
     * @param {String} opts.sort String with comma separated pairs of field:order (e.g. contact.surname:asc,contact.comapnyname:desc). Result set will be sorted by included fields, in ascending &#39;asc&#39;, or descending &#39;dsc&#39; order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LoyaltyCardgroupsList} and HTTP response
     */

  }, {
    key: 'getAllWithHttpInfo',
    value: function getAllWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {};
      var queryParams = {
        'count': opts['count'],
        'offset': opts['offset'],
        'fields': opts['fields'],
        'q': opts['q'],
        'sort': opts['sort']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _LoyaltyCardgroupsList2.default;

      return this.apiClient.callApi('/Loyalty/Cardgroups', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * GET Loyalty/Cardgroups
     * Get a list of loyalty card groups
     * @param {Object} opts Optional parameters
     * @param {Number} opts.count The number of items to return.
     * @param {Number} opts.offset The position within the whole result set to start returning items (First element is at 0).
     * @param {String} opts.fields List of fields to include in the result. Nested properties can be accessed with this notation: prop1.prop2  Example: prop3,prop1.prop2
     * @param {String} opts.q A query string to restrict the returned items to given conditions. The query string must consist of any combination of single expressions in the form property:condition.  *                  A condition may contain:  *                      - wildcard \&quot;*\&quot; for any number of characters  *                      - wildcard \&quot;?\&quot; for one character  *                      - ranges in the form [value TO value]  *  *                  Single expressions may combined by &#39;AND&#39;, &#39;OR&#39;, &#39;NOT&#39; operators and parenthesis &#39;(&#39;, &#39;)&#39; for grouping.  *                  Property names can be nested like \&quot;prop1.prop2\&quot;.  *                  Example: (NOT customer.name:meier*) AND (customer.age:[30 TO 40] OR customer.age:[50 TO 60])  *                  
     * @param {String} opts.sort String with comma separated pairs of field:order (e.g. contact.surname:asc,contact.comapnyname:desc). Result set will be sorted by included fields, in ascending &#39;asc&#39;, or descending &#39;dsc&#39; order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LoyaltyCardgroupsList}
     */

  }, {
    key: 'getAll',
    value: function getAll(opts) {
      return this.getAllWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * GET Loyalty/Cardgroups/{loyaltyCardGroupId}
     * Get loyalty card group for a specific id
     * @param {String} loyaltyCardGroupId Search one by provided id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LoyaltyCardgroupsProductModel} and HTTP response
     */

  }, {
    key: 'getOneWithHttpInfo',
    value: function getOneWithHttpInfo(loyaltyCardGroupId) {
      var postBody = null;

      // verify the required parameter 'loyaltyCardGroupId' is set
      if (loyaltyCardGroupId === undefined || loyaltyCardGroupId === null) {
        throw new Error("Missing the required parameter 'loyaltyCardGroupId' when calling getOne");
      }

      var pathParams = {
        'loyaltyCardGroupId': loyaltyCardGroupId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _LoyaltyCardgroupsProductModel2.default;

      return this.apiClient.callApi('/Loyalty/Cardgroups/{loyaltyCardGroupId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * GET Loyalty/Cardgroups/{loyaltyCardGroupId}
     * Get loyalty card group for a specific id
     * @param {String} loyaltyCardGroupId Search one by provided id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LoyaltyCardgroupsProductModel}
     */

  }, {
    key: 'getOne',
    value: function getOne(loyaltyCardGroupId) {
      return this.getOneWithHttpInfo(loyaltyCardGroupId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * PUT Loyalty/Cardgroups/{loyaltyCardGroupId}
     * Update loyalty card group
     * @param {String} loyaltyCardGroupId Loyalty card group id
     * @param {module:model/LoyaltyCardgroupsDTO} body Loyalty card group properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LoyaltyCardgroupsProductModel} and HTTP response
     */

  }, {
    key: 'updateCardGroupWithHttpInfo',
    value: function updateCardGroupWithHttpInfo(loyaltyCardGroupId, body) {
      var postBody = body;

      // verify the required parameter 'loyaltyCardGroupId' is set
      if (loyaltyCardGroupId === undefined || loyaltyCardGroupId === null) {
        throw new Error("Missing the required parameter 'loyaltyCardGroupId' when calling updateCardGroup");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateCardGroup");
      }

      var pathParams = {
        'loyaltyCardGroupId': loyaltyCardGroupId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _LoyaltyCardgroupsProductModel2.default;

      return this.apiClient.callApi('/Loyalty/Cardgroups/{loyaltyCardGroupId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * PUT Loyalty/Cardgroups/{loyaltyCardGroupId}
     * Update loyalty card group
     * @param {String} loyaltyCardGroupId Loyalty card group id
     * @param {module:model/LoyaltyCardgroupsDTO} body Loyalty card group properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LoyaltyCardgroupsProductModel}
     */

  }, {
    key: 'updateCardGroup',
    value: function updateCardGroup(loyaltyCardGroupId, body) {
      return this.updateCardGroupWithHttpInfo(loyaltyCardGroupId, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return LoyaltyCardgroupsApi;
}();

exports.default = LoyaltyCardgroupsApi;
},{"../ApiClient":21,"../model/LoyaltyCardgroupsDTO":78,"../model/LoyaltyCardgroupsDTOCheckPasscodeEnabled":79,"../model/LoyaltyCardgroupsList":81,"../model/LoyaltyCardgroupsProductModel":82,"../model/ProductExceptionPayload":143}],26:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _LoyaltyCardsList = require('../model/LoyaltyCardsList');

var _LoyaltyCardsList2 = _interopRequireDefault(_LoyaltyCardsList);

var _LoyaltyCardsProductModel = require('../model/LoyaltyCardsProductModel');

var _LoyaltyCardsProductModel2 = _interopRequireDefault(_LoyaltyCardsProductModel);

var _ProductExceptionPayload = require('../model/ProductExceptionPayload');

var _ProductExceptionPayload2 = _interopRequireDefault(_ProductExceptionPayload);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* LoyaltyCards service.
* @module api/LoyaltyCardsApi
*/
LoyaltyCardsApi = function () {

  /**
  * Constructs a new LoyaltyCardsApi. 
  * @alias module:api/LoyaltyCardsApi
  * @class
  * @param {module:ApiClient} apiClient Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function LoyaltyCardsApi(apiClient) {
    _classCallCheck(this, LoyaltyCardsApi);

    this.apiClient = apiClient || _ApiClient2.default.instance;
  }

  /**
   * POST Loyalty/Cards/{loyaltyCardId}/assignUser/{generalAccountId}
   * Assign loyalty card to specific user account
   * @param {String} loyaltyCardId Loyalty card id
   * @param {String} generalAccountId General account id
   * @param {Object} opts Optional parameters
   * @param {Object} opts.loyaltyCardPin Loyalty card pin for the specific card
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
   */


  _createClass(LoyaltyCardsApi, [{
    key: 'assignUserWithHttpInfo',
    value: function assignUserWithHttpInfo(loyaltyCardId, generalAccountId, opts) {
      opts = opts || {};
      var postBody = opts['loyaltyCardPin'];

      // verify the required parameter 'loyaltyCardId' is set
      if (loyaltyCardId === undefined || loyaltyCardId === null) {
        throw new Error("Missing the required parameter 'loyaltyCardId' when calling assignUser");
      }

      // verify the required parameter 'generalAccountId' is set
      if (generalAccountId === undefined || generalAccountId === null) {
        throw new Error("Missing the required parameter 'generalAccountId' when calling assignUser");
      }

      var pathParams = {
        'loyaltyCardId': loyaltyCardId,
        'generalAccountId': generalAccountId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi('/Loyalty/Cards/{loyaltyCardId}/assignUser/{generalAccountId}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Loyalty/Cards/{loyaltyCardId}/assignUser/{generalAccountId}
     * Assign loyalty card to specific user account
     * @param {String} loyaltyCardId Loyalty card id
     * @param {String} generalAccountId General account id
     * @param {Object} opts Optional parameters
     * @param {Object} opts.loyaltyCardPin Loyalty card pin for the specific card
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: 'assignUser',
    value: function assignUser(loyaltyCardId, generalAccountId, opts) {
      return this.assignUserWithHttpInfo(loyaltyCardId, generalAccountId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * GET Loyalty/Cards
     * Get a list of loyalty cards
     * @param {Object} opts Optional parameters
     * @param {Number} opts.count The number of items to return.
     * @param {Number} opts.offset The position within the whole result set to start returning items (First element is at 0).
     * @param {String} opts.fields List of fields to include in the result. Nested properties can be accessed with this notation: prop1.prop2  Example: prop3,prop1.prop2
     * @param {String} opts.q A query string to restrict the returned items to given conditions. The query string must consist of any combination of single expressions in the form property:condition.  *                  A condition may contain:  *                      - wildcard \&quot;*\&quot; for any number of characters  *                      - wildcard \&quot;?\&quot; for one character  *                      - ranges in the form [value TO value]  *  *                  Single expressions may combined by &#39;AND&#39;, &#39;OR&#39;, &#39;NOT&#39; operators and parenthesis &#39;(&#39;, &#39;)&#39; for grouping.  *                  Property names can be nested like \&quot;prop1.prop2\&quot;.  *                  Example: (NOT customer.name:meier*) AND (customer.age:[30 TO 40] OR customer.age:[50 TO 60])  *                  
     * @param {String} opts.sort String with comma separated pairs of field:order (e.g. contact.surname:asc,contact.comapnyname:desc). Result set will be sorted by included fields, in ascending &#39;asc&#39;, or descending &#39;dsc&#39; order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LoyaltyCardsList} and HTTP response
     */

  }, {
    key: 'getAllWithHttpInfo',
    value: function getAllWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {};
      var queryParams = {
        'count': opts['count'],
        'offset': opts['offset'],
        'fields': opts['fields'],
        'q': opts['q'],
        'sort': opts['sort']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _LoyaltyCardsList2.default;

      return this.apiClient.callApi('/Loyalty/Cards', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * GET Loyalty/Cards
     * Get a list of loyalty cards
     * @param {Object} opts Optional parameters
     * @param {Number} opts.count The number of items to return.
     * @param {Number} opts.offset The position within the whole result set to start returning items (First element is at 0).
     * @param {String} opts.fields List of fields to include in the result. Nested properties can be accessed with this notation: prop1.prop2  Example: prop3,prop1.prop2
     * @param {String} opts.q A query string to restrict the returned items to given conditions. The query string must consist of any combination of single expressions in the form property:condition.  *                  A condition may contain:  *                      - wildcard \&quot;*\&quot; for any number of characters  *                      - wildcard \&quot;?\&quot; for one character  *                      - ranges in the form [value TO value]  *  *                  Single expressions may combined by &#39;AND&#39;, &#39;OR&#39;, &#39;NOT&#39; operators and parenthesis &#39;(&#39;, &#39;)&#39; for grouping.  *                  Property names can be nested like \&quot;prop1.prop2\&quot;.  *                  Example: (NOT customer.name:meier*) AND (customer.age:[30 TO 40] OR customer.age:[50 TO 60])  *                  
     * @param {String} opts.sort String with comma separated pairs of field:order (e.g. contact.surname:asc,contact.comapnyname:desc). Result set will be sorted by included fields, in ascending &#39;asc&#39;, or descending &#39;dsc&#39; order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LoyaltyCardsList}
     */

  }, {
    key: 'getAll',
    value: function getAll(opts) {
      return this.getAllWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * GET Loyalty/Cards/{loyaltyCardId}
     * Get loyalty card for a specific id
     * @param {String} loyaltyCardId Search one loyalty card by provided id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LoyaltyCardsProductModel} and HTTP response
     */

  }, {
    key: 'getOneWithHttpInfo',
    value: function getOneWithHttpInfo(loyaltyCardId) {
      var postBody = null;

      // verify the required parameter 'loyaltyCardId' is set
      if (loyaltyCardId === undefined || loyaltyCardId === null) {
        throw new Error("Missing the required parameter 'loyaltyCardId' when calling getOne");
      }

      var pathParams = {
        'loyaltyCardId': loyaltyCardId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _LoyaltyCardsProductModel2.default;

      return this.apiClient.callApi('/Loyalty/Cards/{loyaltyCardId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * GET Loyalty/Cards/{loyaltyCardId}
     * Get loyalty card for a specific id
     * @param {String} loyaltyCardId Search one loyalty card by provided id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LoyaltyCardsProductModel}
     */

  }, {
    key: 'getOne',
    value: function getOne(loyaltyCardId) {
      return this.getOneWithHttpInfo(loyaltyCardId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * DELETE Loyalty/Cards/{loyaltyCardId}/assignUser/{generalAccountId}
     * Remove assigned loyalty card from specific user account
     * @param {String} loyaltyCardId Loyalty card id
     * @param {String} generalAccountId General account id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: 'removeAssignedUserWithHttpInfo',
    value: function removeAssignedUserWithHttpInfo(loyaltyCardId, generalAccountId) {
      var postBody = null;

      // verify the required parameter 'loyaltyCardId' is set
      if (loyaltyCardId === undefined || loyaltyCardId === null) {
        throw new Error("Missing the required parameter 'loyaltyCardId' when calling removeAssignedUser");
      }

      // verify the required parameter 'generalAccountId' is set
      if (generalAccountId === undefined || generalAccountId === null) {
        throw new Error("Missing the required parameter 'generalAccountId' when calling removeAssignedUser");
      }

      var pathParams = {
        'loyaltyCardId': loyaltyCardId,
        'generalAccountId': generalAccountId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi('/Loyalty/Cards/{loyaltyCardId}/assignUser/{generalAccountId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * DELETE Loyalty/Cards/{loyaltyCardId}/assignUser/{generalAccountId}
     * Remove assigned loyalty card from specific user account
     * @param {String} loyaltyCardId Loyalty card id
     * @param {String} generalAccountId General account id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: 'removeAssignedUser',
    value: function removeAssignedUser(loyaltyCardId, generalAccountId) {
      return this.removeAssignedUserWithHttpInfo(loyaltyCardId, generalAccountId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return LoyaltyCardsApi;
}();

exports.default = LoyaltyCardsApi;
},{"../ApiClient":21,"../model/LoyaltyCardsList":84,"../model/LoyaltyCardsProductModel":85,"../model/ProductExceptionPayload":143}],27:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _LoyaltyCustomersDTO = require('../model/LoyaltyCustomersDTO');

var _LoyaltyCustomersDTO2 = _interopRequireDefault(_LoyaltyCustomersDTO);

var _LoyaltyCustomersList = require('../model/LoyaltyCustomersList');

var _LoyaltyCustomersList2 = _interopRequireDefault(_LoyaltyCustomersList);

var _LoyaltyCustomersProductModel = require('../model/LoyaltyCustomersProductModel');

var _LoyaltyCustomersProductModel2 = _interopRequireDefault(_LoyaltyCustomersProductModel);

var _LoyaltyCustomersRemoved = require('../model/LoyaltyCustomersRemoved');

var _LoyaltyCustomersRemoved2 = _interopRequireDefault(_LoyaltyCustomersRemoved);

var _ProductExceptionPayload = require('../model/ProductExceptionPayload');

var _ProductExceptionPayload2 = _interopRequireDefault(_ProductExceptionPayload);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* LoyaltyCustomers service.
* @module api/LoyaltyCustomersApi
*/
LoyaltyCustomersApi = function () {

  /**
  * Constructs a new LoyaltyCustomersApi. 
  * @alias module:api/LoyaltyCustomersApi
  * @class
  * @param {module:ApiClient} apiClient Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function LoyaltyCustomersApi(apiClient) {
    _classCallCheck(this, LoyaltyCustomersApi);

    this.apiClient = apiClient || _ApiClient2.default.instance;
  }

  /**
   * POST Loyalty/Customers
   * Add loyalty customer
   * @param {module:model/LoyaltyCustomersDTO} body loyalty Customer container properties
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LoyaltyCustomersProductModel} and HTTP response
   */


  _createClass(LoyaltyCustomersApi, [{
    key: 'addCustomerWithHttpInfo',
    value: function addCustomerWithHttpInfo(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addCustomer");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _LoyaltyCustomersProductModel2.default;

      return this.apiClient.callApi('/Loyalty/Customers', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Loyalty/Customers
     * Add loyalty customer
     * @param {module:model/LoyaltyCustomersDTO} body loyalty Customer container properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LoyaltyCustomersProductModel}
     */

  }, {
    key: 'addCustomer',
    value: function addCustomer(body) {
      return this.addCustomerWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST Loyalty/Customers/{loyaltyCustomerId}/assignPaymentContainer/{loyaltyPaymentContainerId}
     * Assigns LoyaltyPaymentContainer to customer
     * @param {String} loyaltyCustomerId Loyalty customer id
     * @param {String} loyaltyPaymentContainerId LoyaltyPaymentContainer id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LoyaltyCustomersProductModel} and HTTP response
     */

  }, {
    key: 'assignPaymentContainerWithHttpInfo',
    value: function assignPaymentContainerWithHttpInfo(loyaltyCustomerId, loyaltyPaymentContainerId) {
      var postBody = null;

      // verify the required parameter 'loyaltyCustomerId' is set
      if (loyaltyCustomerId === undefined || loyaltyCustomerId === null) {
        throw new Error("Missing the required parameter 'loyaltyCustomerId' when calling assignPaymentContainer");
      }

      // verify the required parameter 'loyaltyPaymentContainerId' is set
      if (loyaltyPaymentContainerId === undefined || loyaltyPaymentContainerId === null) {
        throw new Error("Missing the required parameter 'loyaltyPaymentContainerId' when calling assignPaymentContainer");
      }

      var pathParams = {
        'loyaltyCustomerId': loyaltyCustomerId,
        'loyaltyPaymentContainerId': loyaltyPaymentContainerId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _LoyaltyCustomersProductModel2.default;

      return this.apiClient.callApi('/Loyalty/Customers/{loyaltyCustomerId}/assignPaymentContainer/{loyaltyPaymentContainerId}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Loyalty/Customers/{loyaltyCustomerId}/assignPaymentContainer/{loyaltyPaymentContainerId}
     * Assigns LoyaltyPaymentContainer to customer
     * @param {String} loyaltyCustomerId Loyalty customer id
     * @param {String} loyaltyPaymentContainerId LoyaltyPaymentContainer id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LoyaltyCustomersProductModel}
     */

  }, {
    key: 'assignPaymentContainer',
    value: function assignPaymentContainer(loyaltyCustomerId, loyaltyPaymentContainerId) {
      return this.assignPaymentContainerWithHttpInfo(loyaltyCustomerId, loyaltyPaymentContainerId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST Loyalty/Customers/{loyaltyCustomerId}/checkDuplicated/
     * check if there are duplicated customers for a given merchant
     * @param {String} loyaltyCustomerId Loyalty customer id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: 'checkForDuplicatesWithHttpInfo',
    value: function checkForDuplicatesWithHttpInfo(loyaltyCustomerId) {
      var postBody = null;

      // verify the required parameter 'loyaltyCustomerId' is set
      if (loyaltyCustomerId === undefined || loyaltyCustomerId === null) {
        throw new Error("Missing the required parameter 'loyaltyCustomerId' when calling checkForDuplicates");
      }

      var pathParams = {
        'loyaltyCustomerId': loyaltyCustomerId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi('/Loyalty/Customers/{loyaltyCustomerId}/checkDuplicated/', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Loyalty/Customers/{loyaltyCustomerId}/checkDuplicated/
     * check if there are duplicated customers for a given merchant
     * @param {String} loyaltyCustomerId Loyalty customer id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: 'checkForDuplicates',
    value: function checkForDuplicates(loyaltyCustomerId) {
      return this.checkForDuplicatesWithHttpInfo(loyaltyCustomerId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * GET Loyalty/Customers
     * Get a list of loyalty customers
     * @param {Object} opts Optional parameters
     * @param {Number} opts.count The number of items to return.
     * @param {Number} opts.offset The position within the whole result set to start returning items (First element is at 0).
     * @param {String} opts.fields List of fields to include in the result. Nested properties can be accessed with this notation: prop1.prop2  Example: prop3,prop1.prop2
     * @param {String} opts.q A query string to restrict the returned items to given conditions. The query string must consist of any combination of single expressions in the form property:condition.  *                  A condition may contain:  *                      - wildcard \&quot;*\&quot; for any number of characters  *                      - wildcard \&quot;?\&quot; for one character  *                      - ranges in the form [value TO value]  *  *                  Single expressions may combined by &#39;AND&#39;, &#39;OR&#39;, &#39;NOT&#39; operators and parenthesis &#39;(&#39;, &#39;)&#39; for grouping.  *                  Property names can be nested like \&quot;prop1.prop2\&quot;.  *                  Example: (NOT customer.name:meier*) AND (customer.age:[30 TO 40] OR customer.age:[50 TO 60])  *                  
     * @param {String} opts.sort String with comma separated pairs of field:order (e.g. contact.surname:asc,contact.comapnyname:desc). Result set will be sorted by included fields, in ascending &#39;asc&#39;, or descending &#39;dsc&#39; order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LoyaltyCustomersList} and HTTP response
     */

  }, {
    key: 'getAllWithHttpInfo',
    value: function getAllWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {};
      var queryParams = {
        'count': opts['count'],
        'offset': opts['offset'],
        'fields': opts['fields'],
        'q': opts['q'],
        'sort': opts['sort']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _LoyaltyCustomersList2.default;

      return this.apiClient.callApi('/Loyalty/Customers', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * GET Loyalty/Customers
     * Get a list of loyalty customers
     * @param {Object} opts Optional parameters
     * @param {Number} opts.count The number of items to return.
     * @param {Number} opts.offset The position within the whole result set to start returning items (First element is at 0).
     * @param {String} opts.fields List of fields to include in the result. Nested properties can be accessed with this notation: prop1.prop2  Example: prop3,prop1.prop2
     * @param {String} opts.q A query string to restrict the returned items to given conditions. The query string must consist of any combination of single expressions in the form property:condition.  *                  A condition may contain:  *                      - wildcard \&quot;*\&quot; for any number of characters  *                      - wildcard \&quot;?\&quot; for one character  *                      - ranges in the form [value TO value]  *  *                  Single expressions may combined by &#39;AND&#39;, &#39;OR&#39;, &#39;NOT&#39; operators and parenthesis &#39;(&#39;, &#39;)&#39; for grouping.  *                  Property names can be nested like \&quot;prop1.prop2\&quot;.  *                  Example: (NOT customer.name:meier*) AND (customer.age:[30 TO 40] OR customer.age:[50 TO 60])  *                  
     * @param {String} opts.sort String with comma separated pairs of field:order (e.g. contact.surname:asc,contact.comapnyname:desc). Result set will be sorted by included fields, in ascending &#39;asc&#39;, or descending &#39;dsc&#39; order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LoyaltyCustomersList}
     */

  }, {
    key: 'getAll',
    value: function getAll(opts) {
      return this.getAllWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * GET Loyalty/Customers/{loyaltyCustomerId}
     * Get loyalty customer for a specific id
     * @param {String} loyaltyCustomerId Search one loyalty customer by provided id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LoyaltyCustomersProductModel} and HTTP response
     */

  }, {
    key: 'getOneWithHttpInfo',
    value: function getOneWithHttpInfo(loyaltyCustomerId) {
      var postBody = null;

      // verify the required parameter 'loyaltyCustomerId' is set
      if (loyaltyCustomerId === undefined || loyaltyCustomerId === null) {
        throw new Error("Missing the required parameter 'loyaltyCustomerId' when calling getOne");
      }

      var pathParams = {
        'loyaltyCustomerId': loyaltyCustomerId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _LoyaltyCustomersProductModel2.default;

      return this.apiClient.callApi('/Loyalty/Customers/{loyaltyCustomerId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * GET Loyalty/Customers/{loyaltyCustomerId}
     * Get loyalty customer for a specific id
     * @param {String} loyaltyCustomerId Search one loyalty customer by provided id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LoyaltyCustomersProductModel}
     */

  }, {
    key: 'getOne',
    value: function getOne(loyaltyCustomerId) {
      return this.getOneWithHttpInfo(loyaltyCustomerId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * DELETE Loyalty/Customers/{loyaltyCustomerId}/assignPaymentContainer/{loyaltyPaymentContainerId}
     * Removes an assigned LoyaltyPaymentContainer from customer
     * @param {String} loyaltyCustomerId Loyalty customer id
     * @param {String} loyaltyPaymentContainerId LoyaltyPaymentContainer id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LoyaltyCustomersProductModel} and HTTP response
     */

  }, {
    key: 'removeAssignedPaymentContainerWithHttpInfo',
    value: function removeAssignedPaymentContainerWithHttpInfo(loyaltyCustomerId, loyaltyPaymentContainerId) {
      var postBody = null;

      // verify the required parameter 'loyaltyCustomerId' is set
      if (loyaltyCustomerId === undefined || loyaltyCustomerId === null) {
        throw new Error("Missing the required parameter 'loyaltyCustomerId' when calling removeAssignedPaymentContainer");
      }

      // verify the required parameter 'loyaltyPaymentContainerId' is set
      if (loyaltyPaymentContainerId === undefined || loyaltyPaymentContainerId === null) {
        throw new Error("Missing the required parameter 'loyaltyPaymentContainerId' when calling removeAssignedPaymentContainer");
      }

      var pathParams = {
        'loyaltyCustomerId': loyaltyCustomerId,
        'loyaltyPaymentContainerId': loyaltyPaymentContainerId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _LoyaltyCustomersProductModel2.default;

      return this.apiClient.callApi('/Loyalty/Customers/{loyaltyCustomerId}/assignPaymentContainer/{loyaltyPaymentContainerId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * DELETE Loyalty/Customers/{loyaltyCustomerId}/assignPaymentContainer/{loyaltyPaymentContainerId}
     * Removes an assigned LoyaltyPaymentContainer from customer
     * @param {String} loyaltyCustomerId Loyalty customer id
     * @param {String} loyaltyPaymentContainerId LoyaltyPaymentContainer id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LoyaltyCustomersProductModel}
     */

  }, {
    key: 'removeAssignedPaymentContainer',
    value: function removeAssignedPaymentContainer(loyaltyCustomerId, loyaltyPaymentContainerId) {
      return this.removeAssignedPaymentContainerWithHttpInfo(loyaltyCustomerId, loyaltyPaymentContainerId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * DELETE Loyalty/Customers/{loyaltyCustomerId}
     * Remove assigned loyalty customer
     * @param {String} loyaltyCustomerId Loyalty customer id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LoyaltyCustomersRemoved} and HTTP response
     */

  }, {
    key: 'removeCustomerWithHttpInfo',
    value: function removeCustomerWithHttpInfo(loyaltyCustomerId) {
      var postBody = null;

      // verify the required parameter 'loyaltyCustomerId' is set
      if (loyaltyCustomerId === undefined || loyaltyCustomerId === null) {
        throw new Error("Missing the required parameter 'loyaltyCustomerId' when calling removeCustomer");
      }

      var pathParams = {
        'loyaltyCustomerId': loyaltyCustomerId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _LoyaltyCustomersRemoved2.default;

      return this.apiClient.callApi('/Loyalty/Customers/{loyaltyCustomerId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * DELETE Loyalty/Customers/{loyaltyCustomerId}
     * Remove assigned loyalty customer
     * @param {String} loyaltyCustomerId Loyalty customer id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LoyaltyCustomersRemoved}
     */

  }, {
    key: 'removeCustomer',
    value: function removeCustomer(loyaltyCustomerId) {
      return this.removeCustomerWithHttpInfo(loyaltyCustomerId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * PUT Loyalty/Customers/{loyaltyCustomerId}
     * Function to update customer&#39;s data
     * @param {String} loyaltyCustomerId loyalty Customer Id CUS_XXX
     * @param {module:model/LoyaltyCustomersDTO} body loyalty Customer container properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LoyaltyCustomersProductModel} and HTTP response
     */

  }, {
    key: 'updateCustomerWithHttpInfo',
    value: function updateCustomerWithHttpInfo(loyaltyCustomerId, body) {
      var postBody = body;

      // verify the required parameter 'loyaltyCustomerId' is set
      if (loyaltyCustomerId === undefined || loyaltyCustomerId === null) {
        throw new Error("Missing the required parameter 'loyaltyCustomerId' when calling updateCustomer");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateCustomer");
      }

      var pathParams = {
        'loyaltyCustomerId': loyaltyCustomerId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _LoyaltyCustomersProductModel2.default;

      return this.apiClient.callApi('/Loyalty/Customers/{loyaltyCustomerId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * PUT Loyalty/Customers/{loyaltyCustomerId}
     * Function to update customer&#39;s data
     * @param {String} loyaltyCustomerId loyalty Customer Id CUS_XXX
     * @param {module:model/LoyaltyCustomersDTO} body loyalty Customer container properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LoyaltyCustomersProductModel}
     */

  }, {
    key: 'updateCustomer',
    value: function updateCustomer(loyaltyCustomerId, body) {
      return this.updateCustomerWithHttpInfo(loyaltyCustomerId, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return LoyaltyCustomersApi;
}();

exports.default = LoyaltyCustomersApi;
},{"../ApiClient":21,"../model/LoyaltyCustomersDTO":87,"../model/LoyaltyCustomersList":88,"../model/LoyaltyCustomersProductModel":90,"../model/LoyaltyCustomersRemoved":91,"../model/ProductExceptionPayload":143}],28:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _LoyaltyCustomersDTO = require('../model/LoyaltyCustomersDTO');

var _LoyaltyCustomersDTO2 = _interopRequireDefault(_LoyaltyCustomersDTO);

var _LoyaltyMerchantcardsDTO = require('../model/LoyaltyMerchantcardsDTO');

var _LoyaltyMerchantcardsDTO2 = _interopRequireDefault(_LoyaltyMerchantcardsDTO);

var _LoyaltyMerchantcardsDTOCardsAmount = require('../model/LoyaltyMerchantcardsDTOCardsAmount');

var _LoyaltyMerchantcardsDTOCardsAmount2 = _interopRequireDefault(_LoyaltyMerchantcardsDTOCardsAmount);

var _LoyaltyMerchantcardsDTOCheckPasscode = require('../model/LoyaltyMerchantcardsDTOCheckPasscode');

var _LoyaltyMerchantcardsDTOCheckPasscode2 = _interopRequireDefault(_LoyaltyMerchantcardsDTOCheckPasscode);

var _LoyaltyMerchantcardsDTOCsc = require('../model/LoyaltyMerchantcardsDTOCsc');

var _LoyaltyMerchantcardsDTOCsc2 = _interopRequireDefault(_LoyaltyMerchantcardsDTOCsc);

var _LoyaltyMerchantcardsDTOLock = require('../model/LoyaltyMerchantcardsDTOLock');

var _LoyaltyMerchantcardsDTOLock2 = _interopRequireDefault(_LoyaltyMerchantcardsDTOLock);

var _LoyaltyMerchantcardsDTONewPasscode = require('../model/LoyaltyMerchantcardsDTONewPasscode');

var _LoyaltyMerchantcardsDTONewPasscode2 = _interopRequireDefault(_LoyaltyMerchantcardsDTONewPasscode);

var _LoyaltyMerchantcardsDTOResetPasscode = require('../model/LoyaltyMerchantcardsDTOResetPasscode');

var _LoyaltyMerchantcardsDTOResetPasscode2 = _interopRequireDefault(_LoyaltyMerchantcardsDTOResetPasscode);

var _LoyaltyMerchantcardsDTOTransaction = require('../model/LoyaltyMerchantcardsDTOTransaction');

var _LoyaltyMerchantcardsDTOTransaction2 = _interopRequireDefault(_LoyaltyMerchantcardsDTOTransaction);

var _LoyaltyMerchantcardsDTOValidateMerchantCard = require('../model/LoyaltyMerchantcardsDTOValidateMerchantCard');

var _LoyaltyMerchantcardsDTOValidateMerchantCard2 = _interopRequireDefault(_LoyaltyMerchantcardsDTOValidateMerchantCard);

var _LoyaltyMerchantcardsList = require('../model/LoyaltyMerchantcardsList');

var _LoyaltyMerchantcardsList2 = _interopRequireDefault(_LoyaltyMerchantcardsList);

var _LoyaltyMerchantcardsProductModel = require('../model/LoyaltyMerchantcardsProductModel');

var _LoyaltyMerchantcardsProductModel2 = _interopRequireDefault(_LoyaltyMerchantcardsProductModel);

var _LoyaltyMerchantcardsProductWithReceiptModel = require('../model/LoyaltyMerchantcardsProductWithReceiptModel');

var _LoyaltyMerchantcardsProductWithReceiptModel2 = _interopRequireDefault(_LoyaltyMerchantcardsProductWithReceiptModel);

var _LoyaltyMerchantcardsValidateMerchantCard = require('../model/LoyaltyMerchantcardsValidateMerchantCard');

var _LoyaltyMerchantcardsValidateMerchantCard2 = _interopRequireDefault(_LoyaltyMerchantcardsValidateMerchantCard);

var _ProductExceptionPayload = require('../model/ProductExceptionPayload');

var _ProductExceptionPayload2 = _interopRequireDefault(_ProductExceptionPayload);

var _VirtualTerminalData = require('../model/VirtualTerminalData');

var _VirtualTerminalData2 = _interopRequireDefault(_VirtualTerminalData);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* LoyaltyMerchantcards service.
* @module api/LoyaltyMerchantcardsApi
*/
LoyaltyMerchantcardsApi = function () {

  /**
  * Constructs a new LoyaltyMerchantcardsApi. 
  * @alias module:api/LoyaltyMerchantcardsApi
  * @class
  * @param {module:ApiClient} apiClient Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function LoyaltyMerchantcardsApi(apiClient) {
    _classCallCheck(this, LoyaltyMerchantcardsApi);

    this.apiClient = apiClient || _ApiClient2.default.instance;
  }

  /**
   * POST Loyalty/MerchantCards
   * Add new loyalty merchant card
   * @param {module:model/LoyaltyMerchantcardsDTO} body Loyalty merchant card properties
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LoyaltyMerchantcardsProductModel} and HTTP response
   */


  _createClass(LoyaltyMerchantcardsApi, [{
    key: 'addMerchantCardWithHttpInfo',
    value: function addMerchantCardWithHttpInfo(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addMerchantCard");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _LoyaltyMerchantcardsProductModel2.default;

      return this.apiClient.callApi('/Loyalty/MerchantCards', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Loyalty/MerchantCards
     * Add new loyalty merchant card
     * @param {module:model/LoyaltyMerchantcardsDTO} body Loyalty merchant card properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LoyaltyMerchantcardsProductModel}
     */

  }, {
    key: 'addMerchantCard',
    value: function addMerchantCard(body) {
      return this.addMerchantCardWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST Loyalty/MerchantCards/{loyaltyMerchantCardId}/checkCsc
     * Check CSC
     * @param {String} loyaltyMerchantCardId Loyalty merchant card id
     * @param {module:model/LoyaltyMerchantcardsDTOCsc} body Information about card
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: 'checkCscWithHttpInfo',
    value: function checkCscWithHttpInfo(loyaltyMerchantCardId, body) {
      var postBody = body;

      // verify the required parameter 'loyaltyMerchantCardId' is set
      if (loyaltyMerchantCardId === undefined || loyaltyMerchantCardId === null) {
        throw new Error("Missing the required parameter 'loyaltyMerchantCardId' when calling checkCsc");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling checkCsc");
      }

      var pathParams = {
        'loyaltyMerchantCardId': loyaltyMerchantCardId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi('/Loyalty/MerchantCards/{loyaltyMerchantCardId}/checkCsc', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Loyalty/MerchantCards/{loyaltyMerchantCardId}/checkCsc
     * Check CSC
     * @param {String} loyaltyMerchantCardId Loyalty merchant card id
     * @param {module:model/LoyaltyMerchantcardsDTOCsc} body Information about card
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: 'checkCsc',
    value: function checkCsc(loyaltyMerchantCardId, body) {
      return this.checkCscWithHttpInfo(loyaltyMerchantCardId, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST Loyalty/MerchantCards/{loyaltyMerchantCardId}/checkPasscode
     * Function to check the Passcode card with cardnumber
     * @param {String} loyaltyMerchantCardId Loyalty merchant card id
     * @param {module:model/LoyaltyMerchantcardsDTOCheckPasscode} body Information about card
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: 'checkPassCodeWithHttpInfo',
    value: function checkPassCodeWithHttpInfo(loyaltyMerchantCardId, body) {
      var postBody = body;

      // verify the required parameter 'loyaltyMerchantCardId' is set
      if (loyaltyMerchantCardId === undefined || loyaltyMerchantCardId === null) {
        throw new Error("Missing the required parameter 'loyaltyMerchantCardId' when calling checkPassCode");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling checkPassCode");
      }

      var pathParams = {
        'loyaltyMerchantCardId': loyaltyMerchantCardId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi('/Loyalty/MerchantCards/{loyaltyMerchantCardId}/checkPasscode', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Loyalty/MerchantCards/{loyaltyMerchantCardId}/checkPasscode
     * Function to check the Passcode card with cardnumber
     * @param {String} loyaltyMerchantCardId Loyalty merchant card id
     * @param {module:model/LoyaltyMerchantcardsDTOCheckPasscode} body Information about card
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: 'checkPassCode',
    value: function checkPassCode(loyaltyMerchantCardId, body) {
      return this.checkPassCodeWithHttpInfo(loyaltyMerchantCardId, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST Loyalty/MerchantCards/{generalMerchantId}/createMerchantcards/{loyaltyCardgroupId}
     * Function to create multiple merchantcards for given merchant with given cardgroup
     * @param {String} generalMerchantId General merchant id
     * @param {String} loyaltyCardgroupId Loyalty card group id
     * @param {module:model/LoyaltyMerchantcardsDTOCardsAmount} body Cards amount
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/LoyaltyMerchantcardsProductModel>} and HTTP response
     */

  }, {
    key: 'createMerchantcardsWithHttpInfo',
    value: function createMerchantcardsWithHttpInfo(generalMerchantId, loyaltyCardgroupId, body) {
      var postBody = body;

      // verify the required parameter 'generalMerchantId' is set
      if (generalMerchantId === undefined || generalMerchantId === null) {
        throw new Error("Missing the required parameter 'generalMerchantId' when calling createMerchantcards");
      }

      // verify the required parameter 'loyaltyCardgroupId' is set
      if (loyaltyCardgroupId === undefined || loyaltyCardgroupId === null) {
        throw new Error("Missing the required parameter 'loyaltyCardgroupId' when calling createMerchantcards");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createMerchantcards");
      }

      var pathParams = {
        'generalMerchantId': generalMerchantId,
        'loyaltyCardgroupId': loyaltyCardgroupId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = [_LoyaltyMerchantcardsProductModel2.default];

      return this.apiClient.callApi('/Loyalty/MerchantCards/{generalMerchantId}/createMerchantcards/{loyaltyCardgroupId}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Loyalty/MerchantCards/{generalMerchantId}/createMerchantcards/{loyaltyCardgroupId}
     * Function to create multiple merchantcards for given merchant with given cardgroup
     * @param {String} generalMerchantId General merchant id
     * @param {String} loyaltyCardgroupId Loyalty card group id
     * @param {module:model/LoyaltyMerchantcardsDTOCardsAmount} body Cards amount
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/LoyaltyMerchantcardsProductModel>}
     */

  }, {
    key: 'createMerchantcards',
    value: function createMerchantcards(generalMerchantId, loyaltyCardgroupId, body) {
      return this.createMerchantcardsWithHttpInfo(generalMerchantId, loyaltyCardgroupId, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST Loyalty/MerchantCards/{loyaltyMerchantCardId}/transaction
     * Execute transaction from SDK
     * @param {String} loyaltyMerchantCardId Loyalty merchant card id
     * @param {module:model/LoyaltyMerchantcardsDTOTransaction} body Transaction properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LoyaltyMerchantcardsProductWithReceiptModel} and HTTP response
     */

  }, {
    key: 'executeTransactionWithHttpInfo',
    value: function executeTransactionWithHttpInfo(loyaltyMerchantCardId, body) {
      var postBody = body;

      // verify the required parameter 'loyaltyMerchantCardId' is set
      if (loyaltyMerchantCardId === undefined || loyaltyMerchantCardId === null) {
        throw new Error("Missing the required parameter 'loyaltyMerchantCardId' when calling executeTransaction");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling executeTransaction");
      }

      var pathParams = {
        'loyaltyMerchantCardId': loyaltyMerchantCardId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _LoyaltyMerchantcardsProductWithReceiptModel2.default;

      return this.apiClient.callApi('/Loyalty/MerchantCards/{loyaltyMerchantCardId}/transaction', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Loyalty/MerchantCards/{loyaltyMerchantCardId}/transaction
     * Execute transaction from SDK
     * @param {String} loyaltyMerchantCardId Loyalty merchant card id
     * @param {module:model/LoyaltyMerchantcardsDTOTransaction} body Transaction properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LoyaltyMerchantcardsProductWithReceiptModel}
     */

  }, {
    key: 'executeTransaction',
    value: function executeTransaction(loyaltyMerchantCardId, body) {
      return this.executeTransactionWithHttpInfo(loyaltyMerchantCardId, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * GET Loyalty/MerchantCards
     * Get a list of loyalty merchant cards
     * @param {Object} opts Optional parameters
     * @param {Number} opts.count The number of items to return.
     * @param {Number} opts.offset The position within the whole result set to start returning items (First element is at 0).
     * @param {String} opts.fields List of fields to include in the result. Nested properties can be accessed with this notation: prop1.prop2  Example: prop3,prop1.prop2
     * @param {String} opts.q A query string to restrict the returned items to given conditions. The query string must consist of any combination of single expressions in the form property:condition.  *                  A condition may contain:  *                      - wildcard \&quot;*\&quot; for any number of characters  *                      - wildcard \&quot;?\&quot; for one character  *                      - ranges in the form [value TO value]  *  *                  Single expressions may combined by &#39;AND&#39;, &#39;OR&#39;, &#39;NOT&#39; operators and parenthesis &#39;(&#39;, &#39;)&#39; for grouping.  *                  Property names can be nested like \&quot;prop1.prop2\&quot;.  *                  Example: (NOT customer.name:meier*) AND (customer.age:[30 TO 40] OR customer.age:[50 TO 60])  *                  
     * @param {String} opts.sort String with comma separated pairs of field:order (e.g. contact.surname:asc,contact.comapnyname:desc). Result set will be sorted by included fields, in ascending &#39;asc&#39;, or descending &#39;dsc&#39; order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LoyaltyMerchantcardsList} and HTTP response
     */

  }, {
    key: 'getAllWithHttpInfo',
    value: function getAllWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {};
      var queryParams = {
        'count': opts['count'],
        'offset': opts['offset'],
        'fields': opts['fields'],
        'q': opts['q'],
        'sort': opts['sort']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _LoyaltyMerchantcardsList2.default;

      return this.apiClient.callApi('/Loyalty/MerchantCards', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * GET Loyalty/MerchantCards
     * Get a list of loyalty merchant cards
     * @param {Object} opts Optional parameters
     * @param {Number} opts.count The number of items to return.
     * @param {Number} opts.offset The position within the whole result set to start returning items (First element is at 0).
     * @param {String} opts.fields List of fields to include in the result. Nested properties can be accessed with this notation: prop1.prop2  Example: prop3,prop1.prop2
     * @param {String} opts.q A query string to restrict the returned items to given conditions. The query string must consist of any combination of single expressions in the form property:condition.  *                  A condition may contain:  *                      - wildcard \&quot;*\&quot; for any number of characters  *                      - wildcard \&quot;?\&quot; for one character  *                      - ranges in the form [value TO value]  *  *                  Single expressions may combined by &#39;AND&#39;, &#39;OR&#39;, &#39;NOT&#39; operators and parenthesis &#39;(&#39;, &#39;)&#39; for grouping.  *                  Property names can be nested like \&quot;prop1.prop2\&quot;.  *                  Example: (NOT customer.name:meier*) AND (customer.age:[30 TO 40] OR customer.age:[50 TO 60])  *                  
     * @param {String} opts.sort String with comma separated pairs of field:order (e.g. contact.surname:asc,contact.comapnyname:desc). Result set will be sorted by included fields, in ascending &#39;asc&#39;, or descending &#39;dsc&#39; order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LoyaltyMerchantcardsList}
     */

  }, {
    key: 'getAll',
    value: function getAll(opts) {
      return this.getAllWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * GET Loyalty/MerchantCards/{loyaltyMerchantCardId}/lock
     * Get loyalty merchant card lock information for a specific id
     * @param {String} loyaltyMerchantCardId Loyalty merchant card id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LoyaltyMerchantcardsDTOLock} and HTTP response
     */

  }, {
    key: 'getLockWithHttpInfo',
    value: function getLockWithHttpInfo(loyaltyMerchantCardId) {
      var postBody = null;

      // verify the required parameter 'loyaltyMerchantCardId' is set
      if (loyaltyMerchantCardId === undefined || loyaltyMerchantCardId === null) {
        throw new Error("Missing the required parameter 'loyaltyMerchantCardId' when calling getLock");
      }

      var pathParams = {
        'loyaltyMerchantCardId': loyaltyMerchantCardId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _LoyaltyMerchantcardsDTOLock2.default;

      return this.apiClient.callApi('/Loyalty/MerchantCards/{loyaltyMerchantCardId}/lock', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * GET Loyalty/MerchantCards/{loyaltyMerchantCardId}/lock
     * Get loyalty merchant card lock information for a specific id
     * @param {String} loyaltyMerchantCardId Loyalty merchant card id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LoyaltyMerchantcardsDTOLock}
     */

  }, {
    key: 'getLock',
    value: function getLock(loyaltyMerchantCardId) {
      return this.getLockWithHttpInfo(loyaltyMerchantCardId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * GET Loyalty/MerchantCards/{loyaltyMerchantCardId}
     * Get loyalty merchant card for a specific id
     * @param {String} loyaltyMerchantCardId Search one by provided id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LoyaltyMerchantcardsProductModel} and HTTP response
     */

  }, {
    key: 'getOneWithHttpInfo',
    value: function getOneWithHttpInfo(loyaltyMerchantCardId) {
      var postBody = null;

      // verify the required parameter 'loyaltyMerchantCardId' is set
      if (loyaltyMerchantCardId === undefined || loyaltyMerchantCardId === null) {
        throw new Error("Missing the required parameter 'loyaltyMerchantCardId' when calling getOne");
      }

      var pathParams = {
        'loyaltyMerchantCardId': loyaltyMerchantCardId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _LoyaltyMerchantcardsProductModel2.default;

      return this.apiClient.callApi('/Loyalty/MerchantCards/{loyaltyMerchantCardId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * GET Loyalty/MerchantCards/{loyaltyMerchantCardId}
     * Get loyalty merchant card for a specific id
     * @param {String} loyaltyMerchantCardId Search one by provided id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LoyaltyMerchantcardsProductModel}
     */

  }, {
    key: 'getOne',
    value: function getOne(loyaltyMerchantCardId) {
      return this.getOneWithHttpInfo(loyaltyMerchantCardId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * GET Loyalty/MerchantCards/{generalMerchantId}/merchantcard/{loyaltyCardId}
     * Get raw merchant card id for merchant id and card id
     * @param {String} generalMerchantId Merchant id
     * @param {String} loyaltyCardId Card id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: 'getRawMerchantCardIdWithHttpInfo',
    value: function getRawMerchantCardIdWithHttpInfo(generalMerchantId, loyaltyCardId) {
      var postBody = null;

      // verify the required parameter 'generalMerchantId' is set
      if (generalMerchantId === undefined || generalMerchantId === null) {
        throw new Error("Missing the required parameter 'generalMerchantId' when calling getRawMerchantCardId");
      }

      // verify the required parameter 'loyaltyCardId' is set
      if (loyaltyCardId === undefined || loyaltyCardId === null) {
        throw new Error("Missing the required parameter 'loyaltyCardId' when calling getRawMerchantCardId");
      }

      var pathParams = {
        'generalMerchantId': generalMerchantId,
        'loyaltyCardId': loyaltyCardId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi('/Loyalty/MerchantCards/{generalMerchantId}/merchantcard/{loyaltyCardId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * GET Loyalty/MerchantCards/{generalMerchantId}/merchantcard/{loyaltyCardId}
     * Get raw merchant card id for merchant id and card id
     * @param {String} generalMerchantId Merchant id
     * @param {String} loyaltyCardId Card id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: 'getRawMerchantCardId',
    value: function getRawMerchantCardId(generalMerchantId, loyaltyCardId) {
      return this.getRawMerchantCardIdWithHttpInfo(generalMerchantId, loyaltyCardId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * GET Loyalty/MerchantCards/{loyaltyMerchantCardId}/virtualTerminalData/{loyaltyMerchantId}
     * Get virtual terminal data for merchant
     * @param {String} loyaltyMerchantCardId Merchant card id
     * @param {String} loyaltyMerchantId Merchant id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VirtualTerminalData} and HTTP response
     */

  }, {
    key: 'getVirtualTerminalDataWithHttpInfo',
    value: function getVirtualTerminalDataWithHttpInfo(loyaltyMerchantCardId, loyaltyMerchantId) {
      var postBody = null;

      // verify the required parameter 'loyaltyMerchantCardId' is set
      if (loyaltyMerchantCardId === undefined || loyaltyMerchantCardId === null) {
        throw new Error("Missing the required parameter 'loyaltyMerchantCardId' when calling getVirtualTerminalData");
      }

      // verify the required parameter 'loyaltyMerchantId' is set
      if (loyaltyMerchantId === undefined || loyaltyMerchantId === null) {
        throw new Error("Missing the required parameter 'loyaltyMerchantId' when calling getVirtualTerminalData");
      }

      var pathParams = {
        'loyaltyMerchantCardId': loyaltyMerchantCardId,
        'loyaltyMerchantId': loyaltyMerchantId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _VirtualTerminalData2.default;

      return this.apiClient.callApi('/Loyalty/MerchantCards/{loyaltyMerchantCardId}/virtualTerminalData/{loyaltyMerchantId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * GET Loyalty/MerchantCards/{loyaltyMerchantCardId}/virtualTerminalData/{loyaltyMerchantId}
     * Get virtual terminal data for merchant
     * @param {String} loyaltyMerchantCardId Merchant card id
     * @param {String} loyaltyMerchantId Merchant id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VirtualTerminalData}
     */

  }, {
    key: 'getVirtualTerminalData',
    value: function getVirtualTerminalData(loyaltyMerchantCardId, loyaltyMerchantId) {
      return this.getVirtualTerminalDataWithHttpInfo(loyaltyMerchantCardId, loyaltyMerchantId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST Loyalty/MerchantCards/{loyaltyMerchantCardId}/lock
     * Lock merchant card
     * @param {String} loyaltyMerchantCardId Loyalty merchant card id
     * @param {module:model/LoyaltyMerchantcardsDTOLock} body Information about lock
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LoyaltyMerchantcardsProductModel} and HTTP response
     */

  }, {
    key: 'lockWithHttpInfo',
    value: function lockWithHttpInfo(loyaltyMerchantCardId, body) {
      var postBody = body;

      // verify the required parameter 'loyaltyMerchantCardId' is set
      if (loyaltyMerchantCardId === undefined || loyaltyMerchantCardId === null) {
        throw new Error("Missing the required parameter 'loyaltyMerchantCardId' when calling lock");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling lock");
      }

      var pathParams = {
        'loyaltyMerchantCardId': loyaltyMerchantCardId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _LoyaltyMerchantcardsProductModel2.default;

      return this.apiClient.callApi('/Loyalty/MerchantCards/{loyaltyMerchantCardId}/lock', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Loyalty/MerchantCards/{loyaltyMerchantCardId}/lock
     * Lock merchant card
     * @param {String} loyaltyMerchantCardId Loyalty merchant card id
     * @param {module:model/LoyaltyMerchantcardsDTOLock} body Information about lock
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LoyaltyMerchantcardsProductModel}
     */

  }, {
    key: 'lock',
    value: function lock(loyaltyMerchantCardId, body) {
      return this.lockWithHttpInfo(loyaltyMerchantCardId, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST Loyalty/MerchantCards/{loyaltyMerchantCardId}/newPasscode
     * Function to save new given passcode for given merchantcard identified by cardnumber
     * @param {String} loyaltyMerchantCardId Loyalty merchant card id
     * @param {module:model/LoyaltyMerchantcardsDTONewPasscode} body Information about card
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: 'newPassCodeWithHttpInfo',
    value: function newPassCodeWithHttpInfo(loyaltyMerchantCardId, body) {
      var postBody = body;

      // verify the required parameter 'loyaltyMerchantCardId' is set
      if (loyaltyMerchantCardId === undefined || loyaltyMerchantCardId === null) {
        throw new Error("Missing the required parameter 'loyaltyMerchantCardId' when calling newPassCode");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling newPassCode");
      }

      var pathParams = {
        'loyaltyMerchantCardId': loyaltyMerchantCardId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi('/Loyalty/MerchantCards/{loyaltyMerchantCardId}/newPasscode', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Loyalty/MerchantCards/{loyaltyMerchantCardId}/newPasscode
     * Function to save new given passcode for given merchantcard identified by cardnumber
     * @param {String} loyaltyMerchantCardId Loyalty merchant card id
     * @param {module:model/LoyaltyMerchantcardsDTONewPasscode} body Information about card
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: 'newPassCode',
    value: function newPassCode(loyaltyMerchantCardId, body) {
      return this.newPassCodeWithHttpInfo(loyaltyMerchantCardId, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST Loyalty/MerchantCards/{loyaltyMerchantCardId}/registerCustomer
     * Register new customer for a card
     * @param {String} loyaltyMerchantCardId Loyalty merchant card id
     * @param {module:model/LoyaltyCustomersDTO} body Loyalty customer properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LoyaltyMerchantcardsProductModel} and HTTP response
     */

  }, {
    key: 'registerCustomerWithHttpInfo',
    value: function registerCustomerWithHttpInfo(loyaltyMerchantCardId, body) {
      var postBody = body;

      // verify the required parameter 'loyaltyMerchantCardId' is set
      if (loyaltyMerchantCardId === undefined || loyaltyMerchantCardId === null) {
        throw new Error("Missing the required parameter 'loyaltyMerchantCardId' when calling registerCustomer");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling registerCustomer");
      }

      var pathParams = {
        'loyaltyMerchantCardId': loyaltyMerchantCardId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _LoyaltyMerchantcardsProductModel2.default;

      return this.apiClient.callApi('/Loyalty/MerchantCards/{loyaltyMerchantCardId}/registerCustomer', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Loyalty/MerchantCards/{loyaltyMerchantCardId}/registerCustomer
     * Register new customer for a card
     * @param {String} loyaltyMerchantCardId Loyalty merchant card id
     * @param {module:model/LoyaltyCustomersDTO} body Loyalty customer properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LoyaltyMerchantcardsProductModel}
     */

  }, {
    key: 'registerCustomer',
    value: function registerCustomer(loyaltyMerchantCardId, body) {
      return this.registerCustomerWithHttpInfo(loyaltyMerchantCardId, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * DELETE Loyalty/MerchantCards/{loyaltyMerchantCardId}
     * Delete loyalty merchant card
     * @param {String} loyaltyMerchantCardId Loyalty merchant card id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LoyaltyMerchantcardsProductModel} and HTTP response
     */

  }, {
    key: 'removeMerchantCardWithHttpInfo',
    value: function removeMerchantCardWithHttpInfo(loyaltyMerchantCardId) {
      var postBody = null;

      // verify the required parameter 'loyaltyMerchantCardId' is set
      if (loyaltyMerchantCardId === undefined || loyaltyMerchantCardId === null) {
        throw new Error("Missing the required parameter 'loyaltyMerchantCardId' when calling removeMerchantCard");
      }

      var pathParams = {
        'loyaltyMerchantCardId': loyaltyMerchantCardId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _LoyaltyMerchantcardsProductModel2.default;

      return this.apiClient.callApi('/Loyalty/MerchantCards/{loyaltyMerchantCardId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * DELETE Loyalty/MerchantCards/{loyaltyMerchantCardId}
     * Delete loyalty merchant card
     * @param {String} loyaltyMerchantCardId Loyalty merchant card id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LoyaltyMerchantcardsProductModel}
     */

  }, {
    key: 'removeMerchantCard',
    value: function removeMerchantCard(loyaltyMerchantCardId) {
      return this.removeMerchantCardWithHttpInfo(loyaltyMerchantCardId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST Loyalty/MerchantCards/{loyaltyMerchantCardId}/resetPasscode
     * Function to reset a passcode for given merchantcard
     * @param {String} loyaltyMerchantCardId Loyalty merchant card id
     * @param {module:model/LoyaltyMerchantcardsDTOResetPasscode} body Information about card
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: 'resetPassCodeWithHttpInfo',
    value: function resetPassCodeWithHttpInfo(loyaltyMerchantCardId, body) {
      var postBody = body;

      // verify the required parameter 'loyaltyMerchantCardId' is set
      if (loyaltyMerchantCardId === undefined || loyaltyMerchantCardId === null) {
        throw new Error("Missing the required parameter 'loyaltyMerchantCardId' when calling resetPassCode");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling resetPassCode");
      }

      var pathParams = {
        'loyaltyMerchantCardId': loyaltyMerchantCardId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi('/Loyalty/MerchantCards/{loyaltyMerchantCardId}/resetPasscode', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Loyalty/MerchantCards/{loyaltyMerchantCardId}/resetPasscode
     * Function to reset a passcode for given merchantcard
     * @param {String} loyaltyMerchantCardId Loyalty merchant card id
     * @param {module:model/LoyaltyMerchantcardsDTOResetPasscode} body Information about card
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: 'resetPassCode',
    value: function resetPassCode(loyaltyMerchantCardId, body) {
      return this.resetPassCodeWithHttpInfo(loyaltyMerchantCardId, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST Loyalty/MerchantCards/{loyaltyMerchantCardId}/setCustomer/{loyaltyCustomerId}
     * Set loyalty customer for a loyalty merchant card
     * @param {String} loyaltyMerchantCardId Loyalty merchant card id
     * @param {String} loyaltyCustomerId Loyalty customer id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LoyaltyMerchantcardsProductModel} and HTTP response
     */

  }, {
    key: 'setCustomerWithHttpInfo',
    value: function setCustomerWithHttpInfo(loyaltyMerchantCardId, loyaltyCustomerId) {
      var postBody = null;

      // verify the required parameter 'loyaltyMerchantCardId' is set
      if (loyaltyMerchantCardId === undefined || loyaltyMerchantCardId === null) {
        throw new Error("Missing the required parameter 'loyaltyMerchantCardId' when calling setCustomer");
      }

      // verify the required parameter 'loyaltyCustomerId' is set
      if (loyaltyCustomerId === undefined || loyaltyCustomerId === null) {
        throw new Error("Missing the required parameter 'loyaltyCustomerId' when calling setCustomer");
      }

      var pathParams = {
        'loyaltyMerchantCardId': loyaltyMerchantCardId,
        'loyaltyCustomerId': loyaltyCustomerId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _LoyaltyMerchantcardsProductModel2.default;

      return this.apiClient.callApi('/Loyalty/MerchantCards/{loyaltyMerchantCardId}/setCustomer/{loyaltyCustomerId}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Loyalty/MerchantCards/{loyaltyMerchantCardId}/setCustomer/{loyaltyCustomerId}
     * Set loyalty customer for a loyalty merchant card
     * @param {String} loyaltyMerchantCardId Loyalty merchant card id
     * @param {String} loyaltyCustomerId Loyalty customer id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LoyaltyMerchantcardsProductModel}
     */

  }, {
    key: 'setCustomer',
    value: function setCustomer(loyaltyMerchantCardId, loyaltyCustomerId) {
      return this.setCustomerWithHttpInfo(loyaltyMerchantCardId, loyaltyCustomerId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST Loyalty/MerchantCards/{loyaltyMerchantCardId}/unlock
     * Unlock merchant card
     * @param {String} loyaltyMerchantCardId Loyalty merchant card id
     * @param {module:model/LoyaltyMerchantcardsDTOLock} body Information about unlock
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LoyaltyMerchantcardsProductModel} and HTTP response
     */

  }, {
    key: 'unlockWithHttpInfo',
    value: function unlockWithHttpInfo(loyaltyMerchantCardId, body) {
      var postBody = body;

      // verify the required parameter 'loyaltyMerchantCardId' is set
      if (loyaltyMerchantCardId === undefined || loyaltyMerchantCardId === null) {
        throw new Error("Missing the required parameter 'loyaltyMerchantCardId' when calling unlock");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling unlock");
      }

      var pathParams = {
        'loyaltyMerchantCardId': loyaltyMerchantCardId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _LoyaltyMerchantcardsProductModel2.default;

      return this.apiClient.callApi('/Loyalty/MerchantCards/{loyaltyMerchantCardId}/unlock', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Loyalty/MerchantCards/{loyaltyMerchantCardId}/unlock
     * Unlock merchant card
     * @param {String} loyaltyMerchantCardId Loyalty merchant card id
     * @param {module:model/LoyaltyMerchantcardsDTOLock} body Information about unlock
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LoyaltyMerchantcardsProductModel}
     */

  }, {
    key: 'unlock',
    value: function unlock(loyaltyMerchantCardId, body) {
      return this.unlockWithHttpInfo(loyaltyMerchantCardId, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * PUT Loyalty/MerchantCards/{loyaltyMerchantCardId}/cardgroup/{loyaltyCardGroupId}
     * Update loyalty card group
     * @param {String} loyaltyMerchantCardId Loyalty merchant card id
     * @param {String} loyaltyCardGroupId Loyalty card group id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LoyaltyMerchantcardsProductModel} and HTTP response
     */

  }, {
    key: 'updateCardGroupOfMerchantCardWithHttpInfo',
    value: function updateCardGroupOfMerchantCardWithHttpInfo(loyaltyMerchantCardId, loyaltyCardGroupId) {
      var postBody = null;

      // verify the required parameter 'loyaltyMerchantCardId' is set
      if (loyaltyMerchantCardId === undefined || loyaltyMerchantCardId === null) {
        throw new Error("Missing the required parameter 'loyaltyMerchantCardId' when calling updateCardGroupOfMerchantCard");
      }

      // verify the required parameter 'loyaltyCardGroupId' is set
      if (loyaltyCardGroupId === undefined || loyaltyCardGroupId === null) {
        throw new Error("Missing the required parameter 'loyaltyCardGroupId' when calling updateCardGroupOfMerchantCard");
      }

      var pathParams = {
        'loyaltyMerchantCardId': loyaltyMerchantCardId,
        'loyaltyCardGroupId': loyaltyCardGroupId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _LoyaltyMerchantcardsProductModel2.default;

      return this.apiClient.callApi('/Loyalty/MerchantCards/{loyaltyMerchantCardId}/cardgroup/{loyaltyCardGroupId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * PUT Loyalty/MerchantCards/{loyaltyMerchantCardId}/cardgroup/{loyaltyCardGroupId}
     * Update loyalty card group
     * @param {String} loyaltyMerchantCardId Loyalty merchant card id
     * @param {String} loyaltyCardGroupId Loyalty card group id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LoyaltyMerchantcardsProductModel}
     */

  }, {
    key: 'updateCardGroupOfMerchantCard',
    value: function updateCardGroupOfMerchantCard(loyaltyMerchantCardId, loyaltyCardGroupId) {
      return this.updateCardGroupOfMerchantCardWithHttpInfo(loyaltyMerchantCardId, loyaltyCardGroupId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * PUT Loyalty/MerchantCards/{loyaltyMerchantCardId}
     * Update loyalty merchant card
     * @param {String} loyaltyMerchantCardId Loyalty merchant card id
     * @param {module:model/LoyaltyMerchantcardsDTO} body Loyalty merchant card properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LoyaltyMerchantcardsProductModel} and HTTP response
     */

  }, {
    key: 'updateMerchantCardWithHttpInfo',
    value: function updateMerchantCardWithHttpInfo(loyaltyMerchantCardId, body) {
      var postBody = body;

      // verify the required parameter 'loyaltyMerchantCardId' is set
      if (loyaltyMerchantCardId === undefined || loyaltyMerchantCardId === null) {
        throw new Error("Missing the required parameter 'loyaltyMerchantCardId' when calling updateMerchantCard");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateMerchantCard");
      }

      var pathParams = {
        'loyaltyMerchantCardId': loyaltyMerchantCardId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _LoyaltyMerchantcardsProductModel2.default;

      return this.apiClient.callApi('/Loyalty/MerchantCards/{loyaltyMerchantCardId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * PUT Loyalty/MerchantCards/{loyaltyMerchantCardId}
     * Update loyalty merchant card
     * @param {String} loyaltyMerchantCardId Loyalty merchant card id
     * @param {module:model/LoyaltyMerchantcardsDTO} body Loyalty merchant card properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LoyaltyMerchantcardsProductModel}
     */

  }, {
    key: 'updateMerchantCard',
    value: function updateMerchantCard(loyaltyMerchantCardId, body) {
      return this.updateMerchantCardWithHttpInfo(loyaltyMerchantCardId, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST Loyalty/MerchantCards/{loyaltyMerchantCardId}/validateMerchantcard
     * Function to check the merchant card
     * @param {String} loyaltyMerchantCardId Loyalty merchant card id
     * @param {module:model/LoyaltyMerchantcardsDTOValidateMerchantCard} body Information about card
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LoyaltyMerchantcardsValidateMerchantCard} and HTTP response
     */

  }, {
    key: 'validateMerchantCardWithHttpInfo',
    value: function validateMerchantCardWithHttpInfo(loyaltyMerchantCardId, body) {
      var postBody = body;

      // verify the required parameter 'loyaltyMerchantCardId' is set
      if (loyaltyMerchantCardId === undefined || loyaltyMerchantCardId === null) {
        throw new Error("Missing the required parameter 'loyaltyMerchantCardId' when calling validateMerchantCard");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling validateMerchantCard");
      }

      var pathParams = {
        'loyaltyMerchantCardId': loyaltyMerchantCardId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _LoyaltyMerchantcardsValidateMerchantCard2.default;

      return this.apiClient.callApi('/Loyalty/MerchantCards/{loyaltyMerchantCardId}/validateMerchantcard', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Loyalty/MerchantCards/{loyaltyMerchantCardId}/validateMerchantcard
     * Function to check the merchant card
     * @param {String} loyaltyMerchantCardId Loyalty merchant card id
     * @param {module:model/LoyaltyMerchantcardsDTOValidateMerchantCard} body Information about card
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LoyaltyMerchantcardsValidateMerchantCard}
     */

  }, {
    key: 'validateMerchantCard',
    value: function validateMerchantCard(loyaltyMerchantCardId, body) {
      return this.validateMerchantCardWithHttpInfo(loyaltyMerchantCardId, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return LoyaltyMerchantcardsApi;
}();

exports.default = LoyaltyMerchantcardsApi;
},{"../ApiClient":21,"../model/LoyaltyCustomersDTO":87,"../model/LoyaltyMerchantcardsDTO":94,"../model/LoyaltyMerchantcardsDTOCardsAmount":95,"../model/LoyaltyMerchantcardsDTOCheckPasscode":96,"../model/LoyaltyMerchantcardsDTOCsc":97,"../model/LoyaltyMerchantcardsDTOLock":98,"../model/LoyaltyMerchantcardsDTONewPasscode":99,"../model/LoyaltyMerchantcardsDTOResetPasscode":101,"../model/LoyaltyMerchantcardsDTOTransaction":102,"../model/LoyaltyMerchantcardsDTOValidateMerchantCard":103,"../model/LoyaltyMerchantcardsList":104,"../model/LoyaltyMerchantcardsProductModel":105,"../model/LoyaltyMerchantcardsProductWithReceiptModel":106,"../model/LoyaltyMerchantcardsValidateMerchantCard":107,"../model/ProductExceptionPayload":143,"../model/VirtualTerminalData":198}],29:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _LoyaltyCardgroupsProductModel = require('../model/LoyaltyCardgroupsProductModel');

var _LoyaltyCardgroupsProductModel2 = _interopRequireDefault(_LoyaltyCardgroupsProductModel);

var _ProductExceptionPayload = require('../model/ProductExceptionPayload');

var _ProductExceptionPayload2 = _interopRequireDefault(_ProductExceptionPayload);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* LoyaltySales service.
* @module api/LoyaltySalesApi
*/
LoyaltySalesApi = function () {

  /**
  * Constructs a new LoyaltySalesApi. 
  * @alias module:api/LoyaltySalesApi
  * @class
  * @param {module:ApiClient} apiClient Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function LoyaltySalesApi(apiClient) {
    _classCallCheck(this, LoyaltySalesApi);

    this.apiClient = apiClient || _ApiClient2.default.instance;
  }

  /**
   * GET Loyalty/Sales/{generalMerchantId}/CardGroupsByMerchantID
   * Get cardgroups by merchant id
   * @param {String} generalMerchantId Search by provided id
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/LoyaltyCardgroupsProductModel>} and HTTP response
   */


  _createClass(LoyaltySalesApi, [{
    key: 'getCardgroupsByMerchantIdWithHttpInfo',
    value: function getCardgroupsByMerchantIdWithHttpInfo(generalMerchantId) {
      var postBody = null;

      // verify the required parameter 'generalMerchantId' is set
      if (generalMerchantId === undefined || generalMerchantId === null) {
        throw new Error("Missing the required parameter 'generalMerchantId' when calling getCardgroupsByMerchantId");
      }

      var pathParams = {
        'generalMerchantId': generalMerchantId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = [_LoyaltyCardgroupsProductModel2.default];

      return this.apiClient.callApi('/Loyalty/Sales/{generalMerchantId}/CardGroupsByMerchantID', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * GET Loyalty/Sales/{generalMerchantId}/CardGroupsByMerchantID
     * Get cardgroups by merchant id
     * @param {String} generalMerchantId Search by provided id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/LoyaltyCardgroupsProductModel>}
     */

  }, {
    key: 'getCardgroupsByMerchantId',
    value: function getCardgroupsByMerchantId(generalMerchantId) {
      return this.getCardgroupsByMerchantIdWithHttpInfo(generalMerchantId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * GET Loyalty/Sales/{generalStoresId}/VirtualTerminalIdForStore
     * Get DECODED virtual terminal id by DECODED store id
     * @param {String} generalStoresId DECODED store id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: 'getVirtualTerminalIdByStoreIdWithHttpInfo',
    value: function getVirtualTerminalIdByStoreIdWithHttpInfo(generalStoresId) {
      var postBody = null;

      // verify the required parameter 'generalStoresId' is set
      if (generalStoresId === undefined || generalStoresId === null) {
        throw new Error("Missing the required parameter 'generalStoresId' when calling getVirtualTerminalIdByStoreId");
      }

      var pathParams = {
        'generalStoresId': generalStoresId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi('/Loyalty/Sales/{generalStoresId}/VirtualTerminalIdForStore', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * GET Loyalty/Sales/{generalStoresId}/VirtualTerminalIdForStore
     * Get DECODED virtual terminal id by DECODED store id
     * @param {String} generalStoresId DECODED store id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: 'getVirtualTerminalIdByStoreId',
    value: function getVirtualTerminalIdByStoreId(generalStoresId) {
      return this.getVirtualTerminalIdByStoreIdWithHttpInfo(generalStoresId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return LoyaltySalesApi;
}();

exports.default = LoyaltySalesApi;
},{"../ApiClient":21,"../model/LoyaltyCardgroupsProductModel":82,"../model/ProductExceptionPayload":143}],30:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _LoyaltyStoregroupsDTO = require('../model/LoyaltyStoregroupsDTO');

var _LoyaltyStoregroupsDTO2 = _interopRequireDefault(_LoyaltyStoregroupsDTO);

var _LoyaltyStoregroupsList = require('../model/LoyaltyStoregroupsList');

var _LoyaltyStoregroupsList2 = _interopRequireDefault(_LoyaltyStoregroupsList);

var _LoyaltyStoregroupsProductModel = require('../model/LoyaltyStoregroupsProductModel');

var _LoyaltyStoregroupsProductModel2 = _interopRequireDefault(_LoyaltyStoregroupsProductModel);

var _ProductExceptionPayload = require('../model/ProductExceptionPayload');

var _ProductExceptionPayload2 = _interopRequireDefault(_ProductExceptionPayload);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* LoyaltyStoregroups service.
* @module api/LoyaltyStoregroupsApi
*/
LoyaltyStoregroupsApi = function () {

  /**
  * Constructs a new LoyaltyStoregroupsApi. 
  * @alias module:api/LoyaltyStoregroupsApi
  * @class
  * @param {module:ApiClient} apiClient Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function LoyaltyStoregroupsApi(apiClient) {
    _classCallCheck(this, LoyaltyStoregroupsApi);

    this.apiClient = apiClient || _ApiClient2.default.instance;
  }

  /**
   * POST Loyalty/Storegroups
   * Add new loyalty store group
   * @param {module:model/LoyaltyStoregroupsDTO} body Loyalty store group properties
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LoyaltyStoregroupsProductModel} and HTTP response
   */


  _createClass(LoyaltyStoregroupsApi, [{
    key: 'addStoreGroupWithHttpInfo',
    value: function addStoreGroupWithHttpInfo(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addStoreGroup");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _LoyaltyStoregroupsProductModel2.default;

      return this.apiClient.callApi('/Loyalty/Storegroups', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Loyalty/Storegroups
     * Add new loyalty store group
     * @param {module:model/LoyaltyStoregroupsDTO} body Loyalty store group properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LoyaltyStoregroupsProductModel}
     */

  }, {
    key: 'addStoreGroup',
    value: function addStoreGroup(body) {
      return this.addStoreGroupWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * GET Loyalty/StoreGroups
     * Get a list of loyalty store groups
     * @param {Object} opts Optional parameters
     * @param {Number} opts.count The number of items to return.
     * @param {Number} opts.offset The position within the whole result set to start returning items (First element is at 0).
     * @param {String} opts.fields List of fields to include in the result. Nested properties can be accessed with this notation: prop1.prop2  Example: prop3,prop1.prop2
     * @param {String} opts.q A query string to restrict the returned items to given conditions. The query string must consist of any combination of single expressions in the form property:condition.  *                  A condition may contain:  *                      - wildcard \&quot;*\&quot; for any number of characters  *                      - wildcard \&quot;?\&quot; for one character  *                      - ranges in the form [value TO value]  *  *                  Single expressions may combined by &#39;AND&#39;, &#39;OR&#39;, &#39;NOT&#39; operators and parenthesis &#39;(&#39;, &#39;)&#39; for grouping.  *                  Property names can be nested like \&quot;prop1.prop2\&quot;.  *                  Example: (NOT customer.name:meier*) AND (customer.age:[30 TO 40] OR customer.age:[50 TO 60])  *                  
     * @param {String} opts.sort String with comma separated pairs of field:order (e.g. contact.surname:asc,contact.comapnyname:desc). Result set will be sorted by included fields, in ascending &#39;asc&#39;, or descending &#39;dsc&#39; order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LoyaltyStoregroupsList} and HTTP response
     */

  }, {
    key: 'getAllWithHttpInfo',
    value: function getAllWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {};
      var queryParams = {
        'count': opts['count'],
        'offset': opts['offset'],
        'fields': opts['fields'],
        'q': opts['q'],
        'sort': opts['sort']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _LoyaltyStoregroupsList2.default;

      return this.apiClient.callApi('/Loyalty/StoreGroups', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * GET Loyalty/StoreGroups
     * Get a list of loyalty store groups
     * @param {Object} opts Optional parameters
     * @param {Number} opts.count The number of items to return.
     * @param {Number} opts.offset The position within the whole result set to start returning items (First element is at 0).
     * @param {String} opts.fields List of fields to include in the result. Nested properties can be accessed with this notation: prop1.prop2  Example: prop3,prop1.prop2
     * @param {String} opts.q A query string to restrict the returned items to given conditions. The query string must consist of any combination of single expressions in the form property:condition.  *                  A condition may contain:  *                      - wildcard \&quot;*\&quot; for any number of characters  *                      - wildcard \&quot;?\&quot; for one character  *                      - ranges in the form [value TO value]  *  *                  Single expressions may combined by &#39;AND&#39;, &#39;OR&#39;, &#39;NOT&#39; operators and parenthesis &#39;(&#39;, &#39;)&#39; for grouping.  *                  Property names can be nested like \&quot;prop1.prop2\&quot;.  *                  Example: (NOT customer.name:meier*) AND (customer.age:[30 TO 40] OR customer.age:[50 TO 60])  *                  
     * @param {String} opts.sort String with comma separated pairs of field:order (e.g. contact.surname:asc,contact.comapnyname:desc). Result set will be sorted by included fields, in ascending &#39;asc&#39;, or descending &#39;dsc&#39; order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LoyaltyStoregroupsList}
     */

  }, {
    key: 'getAll',
    value: function getAll(opts) {
      return this.getAllWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * GET Loyalty/StoreGroups/{loyaltyStoreGroupId}
     * Get loyalty store group for a specific id
     * @param {String} loyaltyStoreGroupId loyalty store group id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LoyaltyStoregroupsProductModel} and HTTP response
     */

  }, {
    key: 'getOneWithHttpInfo',
    value: function getOneWithHttpInfo(loyaltyStoreGroupId) {
      var postBody = null;

      // verify the required parameter 'loyaltyStoreGroupId' is set
      if (loyaltyStoreGroupId === undefined || loyaltyStoreGroupId === null) {
        throw new Error("Missing the required parameter 'loyaltyStoreGroupId' when calling getOne");
      }

      var pathParams = {
        'loyaltyStoreGroupId': loyaltyStoreGroupId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _LoyaltyStoregroupsProductModel2.default;

      return this.apiClient.callApi('/Loyalty/StoreGroups/{loyaltyStoreGroupId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * GET Loyalty/StoreGroups/{loyaltyStoreGroupId}
     * Get loyalty store group for a specific id
     * @param {String} loyaltyStoreGroupId loyalty store group id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LoyaltyStoregroupsProductModel}
     */

  }, {
    key: 'getOne',
    value: function getOne(loyaltyStoreGroupId) {
      return this.getOneWithHttpInfo(loyaltyStoreGroupId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * DELETE Loyalty/StoreGroups/{loyaltyStoreGroupId}
     * Remove loyalty store group
     * @param {String} loyaltyStoreGroupId Loyalty store group id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/LoyaltyStoregroupsProductModel>} and HTTP response
     */

  }, {
    key: 'removeStoreGroupWithHttpInfo',
    value: function removeStoreGroupWithHttpInfo(loyaltyStoreGroupId) {
      var postBody = null;

      // verify the required parameter 'loyaltyStoreGroupId' is set
      if (loyaltyStoreGroupId === undefined || loyaltyStoreGroupId === null) {
        throw new Error("Missing the required parameter 'loyaltyStoreGroupId' when calling removeStoreGroup");
      }

      var pathParams = {
        'loyaltyStoreGroupId': loyaltyStoreGroupId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = [_LoyaltyStoregroupsProductModel2.default];

      return this.apiClient.callApi('/Loyalty/StoreGroups/{loyaltyStoreGroupId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * DELETE Loyalty/StoreGroups/{loyaltyStoreGroupId}
     * Remove loyalty store group
     * @param {String} loyaltyStoreGroupId Loyalty store group id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/LoyaltyStoregroupsProductModel>}
     */

  }, {
    key: 'removeStoreGroup',
    value: function removeStoreGroup(loyaltyStoreGroupId) {
      return this.removeStoreGroupWithHttpInfo(loyaltyStoreGroupId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * PUT Loyalty/StoreGroups/{loyaltyStoreGroupId}
     * Update loyalty store group
     * @param {String} loyaltyStoreGroupId Loyalty store group id
     * @param {module:model/LoyaltyStoregroupsDTO} body Loyalty store group properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LoyaltyStoregroupsProductModel} and HTTP response
     */

  }, {
    key: 'updateStoreGroupWithHttpInfo',
    value: function updateStoreGroupWithHttpInfo(loyaltyStoreGroupId, body) {
      var postBody = body;

      // verify the required parameter 'loyaltyStoreGroupId' is set
      if (loyaltyStoreGroupId === undefined || loyaltyStoreGroupId === null) {
        throw new Error("Missing the required parameter 'loyaltyStoreGroupId' when calling updateStoreGroup");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateStoreGroup");
      }

      var pathParams = {
        'loyaltyStoreGroupId': loyaltyStoreGroupId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _LoyaltyStoregroupsProductModel2.default;

      return this.apiClient.callApi('/Loyalty/StoreGroups/{loyaltyStoreGroupId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * PUT Loyalty/StoreGroups/{loyaltyStoreGroupId}
     * Update loyalty store group
     * @param {String} loyaltyStoreGroupId Loyalty store group id
     * @param {module:model/LoyaltyStoregroupsDTO} body Loyalty store group properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LoyaltyStoregroupsProductModel}
     */

  }, {
    key: 'updateStoreGroup',
    value: function updateStoreGroup(loyaltyStoreGroupId, body) {
      return this.updateStoreGroupWithHttpInfo(loyaltyStoreGroupId, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return LoyaltyStoregroupsApi;
}();

exports.default = LoyaltyStoregroupsApi;
},{"../ApiClient":21,"../model/LoyaltyStoregroupsDTO":108,"../model/LoyaltyStoregroupsList":110,"../model/LoyaltyStoregroupsProductModel":111,"../model/ProductExceptionPayload":143}],31:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _PaymentContainersDTO = require('../model/PaymentContainersDTO');

var _PaymentContainersDTO2 = _interopRequireDefault(_PaymentContainersDTO);

var _PaymentContainersList = require('../model/PaymentContainersList');

var _PaymentContainersList2 = _interopRequireDefault(_PaymentContainersList);

var _PaymentContainersProductModel = require('../model/PaymentContainersProductModel');

var _PaymentContainersProductModel2 = _interopRequireDefault(_PaymentContainersProductModel);

var _ProductExceptionPayload = require('../model/ProductExceptionPayload');

var _ProductExceptionPayload2 = _interopRequireDefault(_ProductExceptionPayload);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* PaymentContainers service.
* @module api/PaymentContainersApi
*/
PaymentContainersApi = function () {

  /**
  * Constructs a new PaymentContainersApi. 
  * @alias module:api/PaymentContainersApi
  * @class
  * @param {module:ApiClient} apiClient Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function PaymentContainersApi(apiClient) {
    _classCallCheck(this, PaymentContainersApi);

    this.apiClient = apiClient || _ApiClient2.default.instance;
  }

  /**
   * GET Payment/Containers
   * Get a list of payment containers
   * @param {Object} opts Optional parameters
   * @param {Number} opts.count The number of items to return.
   * @param {Number} opts.offset The position within the whole result set to start returning items (First element is at 0).
   * @param {String} opts.fields List of fields to include in the result. Nested properties can be accessed with this notation: prop1.prop2  Example: prop3,prop1.prop2
   * @param {String} opts.q A query string to restrict the returned items to given conditions. The query string must consist of any combination of single expressions in the form property:condition.  *                  A condition may contain:  *                      - wildcard \&quot;*\&quot; for any number of characters  *                      - wildcard \&quot;?\&quot; for one character  *                      - ranges in the form [value TO value]  *  *                  Single expressions may combined by &#39;AND&#39;, &#39;OR&#39;, &#39;NOT&#39; operators and parenthesis &#39;(&#39;, &#39;)&#39; for grouping.  *                  Property names can be nested like \&quot;prop1.prop2\&quot;.  *                  Example: (NOT customer.name:meier*) AND (customer.age:[30 TO 40] OR customer.age:[50 TO 60])  *                  
   * @param {String} opts.sort String with comma separated pairs of field:order (e.g. contact.surname:asc,contact.comapnyname:desc). Result set will be sorted by included fields, in ascending &#39;asc&#39;, or descending &#39;dsc&#39; order.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaymentContainersList} and HTTP response
   */


  _createClass(PaymentContainersApi, [{
    key: 'paymentContainersGetWithHttpInfo',
    value: function paymentContainersGetWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {};
      var queryParams = {
        'count': opts['count'],
        'offset': opts['offset'],
        'fields': opts['fields'],
        'q': opts['q'],
        'sort': opts['sort']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _PaymentContainersList2.default;

      return this.apiClient.callApi('/Payment/Containers', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * GET Payment/Containers
     * Get a list of payment containers
     * @param {Object} opts Optional parameters
     * @param {Number} opts.count The number of items to return.
     * @param {Number} opts.offset The position within the whole result set to start returning items (First element is at 0).
     * @param {String} opts.fields List of fields to include in the result. Nested properties can be accessed with this notation: prop1.prop2  Example: prop3,prop1.prop2
     * @param {String} opts.q A query string to restrict the returned items to given conditions. The query string must consist of any combination of single expressions in the form property:condition.  *                  A condition may contain:  *                      - wildcard \&quot;*\&quot; for any number of characters  *                      - wildcard \&quot;?\&quot; for one character  *                      - ranges in the form [value TO value]  *  *                  Single expressions may combined by &#39;AND&#39;, &#39;OR&#39;, &#39;NOT&#39; operators and parenthesis &#39;(&#39;, &#39;)&#39; for grouping.  *                  Property names can be nested like \&quot;prop1.prop2\&quot;.  *                  Example: (NOT customer.name:meier*) AND (customer.age:[30 TO 40] OR customer.age:[50 TO 60])  *                  
     * @param {String} opts.sort String with comma separated pairs of field:order (e.g. contact.surname:asc,contact.comapnyname:desc). Result set will be sorted by included fields, in ascending &#39;asc&#39;, or descending &#39;dsc&#39; order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaymentContainersList}
     */

  }, {
    key: 'paymentContainersGet',
    value: function paymentContainersGet(opts) {
      return this.paymentContainersGetWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * GET Payment/Containers/{paymentContainerId}
     * Get all payment containers
     * @param {String} paymentContainerId Search one by provided id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaymentContainersProductModel} and HTTP response
     */

  }, {
    key: 'paymentContainersGetByIdWithHttpInfo',
    value: function paymentContainersGetByIdWithHttpInfo(paymentContainerId) {
      var postBody = null;

      // verify the required parameter 'paymentContainerId' is set
      if (paymentContainerId === undefined || paymentContainerId === null) {
        throw new Error("Missing the required parameter 'paymentContainerId' when calling paymentContainersGetById");
      }

      var pathParams = {
        'paymentContainerId': paymentContainerId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _PaymentContainersProductModel2.default;

      return this.apiClient.callApi('/Payment/Containers/{paymentContainerId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * GET Payment/Containers/{paymentContainerId}
     * Get all payment containers
     * @param {String} paymentContainerId Search one by provided id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaymentContainersProductModel}
     */

  }, {
    key: 'paymentContainersGetById',
    value: function paymentContainersGetById(paymentContainerId) {
      return this.paymentContainersGetByIdWithHttpInfo(paymentContainerId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * DELETE Payment/Containers/{paymentContainerId}/assign/{secondaryPaymentContainerId}
     * Removes an existing payment container assignment
     * @param {String} paymentContainerId Payment container id
     * @param {String} secondaryPaymentContainerId Id for which container is currently assigned to
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PaymentContainersProductModel>} and HTTP response
     */

  }, {
    key: 'paymentContainersIdAssignSecondaryIdDeleteWithHttpInfo',
    value: function paymentContainersIdAssignSecondaryIdDeleteWithHttpInfo(paymentContainerId, secondaryPaymentContainerId) {
      var postBody = null;

      // verify the required parameter 'paymentContainerId' is set
      if (paymentContainerId === undefined || paymentContainerId === null) {
        throw new Error("Missing the required parameter 'paymentContainerId' when calling paymentContainersIdAssignSecondaryIdDelete");
      }

      // verify the required parameter 'secondaryPaymentContainerId' is set
      if (secondaryPaymentContainerId === undefined || secondaryPaymentContainerId === null) {
        throw new Error("Missing the required parameter 'secondaryPaymentContainerId' when calling paymentContainersIdAssignSecondaryIdDelete");
      }

      var pathParams = {
        'paymentContainerId': paymentContainerId,
        'secondaryPaymentContainerId': secondaryPaymentContainerId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = [_PaymentContainersProductModel2.default];

      return this.apiClient.callApi('/Payment/Containers/{paymentContainerId}/assign/{secondaryPaymentContainerId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * DELETE Payment/Containers/{paymentContainerId}/assign/{secondaryPaymentContainerId}
     * Removes an existing payment container assignment
     * @param {String} paymentContainerId Payment container id
     * @param {String} secondaryPaymentContainerId Id for which container is currently assigned to
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PaymentContainersProductModel>}
     */

  }, {
    key: 'paymentContainersIdAssignSecondaryIdDelete',
    value: function paymentContainersIdAssignSecondaryIdDelete(paymentContainerId, secondaryPaymentContainerId) {
      return this.paymentContainersIdAssignSecondaryIdDeleteWithHttpInfo(paymentContainerId, secondaryPaymentContainerId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST Payment/Containers/{paymentContainerId}/assign/{secondaryPaymentContainerId}
     * Assign an existing payment container to ...
     * @param {String} paymentContainerId Payment container id
     * @param {String} secondaryPaymentContainerId Id to which container will be assigned
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaymentContainersProductModel} and HTTP response
     */

  }, {
    key: 'paymentContainersIdAssignSecondaryIdPostWithHttpInfo',
    value: function paymentContainersIdAssignSecondaryIdPostWithHttpInfo(paymentContainerId, secondaryPaymentContainerId) {
      var postBody = null;

      // verify the required parameter 'paymentContainerId' is set
      if (paymentContainerId === undefined || paymentContainerId === null) {
        throw new Error("Missing the required parameter 'paymentContainerId' when calling paymentContainersIdAssignSecondaryIdPost");
      }

      // verify the required parameter 'secondaryPaymentContainerId' is set
      if (secondaryPaymentContainerId === undefined || secondaryPaymentContainerId === null) {
        throw new Error("Missing the required parameter 'secondaryPaymentContainerId' when calling paymentContainersIdAssignSecondaryIdPost");
      }

      var pathParams = {
        'paymentContainerId': paymentContainerId,
        'secondaryPaymentContainerId': secondaryPaymentContainerId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _PaymentContainersProductModel2.default;

      return this.apiClient.callApi('/Payment/Containers/{paymentContainerId}/assign/{secondaryPaymentContainerId}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Payment/Containers/{paymentContainerId}/assign/{secondaryPaymentContainerId}
     * Assign an existing payment container to ...
     * @param {String} paymentContainerId Payment container id
     * @param {String} secondaryPaymentContainerId Id to which container will be assigned
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaymentContainersProductModel}
     */

  }, {
    key: 'paymentContainersIdAssignSecondaryIdPost',
    value: function paymentContainersIdAssignSecondaryIdPost(paymentContainerId, secondaryPaymentContainerId) {
      return this.paymentContainersIdAssignSecondaryIdPostWithHttpInfo(paymentContainerId, secondaryPaymentContainerId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * DELETE Payment/Containers/{paymentContainerId}
     * Delete payment container
     * @param {String} paymentContainerId Payment container id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PaymentContainersProductModel>} and HTTP response
     */

  }, {
    key: 'paymentContainersIdDeleteWithHttpInfo',
    value: function paymentContainersIdDeleteWithHttpInfo(paymentContainerId) {
      var postBody = null;

      // verify the required parameter 'paymentContainerId' is set
      if (paymentContainerId === undefined || paymentContainerId === null) {
        throw new Error("Missing the required parameter 'paymentContainerId' when calling paymentContainersIdDelete");
      }

      var pathParams = {
        'paymentContainerId': paymentContainerId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = [_PaymentContainersProductModel2.default];

      return this.apiClient.callApi('/Payment/Containers/{paymentContainerId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * DELETE Payment/Containers/{paymentContainerId}
     * Delete payment container
     * @param {String} paymentContainerId Payment container id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PaymentContainersProductModel>}
     */

  }, {
    key: 'paymentContainersIdDelete',
    value: function paymentContainersIdDelete(paymentContainerId) {
      return this.paymentContainersIdDeleteWithHttpInfo(paymentContainerId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * PUT Payment/Containers/{paymentContainerId}
     * Update payment container
     * @param {String} paymentContainerId Payment container id
     * @param {module:model/PaymentContainersDTO} body Payment container properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaymentContainersProductModel} and HTTP response
     */

  }, {
    key: 'paymentContainersIdPutWithHttpInfo',
    value: function paymentContainersIdPutWithHttpInfo(paymentContainerId, body) {
      var postBody = body;

      // verify the required parameter 'paymentContainerId' is set
      if (paymentContainerId === undefined || paymentContainerId === null) {
        throw new Error("Missing the required parameter 'paymentContainerId' when calling paymentContainersIdPut");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling paymentContainersIdPut");
      }

      var pathParams = {
        'paymentContainerId': paymentContainerId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _PaymentContainersProductModel2.default;

      return this.apiClient.callApi('/Payment/Containers/{paymentContainerId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * PUT Payment/Containers/{paymentContainerId}
     * Update payment container
     * @param {String} paymentContainerId Payment container id
     * @param {module:model/PaymentContainersDTO} body Payment container properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaymentContainersProductModel}
     */

  }, {
    key: 'paymentContainersIdPut',
    value: function paymentContainersIdPut(paymentContainerId, body) {
      return this.paymentContainersIdPutWithHttpInfo(paymentContainerId, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST Payment/Containers
     * Add new containers
     * @param {module:model/PaymentContainersDTO} body Payment container properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaymentContainersProductModel} and HTTP response
     */

  }, {
    key: 'paymentContainersPostWithHttpInfo',
    value: function paymentContainersPostWithHttpInfo(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling paymentContainersPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _PaymentContainersProductModel2.default;

      return this.apiClient.callApi('/Payment/Containers', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Payment/Containers
     * Add new containers
     * @param {module:model/PaymentContainersDTO} body Payment container properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaymentContainersProductModel}
     */

  }, {
    key: 'paymentContainersPost',
    value: function paymentContainersPost(body) {
      return this.paymentContainersPostWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return PaymentContainersApi;
}();

exports.default = PaymentContainersApi;
},{"../ApiClient":21,"../model/PaymentContainersDTO":115,"../model/PaymentContainersList":118,"../model/PaymentContainersProductModel":119,"../model/ProductExceptionPayload":143}],32:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _PaymentContractsDTO = require('../model/PaymentContractsDTO');

var _PaymentContractsDTO2 = _interopRequireDefault(_PaymentContractsDTO);

var _PaymentContractsDTOClone = require('../model/PaymentContractsDTOClone');

var _PaymentContractsDTOClone2 = _interopRequireDefault(_PaymentContractsDTOClone);

var _PaymentContractsDTORequestId = require('../model/PaymentContractsDTORequestId');

var _PaymentContractsDTORequestId2 = _interopRequireDefault(_PaymentContractsDTORequestId);

var _PaymentContractsList = require('../model/PaymentContractsList');

var _PaymentContractsList2 = _interopRequireDefault(_PaymentContractsList);

var _PaymentContractsProductModel = require('../model/PaymentContractsProductModel');

var _PaymentContractsProductModel2 = _interopRequireDefault(_PaymentContractsProductModel);

var _PaymentContractsRequestIdResult = require('../model/PaymentContractsRequestIdResult');

var _PaymentContractsRequestIdResult2 = _interopRequireDefault(_PaymentContractsRequestIdResult);

var _ProductExceptionPayload = require('../model/ProductExceptionPayload');

var _ProductExceptionPayload2 = _interopRequireDefault(_ProductExceptionPayload);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* PaymentContracts service.
* @module api/PaymentContractsApi
*/
PaymentContractsApi = function () {

  /**
  * Constructs a new PaymentContractsApi. 
  * @alias module:api/PaymentContractsApi
  * @class
  * @param {module:ApiClient} apiClient Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function PaymentContractsApi(apiClient) {
    _classCallCheck(this, PaymentContractsApi);

    this.apiClient = apiClient || _ApiClient2.default.instance;
  }

  /**
   * POST Payment/Contracts/{paymentContractId}/clone
   * Clone an existing payment contract
   * @param {String} paymentContractId Contract identifier
   * @param {module:model/PaymentContractsDTOClone} body Payment contract clone properties
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaymentContractsProductModel} and HTTP response
   */


  _createClass(PaymentContractsApi, [{
    key: 'cloneWithHttpInfo',
    value: function cloneWithHttpInfo(paymentContractId, body) {
      var postBody = body;

      // verify the required parameter 'paymentContractId' is set
      if (paymentContractId === undefined || paymentContractId === null) {
        throw new Error("Missing the required parameter 'paymentContractId' when calling clone");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling clone");
      }

      var pathParams = {
        'paymentContractId': paymentContractId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _PaymentContractsProductModel2.default;

      return this.apiClient.callApi('/Payment/Contracts/{paymentContractId}/clone', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Payment/Contracts/{paymentContractId}/clone
     * Clone an existing payment contract
     * @param {String} paymentContractId Contract identifier
     * @param {module:model/PaymentContractsDTOClone} body Payment contract clone properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaymentContractsProductModel}
     */

  }, {
    key: 'clone',
    value: function clone(paymentContractId, body) {
      return this.cloneWithHttpInfo(paymentContractId, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * GET Payment/Contracts
     * Get a list of payment contracts
     * @param {Object} opts Optional parameters
     * @param {Number} opts.count The number of items to return.
     * @param {Number} opts.offset The position within the whole result set to start returning items (First element is at 0).
     * @param {String} opts.fields List of fields to include in the result. Nested properties can be accessed with this notation: prop1.prop2  Example: prop3,prop1.prop2
     * @param {String} opts.q A query string to restrict the returned items to given conditions. The query string must consist of any combination of single expressions in the form property:condition.  *                  A condition may contain:  *                      - wildcard \&quot;*\&quot; for any number of characters  *                      - wildcard \&quot;?\&quot; for one character  *                      - ranges in the form [value TO value]  *  *                  Single expressions may combined by &#39;AND&#39;, &#39;OR&#39;, &#39;NOT&#39; operators and parenthesis &#39;(&#39;, &#39;)&#39; for grouping.  *                  Property names can be nested like \&quot;prop1.prop2\&quot;.  *                  Example: (NOT customer.name:meier*) AND (customer.age:[30 TO 40] OR customer.age:[50 TO 60])  *                  
     * @param {String} opts.sort String with comma separated pairs of field:order (e.g. contact.surname:asc,contact.comapnyname:desc). Result set will be sorted by included fields, in ascending &#39;asc&#39;, or descending &#39;dsc&#39; order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaymentContractsList} and HTTP response
     */

  }, {
    key: 'paymentContractsGetWithHttpInfo',
    value: function paymentContractsGetWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {};
      var queryParams = {
        'count': opts['count'],
        'offset': opts['offset'],
        'fields': opts['fields'],
        'q': opts['q'],
        'sort': opts['sort']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _PaymentContractsList2.default;

      return this.apiClient.callApi('/Payment/Contracts', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * GET Payment/Contracts
     * Get a list of payment contracts
     * @param {Object} opts Optional parameters
     * @param {Number} opts.count The number of items to return.
     * @param {Number} opts.offset The position within the whole result set to start returning items (First element is at 0).
     * @param {String} opts.fields List of fields to include in the result. Nested properties can be accessed with this notation: prop1.prop2  Example: prop3,prop1.prop2
     * @param {String} opts.q A query string to restrict the returned items to given conditions. The query string must consist of any combination of single expressions in the form property:condition.  *                  A condition may contain:  *                      - wildcard \&quot;*\&quot; for any number of characters  *                      - wildcard \&quot;?\&quot; for one character  *                      - ranges in the form [value TO value]  *  *                  Single expressions may combined by &#39;AND&#39;, &#39;OR&#39;, &#39;NOT&#39; operators and parenthesis &#39;(&#39;, &#39;)&#39; for grouping.  *                  Property names can be nested like \&quot;prop1.prop2\&quot;.  *                  Example: (NOT customer.name:meier*) AND (customer.age:[30 TO 40] OR customer.age:[50 TO 60])  *                  
     * @param {String} opts.sort String with comma separated pairs of field:order (e.g. contact.surname:asc,contact.comapnyname:desc). Result set will be sorted by included fields, in ascending &#39;asc&#39;, or descending &#39;dsc&#39; order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaymentContractsList}
     */

  }, {
    key: 'paymentContractsGet',
    value: function paymentContractsGet(opts) {
      return this.paymentContractsGetWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * GET Payment/Contracts/{paymentContractId}
     * Get all payment contracts
     * @param {String} paymentContractId Search one by provided id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaymentContractsProductModel} and HTTP response
     */

  }, {
    key: 'paymentContractsGetByIdWithHttpInfo',
    value: function paymentContractsGetByIdWithHttpInfo(paymentContractId) {
      var postBody = null;

      // verify the required parameter 'paymentContractId' is set
      if (paymentContractId === undefined || paymentContractId === null) {
        throw new Error("Missing the required parameter 'paymentContractId' when calling paymentContractsGetById");
      }

      var pathParams = {
        'paymentContractId': paymentContractId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _PaymentContractsProductModel2.default;

      return this.apiClient.callApi('/Payment/Contracts/{paymentContractId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * GET Payment/Contracts/{paymentContractId}
     * Get all payment contracts
     * @param {String} paymentContractId Search one by provided id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaymentContractsProductModel}
     */

  }, {
    key: 'paymentContractsGetById',
    value: function paymentContractsGetById(paymentContractId) {
      return this.paymentContractsGetByIdWithHttpInfo(paymentContractId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * DELETE Payment/Contracts/{paymentContractId}
     * Delete payment contract
     * @param {String} paymentContractId Payment contract id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PaymentContractsProductModel>} and HTTP response
     */

  }, {
    key: 'paymentContractsIdDeleteWithHttpInfo',
    value: function paymentContractsIdDeleteWithHttpInfo(paymentContractId) {
      var postBody = null;

      // verify the required parameter 'paymentContractId' is set
      if (paymentContractId === undefined || paymentContractId === null) {
        throw new Error("Missing the required parameter 'paymentContractId' when calling paymentContractsIdDelete");
      }

      var pathParams = {
        'paymentContractId': paymentContractId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = [_PaymentContractsProductModel2.default];

      return this.apiClient.callApi('/Payment/Contracts/{paymentContractId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * DELETE Payment/Contracts/{paymentContractId}
     * Delete payment contract
     * @param {String} paymentContractId Payment contract id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PaymentContractsProductModel>}
     */

  }, {
    key: 'paymentContractsIdDelete',
    value: function paymentContractsIdDelete(paymentContractId) {
      return this.paymentContractsIdDeleteWithHttpInfo(paymentContractId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * GET Payment/Contracts/{paymentContractId}/PaymentMethods
     * Get available payment methods for given contract
     * @param {String} paymentContractId Contract identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<'String'>} and HTTP response
     */

  }, {
    key: 'paymentContractsIdPaymentMethodsGetWithHttpInfo',
    value: function paymentContractsIdPaymentMethodsGetWithHttpInfo(paymentContractId) {
      var postBody = null;

      // verify the required parameter 'paymentContractId' is set
      if (paymentContractId === undefined || paymentContractId === null) {
        throw new Error("Missing the required parameter 'paymentContractId' when calling paymentContractsIdPaymentMethodsGet");
      }

      var pathParams = {
        'paymentContractId': paymentContractId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = ['String'];

      return this.apiClient.callApi('/Payment/Contracts/{paymentContractId}/PaymentMethods', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * GET Payment/Contracts/{paymentContractId}/PaymentMethods
     * Get available payment methods for given contract
     * @param {String} paymentContractId Contract identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<'String'>}
     */

  }, {
    key: 'paymentContractsIdPaymentMethodsGet',
    value: function paymentContractsIdPaymentMethodsGet(paymentContractId) {
      return this.paymentContractsIdPaymentMethodsGetWithHttpInfo(paymentContractId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * PUT Payment/Contracts/{paymentContractId}
     * Update payment contract
     * @param {String} paymentContractId Payment contract id
     * @param {module:model/PaymentContractsDTO} body Payment contract properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaymentContractsProductModel} and HTTP response
     */

  }, {
    key: 'paymentContractsIdPutWithHttpInfo',
    value: function paymentContractsIdPutWithHttpInfo(paymentContractId, body) {
      var postBody = body;

      // verify the required parameter 'paymentContractId' is set
      if (paymentContractId === undefined || paymentContractId === null) {
        throw new Error("Missing the required parameter 'paymentContractId' when calling paymentContractsIdPut");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling paymentContractsIdPut");
      }

      var pathParams = {
        'paymentContractId': paymentContractId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _PaymentContractsProductModel2.default;

      return this.apiClient.callApi('/Payment/Contracts/{paymentContractId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * PUT Payment/Contracts/{paymentContractId}
     * Update payment contract
     * @param {String} paymentContractId Payment contract id
     * @param {module:model/PaymentContractsDTO} body Payment contract properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaymentContractsProductModel}
     */

  }, {
    key: 'paymentContractsIdPut',
    value: function paymentContractsIdPut(paymentContractId, body) {
      return this.paymentContractsIdPutWithHttpInfo(paymentContractId, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST Payment/Contracts
     * Add new contract
     * @param {module:model/PaymentContractsDTO} body Payment contracts properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaymentContractsProductModel} and HTTP response
     */

  }, {
    key: 'paymentContractsPostWithHttpInfo',
    value: function paymentContractsPostWithHttpInfo(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling paymentContractsPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _PaymentContractsProductModel2.default;

      return this.apiClient.callApi('/Payment/Contracts', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Payment/Contracts
     * Add new contract
     * @param {module:model/PaymentContractsDTO} body Payment contracts properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaymentContractsProductModel}
     */

  }, {
    key: 'paymentContractsPost',
    value: function paymentContractsPost(body) {
      return this.paymentContractsPostWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST Payment/Contracts/{paymentContractId}/requestId
     * This method clones your payment contract, so that you can use this to separate the merchants of your marketplace. (Needs to be activated))
     * @param {String} paymentContractId Contract identifier of the parent
     * @param {module:model/PaymentContractsDTORequestId} body Payment contract request id properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaymentContractsRequestIdResult} and HTTP response
     */

  }, {
    key: 'requestIdWithHttpInfo',
    value: function requestIdWithHttpInfo(paymentContractId, body) {
      var postBody = body;

      // verify the required parameter 'paymentContractId' is set
      if (paymentContractId === undefined || paymentContractId === null) {
        throw new Error("Missing the required parameter 'paymentContractId' when calling requestId");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling requestId");
      }

      var pathParams = {
        'paymentContractId': paymentContractId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _PaymentContractsRequestIdResult2.default;

      return this.apiClient.callApi('/Payment/Contracts/{paymentContractId}/requestId', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Payment/Contracts/{paymentContractId}/requestId
     * This method clones your payment contract, so that you can use this to separate the merchants of your marketplace. (Needs to be activated))
     * @param {String} paymentContractId Contract identifier of the parent
     * @param {module:model/PaymentContractsDTORequestId} body Payment contract request id properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaymentContractsRequestIdResult}
     */

  }, {
    key: 'requestId',
    value: function requestId(paymentContractId, body) {
      return this.requestIdWithHttpInfo(paymentContractId, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return PaymentContractsApi;
}();

exports.default = PaymentContractsApi;
},{"../ApiClient":21,"../model/PaymentContractsDTO":120,"../model/PaymentContractsDTOClone":121,"../model/PaymentContractsDTORequestId":123,"../model/PaymentContractsList":124,"../model/PaymentContractsProductModel":125,"../model/PaymentContractsRequestIdResult":126,"../model/ProductExceptionPayload":143}],33:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _PaymentCustomersDTO = require('../model/PaymentCustomersDTO');

var _PaymentCustomersDTO2 = _interopRequireDefault(_PaymentCustomersDTO);

var _PaymentCustomersList = require('../model/PaymentCustomersList');

var _PaymentCustomersList2 = _interopRequireDefault(_PaymentCustomersList);

var _PaymentCustomersProductModel = require('../model/PaymentCustomersProductModel');

var _PaymentCustomersProductModel2 = _interopRequireDefault(_PaymentCustomersProductModel);

var _ProductExceptionPayload = require('../model/ProductExceptionPayload');

var _ProductExceptionPayload2 = _interopRequireDefault(_ProductExceptionPayload);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* PaymentCustomers service.
* @module api/PaymentCustomersApi
*/
PaymentCustomersApi = function () {

  /**
  * Constructs a new PaymentCustomersApi. 
  * @alias module:api/PaymentCustomersApi
  * @class
  * @param {module:ApiClient} apiClient Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function PaymentCustomersApi(apiClient) {
    _classCallCheck(this, PaymentCustomersApi);

    this.apiClient = apiClient || _ApiClient2.default.instance;
  }

  /**
   * GET Payment/Customers
   * Get a list of payment customers
   * @param {Object} opts Optional parameters
   * @param {Number} opts.count The number of items to return.
   * @param {Number} opts.offset The position within the whole result set to start returning items (First element is at 0).
   * @param {String} opts.fields List of fields to include in the result. Nested properties can be accessed with this notation: prop1.prop2  Example: prop3,prop1.prop2
   * @param {String} opts.q A query string to restrict the returned items to given conditions. The query string must consist of any combination of single expressions in the form property:condition.  *                  A condition may contain:  *                      - wildcard \&quot;*\&quot; for any number of characters  *                      - wildcard \&quot;?\&quot; for one character  *                      - ranges in the form [value TO value]  *  *                  Single expressions may combined by &#39;AND&#39;, &#39;OR&#39;, &#39;NOT&#39; operators and parenthesis &#39;(&#39;, &#39;)&#39; for grouping.  *                  Property names can be nested like \&quot;prop1.prop2\&quot;.  *                  Example: (NOT customer.name:meier*) AND (customer.age:[30 TO 40] OR customer.age:[50 TO 60])  *                  
   * @param {String} opts.sort String with comma separated pairs of field:order (e.g. contact.surname:asc,contact.comapnyname:desc). Result set will be sorted by included fields, in ascending &#39;asc&#39;, or descending &#39;dsc&#39; order.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaymentCustomersList} and HTTP response
   */


  _createClass(PaymentCustomersApi, [{
    key: 'paymentCustomersGetWithHttpInfo',
    value: function paymentCustomersGetWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {};
      var queryParams = {
        'count': opts['count'],
        'offset': opts['offset'],
        'fields': opts['fields'],
        'q': opts['q'],
        'sort': opts['sort']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _PaymentCustomersList2.default;

      return this.apiClient.callApi('/Payment/Customers', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * GET Payment/Customers
     * Get a list of payment customers
     * @param {Object} opts Optional parameters
     * @param {Number} opts.count The number of items to return.
     * @param {Number} opts.offset The position within the whole result set to start returning items (First element is at 0).
     * @param {String} opts.fields List of fields to include in the result. Nested properties can be accessed with this notation: prop1.prop2  Example: prop3,prop1.prop2
     * @param {String} opts.q A query string to restrict the returned items to given conditions. The query string must consist of any combination of single expressions in the form property:condition.  *                  A condition may contain:  *                      - wildcard \&quot;*\&quot; for any number of characters  *                      - wildcard \&quot;?\&quot; for one character  *                      - ranges in the form [value TO value]  *  *                  Single expressions may combined by &#39;AND&#39;, &#39;OR&#39;, &#39;NOT&#39; operators and parenthesis &#39;(&#39;, &#39;)&#39; for grouping.  *                  Property names can be nested like \&quot;prop1.prop2\&quot;.  *                  Example: (NOT customer.name:meier*) AND (customer.age:[30 TO 40] OR customer.age:[50 TO 60])  *                  
     * @param {String} opts.sort String with comma separated pairs of field:order (e.g. contact.surname:asc,contact.comapnyname:desc). Result set will be sorted by included fields, in ascending &#39;asc&#39;, or descending &#39;dsc&#39; order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaymentCustomersList}
     */

  }, {
    key: 'paymentCustomersGet',
    value: function paymentCustomersGet(opts) {
      return this.paymentCustomersGetWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * GET Payment/Customers/{paymentCustomerId}
     * Get all payment customers
     * @param {String} paymentCustomerId Payment customer id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaymentCustomersProductModel} and HTTP response
     */

  }, {
    key: 'paymentCustomersGetByIdWithHttpInfo',
    value: function paymentCustomersGetByIdWithHttpInfo(paymentCustomerId) {
      var postBody = null;

      // verify the required parameter 'paymentCustomerId' is set
      if (paymentCustomerId === undefined || paymentCustomerId === null) {
        throw new Error("Missing the required parameter 'paymentCustomerId' when calling paymentCustomersGetById");
      }

      var pathParams = {
        'paymentCustomerId': paymentCustomerId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _PaymentCustomersProductModel2.default;

      return this.apiClient.callApi('/Payment/Customers/{paymentCustomerId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * GET Payment/Customers/{paymentCustomerId}
     * Get all payment customers
     * @param {String} paymentCustomerId Payment customer id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaymentCustomersProductModel}
     */

  }, {
    key: 'paymentCustomersGetById',
    value: function paymentCustomersGetById(paymentCustomerId) {
      return this.paymentCustomersGetByIdWithHttpInfo(paymentCustomerId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * DELETE Payment/Customers/{paymentCustomerId}
     * Delete payment customer
     * @param {String} paymentCustomerId Payment customer id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PaymentCustomersProductModel>} and HTTP response
     */

  }, {
    key: 'paymentCustomersIdDeleteWithHttpInfo',
    value: function paymentCustomersIdDeleteWithHttpInfo(paymentCustomerId) {
      var postBody = null;

      // verify the required parameter 'paymentCustomerId' is set
      if (paymentCustomerId === undefined || paymentCustomerId === null) {
        throw new Error("Missing the required parameter 'paymentCustomerId' when calling paymentCustomersIdDelete");
      }

      var pathParams = {
        'paymentCustomerId': paymentCustomerId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = [_PaymentCustomersProductModel2.default];

      return this.apiClient.callApi('/Payment/Customers/{paymentCustomerId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * DELETE Payment/Customers/{paymentCustomerId}
     * Delete payment customer
     * @param {String} paymentCustomerId Payment customer id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PaymentCustomersProductModel>}
     */

  }, {
    key: 'paymentCustomersIdDelete',
    value: function paymentCustomersIdDelete(paymentCustomerId) {
      return this.paymentCustomersIdDeleteWithHttpInfo(paymentCustomerId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * PUT Payment/Customers/{paymentCustomerId}
     * Update payment customer
     * @param {String} paymentCustomerId Payment customer id
     * @param {module:model/PaymentCustomersDTO} body Payment customer properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaymentCustomersProductModel} and HTTP response
     */

  }, {
    key: 'paymentCustomersIdPutWithHttpInfo',
    value: function paymentCustomersIdPutWithHttpInfo(paymentCustomerId, body) {
      var postBody = body;

      // verify the required parameter 'paymentCustomerId' is set
      if (paymentCustomerId === undefined || paymentCustomerId === null) {
        throw new Error("Missing the required parameter 'paymentCustomerId' when calling paymentCustomersIdPut");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling paymentCustomersIdPut");
      }

      var pathParams = {
        'paymentCustomerId': paymentCustomerId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _PaymentCustomersProductModel2.default;

      return this.apiClient.callApi('/Payment/Customers/{paymentCustomerId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * PUT Payment/Customers/{paymentCustomerId}
     * Update payment customer
     * @param {String} paymentCustomerId Payment customer id
     * @param {module:model/PaymentCustomersDTO} body Payment customer properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaymentCustomersProductModel}
     */

  }, {
    key: 'paymentCustomersIdPut',
    value: function paymentCustomersIdPut(paymentCustomerId, body) {
      return this.paymentCustomersIdPutWithHttpInfo(paymentCustomerId, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST Payment/Customers
     * Add new customer
     * @param {module:model/PaymentCustomersDTO} body Payment customer properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaymentCustomersProductModel} and HTTP response
     */

  }, {
    key: 'paymentCustomersPostWithHttpInfo',
    value: function paymentCustomersPostWithHttpInfo(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling paymentCustomersPost");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _PaymentCustomersProductModel2.default;

      return this.apiClient.callApi('/Payment/Customers', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Payment/Customers
     * Add new customer
     * @param {module:model/PaymentCustomersDTO} body Payment customer properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaymentCustomersProductModel}
     */

  }, {
    key: 'paymentCustomersPost',
    value: function paymentCustomersPost(body) {
      return this.paymentCustomersPostWithHttpInfo(body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return PaymentCustomersApi;
}();

exports.default = PaymentCustomersApi;
},{"../ApiClient":21,"../model/PaymentCustomersDTO":127,"../model/PaymentCustomersList":128,"../model/PaymentCustomersProductModel":129,"../model/ProductExceptionPayload":143}],34:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _ProductExceptionPayload = require('../model/ProductExceptionPayload');

var _ProductExceptionPayload2 = _interopRequireDefault(_ProductExceptionPayload);

var _SecupayTransactionCancelDTO = require('../model/SecupayTransactionCancelDTO');

var _SecupayTransactionCancelDTO2 = _interopRequireDefault(_SecupayTransactionCancelDTO);

var _SecupayTransactionCaptureDTO = require('../model/SecupayTransactionCaptureDTO');

var _SecupayTransactionCaptureDTO2 = _interopRequireDefault(_SecupayTransactionCaptureDTO);

var _SecupayTransactionDTOExternalInvoicePdf = require('../model/SecupayTransactionDTOExternalInvoicePdf');

var _SecupayTransactionDTOExternalInvoicePdf2 = _interopRequireDefault(_SecupayTransactionDTOExternalInvoicePdf);

var _SecupayTransactionExternalInvoicePdf = require('../model/SecupayTransactionExternalInvoicePdf');

var _SecupayTransactionExternalInvoicePdf2 = _interopRequireDefault(_SecupayTransactionExternalInvoicePdf);

var _SecupayTransactionProductDTO = require('../model/SecupayTransactionProductDTO');

var _SecupayTransactionProductDTO2 = _interopRequireDefault(_SecupayTransactionProductDTO);

var _SecupayTransactionProductModel = require('../model/SecupayTransactionProductModel');

var _SecupayTransactionProductModel2 = _interopRequireDefault(_SecupayTransactionProductModel);

var _SecupayTransactionReverseAccrualDTO = require('../model/SecupayTransactionReverseAccrualDTO');

var _SecupayTransactionReverseAccrualDTO2 = _interopRequireDefault(_SecupayTransactionReverseAccrualDTO);

var _SecupayTransactionSetShippingInformationDTO = require('../model/SecupayTransactionSetShippingInformationDTO');

var _SecupayTransactionSetShippingInformationDTO2 = _interopRequireDefault(_SecupayTransactionSetShippingInformationDTO);

var _SecupayTransactionUpdateBasketDTO = require('../model/SecupayTransactionUpdateBasketDTO');

var _SecupayTransactionUpdateBasketDTO2 = _interopRequireDefault(_SecupayTransactionUpdateBasketDTO);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* PaymentSecupayCreditcards service.
* @module api/PaymentSecupayCreditcardsApi
*/
PaymentSecupayCreditcardsApi = function () {

  /**
  * Constructs a new PaymentSecupayCreditcardsApi. 
  * @alias module:api/PaymentSecupayCreditcardsApi
  * @class
  * @param {module:ApiClient} apiClient Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function PaymentSecupayCreditcardsApi(apiClient) {
    _classCallCheck(this, PaymentSecupayCreditcardsApi);

    this.apiClient = apiClient || _ApiClient2.default.instance;
  }

  /**
   * POST Payment/{paymentMethod}/{paymentId}/assignExternalInvoicePdf/{documentId}
   * Assign external invoice pdf
   * @param {String} paymentMethod Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)
   * @param {String} paymentId Payment id
   * @param {String} documentId Document id
   * @param {module:model/SecupayTransactionDTOExternalInvoicePdf} body Request body for assigning external invoice pdf
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SecupayTransactionExternalInvoicePdf} and HTTP response
   */


  _createClass(PaymentSecupayCreditcardsApi, [{
    key: 'assignExternalInvoicePdfWithHttpInfo',
    value: function assignExternalInvoicePdfWithHttpInfo(paymentMethod, paymentId, documentId, body) {
      var postBody = body;

      // verify the required parameter 'paymentMethod' is set
      if (paymentMethod === undefined || paymentMethod === null) {
        throw new Error("Missing the required parameter 'paymentMethod' when calling assignExternalInvoicePdf");
      }

      // verify the required parameter 'paymentId' is set
      if (paymentId === undefined || paymentId === null) {
        throw new Error("Missing the required parameter 'paymentId' when calling assignExternalInvoicePdf");
      }

      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling assignExternalInvoicePdf");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling assignExternalInvoicePdf");
      }

      var pathParams = {
        'paymentMethod': paymentMethod,
        'paymentId': paymentId,
        'documentId': documentId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _SecupayTransactionExternalInvoicePdf2.default;

      return this.apiClient.callApi('/Payment/{paymentMethod}/{paymentId}/assignExternalInvoicePdf/{documentId}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Payment/{paymentMethod}/{paymentId}/assignExternalInvoicePdf/{documentId}
     * Assign external invoice pdf
     * @param {String} paymentMethod Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)
     * @param {String} paymentId Payment id
     * @param {String} documentId Document id
     * @param {module:model/SecupayTransactionDTOExternalInvoicePdf} body Request body for assigning external invoice pdf
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SecupayTransactionExternalInvoicePdf}
     */

  }, {
    key: 'assignExternalInvoicePdf',
    value: function assignExternalInvoicePdf(paymentMethod, paymentId, documentId, body) {
      return this.assignExternalInvoicePdfWithHttpInfo(paymentMethod, paymentId, documentId, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST Payment/{paymentMethod}/{paymentId}/cancel
     * Function to cancel the payment transaction
     * @param {String} paymentMethod Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)
     * @param {String} paymentId Payment id
     * @param {Object} opts Optional parameters
     * @param {module:model/SecupayTransactionCancelDTO} opts.body Cancel payment transaction input properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: 'cancelPaymentTransactionByIdWithHttpInfo',
    value: function cancelPaymentTransactionByIdWithHttpInfo(paymentMethod, paymentId, opts) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'paymentMethod' is set
      if (paymentMethod === undefined || paymentMethod === null) {
        throw new Error("Missing the required parameter 'paymentMethod' when calling cancelPaymentTransactionById");
      }

      // verify the required parameter 'paymentId' is set
      if (paymentId === undefined || paymentId === null) {
        throw new Error("Missing the required parameter 'paymentId' when calling cancelPaymentTransactionById");
      }

      var pathParams = {
        'paymentMethod': paymentMethod,
        'paymentId': paymentId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi('/Payment/{paymentMethod}/{paymentId}/cancel', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Payment/{paymentMethod}/{paymentId}/cancel
     * Function to cancel the payment transaction
     * @param {String} paymentMethod Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)
     * @param {String} paymentId Payment id
     * @param {Object} opts Optional parameters
     * @param {module:model/SecupayTransactionCancelDTO} opts.body Cancel payment transaction input properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: 'cancelPaymentTransactionById',
    value: function cancelPaymentTransactionById(paymentMethod, paymentId, opts) {
      return this.cancelPaymentTransactionByIdWithHttpInfo(paymentMethod, paymentId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST Payment/{paymentMethod}/{paymentId}/capture
     * Function to cancel the payment transaction
     * @param {String} paymentMethod Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)
     * @param {String} paymentId Payment id
     * @param {Object} opts Optional parameters
     * @param {module:model/SecupayTransactionCaptureDTO} opts.body Capture payment transaction input properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SecupayTransactionProductModel} and HTTP response
     */

  }, {
    key: 'capturePaymentTransactionByIdWithHttpInfo',
    value: function capturePaymentTransactionByIdWithHttpInfo(paymentMethod, paymentId, opts) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'paymentMethod' is set
      if (paymentMethod === undefined || paymentMethod === null) {
        throw new Error("Missing the required parameter 'paymentMethod' when calling capturePaymentTransactionById");
      }

      // verify the required parameter 'paymentId' is set
      if (paymentId === undefined || paymentId === null) {
        throw new Error("Missing the required parameter 'paymentId' when calling capturePaymentTransactionById");
      }

      var pathParams = {
        'paymentMethod': paymentMethod,
        'paymentId': paymentId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _SecupayTransactionProductModel2.default;

      return this.apiClient.callApi('/Payment/{paymentMethod}/{paymentId}/capture', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Payment/{paymentMethod}/{paymentId}/capture
     * Function to cancel the payment transaction
     * @param {String} paymentMethod Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)
     * @param {String} paymentId Payment id
     * @param {Object} opts Optional parameters
     * @param {module:model/SecupayTransactionCaptureDTO} opts.body Capture payment transaction input properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SecupayTransactionProductModel}
     */

  }, {
    key: 'capturePaymentTransactionById',
    value: function capturePaymentTransactionById(paymentMethod, paymentId, opts) {
      return this.capturePaymentTransactionByIdWithHttpInfo(paymentMethod, paymentId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST Payment/Secupaycreditcards/{paymentCreditCardsId}/cancel
     * DEPRECATED: use cancelPaymentTransactionById
     * @param {String} paymentCreditCardsId Payment credit cards id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: 'paymentSecupayCreditcardsCancelByIdWithHttpInfo',
    value: function paymentSecupayCreditcardsCancelByIdWithHttpInfo(paymentCreditCardsId) {
      var postBody = null;

      // verify the required parameter 'paymentCreditCardsId' is set
      if (paymentCreditCardsId === undefined || paymentCreditCardsId === null) {
        throw new Error("Missing the required parameter 'paymentCreditCardsId' when calling paymentSecupayCreditcardsCancelById");
      }

      var pathParams = {
        'paymentCreditCardsId': paymentCreditCardsId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi('/Payment/Secupaycreditcards/{paymentCreditCardsId}/cancel', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Payment/Secupaycreditcards/{paymentCreditCardsId}/cancel
     * DEPRECATED: use cancelPaymentTransactionById
     * @param {String} paymentCreditCardsId Payment credit cards id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: 'paymentSecupayCreditcardsCancelById',
    value: function paymentSecupayCreditcardsCancelById(paymentCreditCardsId) {
      return this.paymentSecupayCreditcardsCancelByIdWithHttpInfo(paymentCreditCardsId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * GET Payment/Secupaycreditcards/{paymentCreditCardsId}
     * Get the details of a payment transaction
     * @param {String} paymentCreditCardsId Payment credit cards id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SecupayTransactionProductModel} and HTTP response
     */

  }, {
    key: 'paymentSecupayCreditcardsGetByIdWithHttpInfo',
    value: function paymentSecupayCreditcardsGetByIdWithHttpInfo(paymentCreditCardsId) {
      var postBody = null;

      // verify the required parameter 'paymentCreditCardsId' is set
      if (paymentCreditCardsId === undefined || paymentCreditCardsId === null) {
        throw new Error("Missing the required parameter 'paymentCreditCardsId' when calling paymentSecupayCreditcardsGetById");
      }

      var pathParams = {
        'paymentCreditCardsId': paymentCreditCardsId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _SecupayTransactionProductModel2.default;

      return this.apiClient.callApi('/Payment/Secupaycreditcards/{paymentCreditCardsId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * GET Payment/Secupaycreditcards/{paymentCreditCardsId}
     * Get the details of a payment transaction
     * @param {String} paymentCreditCardsId Payment credit cards id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SecupayTransactionProductModel}
     */

  }, {
    key: 'paymentSecupayCreditcardsGetById',
    value: function paymentSecupayCreditcardsGetById(paymentCreditCardsId) {
      return this.paymentSecupayCreditcardsGetByIdWithHttpInfo(paymentCreditCardsId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST Payment/Secupaycreditcards
     * Start a credit card payment transaction
     * @param {Object} opts Optional parameters
     * @param {module:model/SecupayTransactionProductDTO} opts.body Credit card payment transaction input properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SecupayTransactionProductModel} and HTTP response
     */

  }, {
    key: 'paymentSecupaycreditcardsPostWithHttpInfo',
    value: function paymentSecupaycreditcardsPostWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['body'];

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _SecupayTransactionProductModel2.default;

      return this.apiClient.callApi('/Payment/Secupaycreditcards', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Payment/Secupaycreditcards
     * Start a credit card payment transaction
     * @param {Object} opts Optional parameters
     * @param {module:model/SecupayTransactionProductDTO} opts.body Credit card payment transaction input properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SecupayTransactionProductModel}
     */

  }, {
    key: 'paymentSecupaycreditcardsPost',
    value: function paymentSecupaycreditcardsPost(opts) {
      return this.paymentSecupaycreditcardsPostWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * PUT Payment/{paymentMethod}/{paymentId}/accrual
     * Update the accrual flag of an existing payment transaction
     * @param {String} paymentMethod Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)
     * @param {String} paymentId Payment id
     * @param {module:model/SecupayTransactionReverseAccrualDTO} body Reverse accrual input properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SecupayTransactionProductModel} and HTTP response
     */

  }, {
    key: 'reverseAccrualByPaymentIdWithHttpInfo',
    value: function reverseAccrualByPaymentIdWithHttpInfo(paymentMethod, paymentId, body) {
      var postBody = body;

      // verify the required parameter 'paymentMethod' is set
      if (paymentMethod === undefined || paymentMethod === null) {
        throw new Error("Missing the required parameter 'paymentMethod' when calling reverseAccrualByPaymentId");
      }

      // verify the required parameter 'paymentId' is set
      if (paymentId === undefined || paymentId === null) {
        throw new Error("Missing the required parameter 'paymentId' when calling reverseAccrualByPaymentId");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling reverseAccrualByPaymentId");
      }

      var pathParams = {
        'paymentMethod': paymentMethod,
        'paymentId': paymentId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _SecupayTransactionProductModel2.default;

      return this.apiClient.callApi('/Payment/{paymentMethod}/{paymentId}/accrual', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * PUT Payment/{paymentMethod}/{paymentId}/accrual
     * Update the accrual flag of an existing payment transaction
     * @param {String} paymentMethod Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)
     * @param {String} paymentId Payment id
     * @param {module:model/SecupayTransactionReverseAccrualDTO} body Reverse accrual input properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SecupayTransactionProductModel}
     */

  }, {
    key: 'reverseAccrualByPaymentId',
    value: function reverseAccrualByPaymentId(paymentMethod, paymentId, body) {
      return this.reverseAccrualByPaymentIdWithHttpInfo(paymentMethod, paymentId, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * PUT Payment/{paymentMethod}/{paymentId}/shippingInformation
     * Update the accrual flag of an existing payment transaction
     * @param {String} paymentMethod Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)
     * @param {String} paymentId Payment id
     * @param {module:model/SecupayTransactionSetShippingInformationDTO} body Shipping information properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SecupayTransactionProductModel} and HTTP response
     */

  }, {
    key: 'setShippingInformationByPaymentIdWithHttpInfo',
    value: function setShippingInformationByPaymentIdWithHttpInfo(paymentMethod, paymentId, body) {
      var postBody = body;

      // verify the required parameter 'paymentMethod' is set
      if (paymentMethod === undefined || paymentMethod === null) {
        throw new Error("Missing the required parameter 'paymentMethod' when calling setShippingInformationByPaymentId");
      }

      // verify the required parameter 'paymentId' is set
      if (paymentId === undefined || paymentId === null) {
        throw new Error("Missing the required parameter 'paymentId' when calling setShippingInformationByPaymentId");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setShippingInformationByPaymentId");
      }

      var pathParams = {
        'paymentMethod': paymentMethod,
        'paymentId': paymentId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _SecupayTransactionProductModel2.default;

      return this.apiClient.callApi('/Payment/{paymentMethod}/{paymentId}/shippingInformation', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * PUT Payment/{paymentMethod}/{paymentId}/shippingInformation
     * Update the accrual flag of an existing payment transaction
     * @param {String} paymentMethod Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)
     * @param {String} paymentId Payment id
     * @param {module:model/SecupayTransactionSetShippingInformationDTO} body Shipping information properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SecupayTransactionProductModel}
     */

  }, {
    key: 'setShippingInformationByPaymentId',
    value: function setShippingInformationByPaymentId(paymentMethod, paymentId, body) {
      return this.setShippingInformationByPaymentIdWithHttpInfo(paymentMethod, paymentId, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * PUT Payment/{paymentMethod}/{paymentId}/basket
     * Update a basket of an existing payment transaction
     * @param {String} paymentMethod Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)
     * @param {String} paymentId Payment id
     * @param {module:model/SecupayTransactionUpdateBasketDTO} body Update basket input properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SecupayTransactionProductModel} and HTTP response
     */

  }, {
    key: 'updateBasketByPaymentIdWithHttpInfo',
    value: function updateBasketByPaymentIdWithHttpInfo(paymentMethod, paymentId, body) {
      var postBody = body;

      // verify the required parameter 'paymentMethod' is set
      if (paymentMethod === undefined || paymentMethod === null) {
        throw new Error("Missing the required parameter 'paymentMethod' when calling updateBasketByPaymentId");
      }

      // verify the required parameter 'paymentId' is set
      if (paymentId === undefined || paymentId === null) {
        throw new Error("Missing the required parameter 'paymentId' when calling updateBasketByPaymentId");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateBasketByPaymentId");
      }

      var pathParams = {
        'paymentMethod': paymentMethod,
        'paymentId': paymentId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _SecupayTransactionProductModel2.default;

      return this.apiClient.callApi('/Payment/{paymentMethod}/{paymentId}/basket', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * PUT Payment/{paymentMethod}/{paymentId}/basket
     * Update a basket of an existing payment transaction
     * @param {String} paymentMethod Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)
     * @param {String} paymentId Payment id
     * @param {module:model/SecupayTransactionUpdateBasketDTO} body Update basket input properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SecupayTransactionProductModel}
     */

  }, {
    key: 'updateBasketByPaymentId',
    value: function updateBasketByPaymentId(paymentMethod, paymentId, body) {
      return this.updateBasketByPaymentIdWithHttpInfo(paymentMethod, paymentId, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return PaymentSecupayCreditcardsApi;
}();

exports.default = PaymentSecupayCreditcardsApi;
},{"../ApiClient":21,"../model/ProductExceptionPayload":143,"../model/SecupayTransactionCancelDTO":151,"../model/SecupayTransactionCaptureDTO":152,"../model/SecupayTransactionDTOExternalInvoicePdf":153,"../model/SecupayTransactionExternalInvoicePdf":154,"../model/SecupayTransactionProductDTO":156,"../model/SecupayTransactionProductModel":161,"../model/SecupayTransactionReverseAccrualDTO":165,"../model/SecupayTransactionSetShippingInformationDTO":166,"../model/SecupayTransactionUpdateBasketDTO":167}],35:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _ProductExceptionPayload = require('../model/ProductExceptionPayload');

var _ProductExceptionPayload2 = _interopRequireDefault(_ProductExceptionPayload);

var _SecupayTransactionCancelDTO = require('../model/SecupayTransactionCancelDTO');

var _SecupayTransactionCancelDTO2 = _interopRequireDefault(_SecupayTransactionCancelDTO);

var _SecupayTransactionCaptureDTO = require('../model/SecupayTransactionCaptureDTO');

var _SecupayTransactionCaptureDTO2 = _interopRequireDefault(_SecupayTransactionCaptureDTO);

var _SecupayTransactionDTOExternalInvoicePdf = require('../model/SecupayTransactionDTOExternalInvoicePdf');

var _SecupayTransactionDTOExternalInvoicePdf2 = _interopRequireDefault(_SecupayTransactionDTOExternalInvoicePdf);

var _SecupayTransactionExternalInvoicePdf = require('../model/SecupayTransactionExternalInvoicePdf');

var _SecupayTransactionExternalInvoicePdf2 = _interopRequireDefault(_SecupayTransactionExternalInvoicePdf);

var _SecupayTransactionProductDTO = require('../model/SecupayTransactionProductDTO');

var _SecupayTransactionProductDTO2 = _interopRequireDefault(_SecupayTransactionProductDTO);

var _SecupayTransactionProductModel = require('../model/SecupayTransactionProductModel');

var _SecupayTransactionProductModel2 = _interopRequireDefault(_SecupayTransactionProductModel);

var _SecupayTransactionReverseAccrualDTO = require('../model/SecupayTransactionReverseAccrualDTO');

var _SecupayTransactionReverseAccrualDTO2 = _interopRequireDefault(_SecupayTransactionReverseAccrualDTO);

var _SecupayTransactionSetShippingInformationDTO = require('../model/SecupayTransactionSetShippingInformationDTO');

var _SecupayTransactionSetShippingInformationDTO2 = _interopRequireDefault(_SecupayTransactionSetShippingInformationDTO);

var _SecupayTransactionUpdateBasketDTO = require('../model/SecupayTransactionUpdateBasketDTO');

var _SecupayTransactionUpdateBasketDTO2 = _interopRequireDefault(_SecupayTransactionUpdateBasketDTO);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* PaymentSecupayDebits service.
* @module api/PaymentSecupayDebitsApi
*/
PaymentSecupayDebitsApi = function () {

  /**
  * Constructs a new PaymentSecupayDebitsApi. 
  * @alias module:api/PaymentSecupayDebitsApi
  * @class
  * @param {module:ApiClient} apiClient Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function PaymentSecupayDebitsApi(apiClient) {
    _classCallCheck(this, PaymentSecupayDebitsApi);

    this.apiClient = apiClient || _ApiClient2.default.instance;
  }

  /**
   * POST Payment/{paymentMethod}/{paymentId}/assignExternalInvoicePdf/{documentId}
   * Assign external invoice pdf
   * @param {String} paymentMethod Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)
   * @param {String} paymentId Payment id
   * @param {String} documentId Document id
   * @param {module:model/SecupayTransactionDTOExternalInvoicePdf} body Request body for assigning external invoice pdf
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SecupayTransactionExternalInvoicePdf} and HTTP response
   */


  _createClass(PaymentSecupayDebitsApi, [{
    key: 'assignExternalInvoicePdfWithHttpInfo',
    value: function assignExternalInvoicePdfWithHttpInfo(paymentMethod, paymentId, documentId, body) {
      var postBody = body;

      // verify the required parameter 'paymentMethod' is set
      if (paymentMethod === undefined || paymentMethod === null) {
        throw new Error("Missing the required parameter 'paymentMethod' when calling assignExternalInvoicePdf");
      }

      // verify the required parameter 'paymentId' is set
      if (paymentId === undefined || paymentId === null) {
        throw new Error("Missing the required parameter 'paymentId' when calling assignExternalInvoicePdf");
      }

      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling assignExternalInvoicePdf");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling assignExternalInvoicePdf");
      }

      var pathParams = {
        'paymentMethod': paymentMethod,
        'paymentId': paymentId,
        'documentId': documentId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _SecupayTransactionExternalInvoicePdf2.default;

      return this.apiClient.callApi('/Payment/{paymentMethod}/{paymentId}/assignExternalInvoicePdf/{documentId}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Payment/{paymentMethod}/{paymentId}/assignExternalInvoicePdf/{documentId}
     * Assign external invoice pdf
     * @param {String} paymentMethod Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)
     * @param {String} paymentId Payment id
     * @param {String} documentId Document id
     * @param {module:model/SecupayTransactionDTOExternalInvoicePdf} body Request body for assigning external invoice pdf
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SecupayTransactionExternalInvoicePdf}
     */

  }, {
    key: 'assignExternalInvoicePdf',
    value: function assignExternalInvoicePdf(paymentMethod, paymentId, documentId, body) {
      return this.assignExternalInvoicePdfWithHttpInfo(paymentMethod, paymentId, documentId, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST Payment/{paymentMethod}/{paymentId}/cancel
     * Function to cancel the payment transaction
     * @param {String} paymentMethod Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)
     * @param {String} paymentId Payment id
     * @param {Object} opts Optional parameters
     * @param {module:model/SecupayTransactionCancelDTO} opts.body Cancel payment transaction input properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: 'cancelPaymentTransactionByIdWithHttpInfo',
    value: function cancelPaymentTransactionByIdWithHttpInfo(paymentMethod, paymentId, opts) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'paymentMethod' is set
      if (paymentMethod === undefined || paymentMethod === null) {
        throw new Error("Missing the required parameter 'paymentMethod' when calling cancelPaymentTransactionById");
      }

      // verify the required parameter 'paymentId' is set
      if (paymentId === undefined || paymentId === null) {
        throw new Error("Missing the required parameter 'paymentId' when calling cancelPaymentTransactionById");
      }

      var pathParams = {
        'paymentMethod': paymentMethod,
        'paymentId': paymentId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi('/Payment/{paymentMethod}/{paymentId}/cancel', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Payment/{paymentMethod}/{paymentId}/cancel
     * Function to cancel the payment transaction
     * @param {String} paymentMethod Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)
     * @param {String} paymentId Payment id
     * @param {Object} opts Optional parameters
     * @param {module:model/SecupayTransactionCancelDTO} opts.body Cancel payment transaction input properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: 'cancelPaymentTransactionById',
    value: function cancelPaymentTransactionById(paymentMethod, paymentId, opts) {
      return this.cancelPaymentTransactionByIdWithHttpInfo(paymentMethod, paymentId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST Payment/{paymentMethod}/{paymentId}/capture
     * Function to cancel the payment transaction
     * @param {String} paymentMethod Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)
     * @param {String} paymentId Payment id
     * @param {Object} opts Optional parameters
     * @param {module:model/SecupayTransactionCaptureDTO} opts.body Capture payment transaction input properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SecupayTransactionProductModel} and HTTP response
     */

  }, {
    key: 'capturePaymentTransactionByIdWithHttpInfo',
    value: function capturePaymentTransactionByIdWithHttpInfo(paymentMethod, paymentId, opts) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'paymentMethod' is set
      if (paymentMethod === undefined || paymentMethod === null) {
        throw new Error("Missing the required parameter 'paymentMethod' when calling capturePaymentTransactionById");
      }

      // verify the required parameter 'paymentId' is set
      if (paymentId === undefined || paymentId === null) {
        throw new Error("Missing the required parameter 'paymentId' when calling capturePaymentTransactionById");
      }

      var pathParams = {
        'paymentMethod': paymentMethod,
        'paymentId': paymentId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _SecupayTransactionProductModel2.default;

      return this.apiClient.callApi('/Payment/{paymentMethod}/{paymentId}/capture', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Payment/{paymentMethod}/{paymentId}/capture
     * Function to cancel the payment transaction
     * @param {String} paymentMethod Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)
     * @param {String} paymentId Payment id
     * @param {Object} opts Optional parameters
     * @param {module:model/SecupayTransactionCaptureDTO} opts.body Capture payment transaction input properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SecupayTransactionProductModel}
     */

  }, {
    key: 'capturePaymentTransactionById',
    value: function capturePaymentTransactionById(paymentMethod, paymentId, opts) {
      return this.capturePaymentTransactionByIdWithHttpInfo(paymentMethod, paymentId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST Payment/Secupaydebits/{paymentDebitId}/cancel
     * DEPRECATED: use cancelPaymentTransactionById
     * @param {String} paymentDebitId Payment debit id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: 'paymentSecupayDebitsCancelByIdWithHttpInfo',
    value: function paymentSecupayDebitsCancelByIdWithHttpInfo(paymentDebitId) {
      var postBody = null;

      // verify the required parameter 'paymentDebitId' is set
      if (paymentDebitId === undefined || paymentDebitId === null) {
        throw new Error("Missing the required parameter 'paymentDebitId' when calling paymentSecupayDebitsCancelById");
      }

      var pathParams = {
        'paymentDebitId': paymentDebitId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi('/Payment/Secupaydebits/{paymentDebitId}/cancel', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Payment/Secupaydebits/{paymentDebitId}/cancel
     * DEPRECATED: use cancelPaymentTransactionById
     * @param {String} paymentDebitId Payment debit id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: 'paymentSecupayDebitsCancelById',
    value: function paymentSecupayDebitsCancelById(paymentDebitId) {
      return this.paymentSecupayDebitsCancelByIdWithHttpInfo(paymentDebitId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * GET Payment/Secupaydebits/{paymentDebitId}
     * Get the details of a payment transaction
     * @param {String} paymentDebitId Payment debit id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SecupayTransactionProductModel} and HTTP response
     */

  }, {
    key: 'paymentSecupayDebitsGetByIdWithHttpInfo',
    value: function paymentSecupayDebitsGetByIdWithHttpInfo(paymentDebitId) {
      var postBody = null;

      // verify the required parameter 'paymentDebitId' is set
      if (paymentDebitId === undefined || paymentDebitId === null) {
        throw new Error("Missing the required parameter 'paymentDebitId' when calling paymentSecupayDebitsGetById");
      }

      var pathParams = {
        'paymentDebitId': paymentDebitId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _SecupayTransactionProductModel2.default;

      return this.apiClient.callApi('/Payment/Secupaydebits/{paymentDebitId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * GET Payment/Secupaydebits/{paymentDebitId}
     * Get the details of a payment transaction
     * @param {String} paymentDebitId Payment debit id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SecupayTransactionProductModel}
     */

  }, {
    key: 'paymentSecupayDebitsGetById',
    value: function paymentSecupayDebitsGetById(paymentDebitId) {
      return this.paymentSecupayDebitsGetByIdWithHttpInfo(paymentDebitId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST Payment/Secupaydebits
     * Start a debit payment transaction
     * @param {Object} opts Optional parameters
     * @param {module:model/SecupayTransactionProductDTO} opts.body Debit payment transaction input properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SecupayTransactionProductModel} and HTTP response
     */

  }, {
    key: 'paymentSecupaydebitsPostWithHttpInfo',
    value: function paymentSecupaydebitsPostWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['body'];

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _SecupayTransactionProductModel2.default;

      return this.apiClient.callApi('/Payment/Secupaydebits', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Payment/Secupaydebits
     * Start a debit payment transaction
     * @param {Object} opts Optional parameters
     * @param {module:model/SecupayTransactionProductDTO} opts.body Debit payment transaction input properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SecupayTransactionProductModel}
     */

  }, {
    key: 'paymentSecupaydebitsPost',
    value: function paymentSecupaydebitsPost(opts) {
      return this.paymentSecupaydebitsPostWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * PUT Payment/{paymentMethod}/{paymentId}/accrual
     * Update the accrual flag of an existing payment transaction
     * @param {String} paymentMethod Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)
     * @param {String} paymentId Payment id
     * @param {module:model/SecupayTransactionReverseAccrualDTO} body Reverse accrual input properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SecupayTransactionProductModel} and HTTP response
     */

  }, {
    key: 'reverseAccrualByPaymentIdWithHttpInfo',
    value: function reverseAccrualByPaymentIdWithHttpInfo(paymentMethod, paymentId, body) {
      var postBody = body;

      // verify the required parameter 'paymentMethod' is set
      if (paymentMethod === undefined || paymentMethod === null) {
        throw new Error("Missing the required parameter 'paymentMethod' when calling reverseAccrualByPaymentId");
      }

      // verify the required parameter 'paymentId' is set
      if (paymentId === undefined || paymentId === null) {
        throw new Error("Missing the required parameter 'paymentId' when calling reverseAccrualByPaymentId");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling reverseAccrualByPaymentId");
      }

      var pathParams = {
        'paymentMethod': paymentMethod,
        'paymentId': paymentId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _SecupayTransactionProductModel2.default;

      return this.apiClient.callApi('/Payment/{paymentMethod}/{paymentId}/accrual', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * PUT Payment/{paymentMethod}/{paymentId}/accrual
     * Update the accrual flag of an existing payment transaction
     * @param {String} paymentMethod Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)
     * @param {String} paymentId Payment id
     * @param {module:model/SecupayTransactionReverseAccrualDTO} body Reverse accrual input properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SecupayTransactionProductModel}
     */

  }, {
    key: 'reverseAccrualByPaymentId',
    value: function reverseAccrualByPaymentId(paymentMethod, paymentId, body) {
      return this.reverseAccrualByPaymentIdWithHttpInfo(paymentMethod, paymentId, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * PUT Payment/{paymentMethod}/{paymentId}/shippingInformation
     * Update the accrual flag of an existing payment transaction
     * @param {String} paymentMethod Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)
     * @param {String} paymentId Payment id
     * @param {module:model/SecupayTransactionSetShippingInformationDTO} body Shipping information properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SecupayTransactionProductModel} and HTTP response
     */

  }, {
    key: 'setShippingInformationByPaymentIdWithHttpInfo',
    value: function setShippingInformationByPaymentIdWithHttpInfo(paymentMethod, paymentId, body) {
      var postBody = body;

      // verify the required parameter 'paymentMethod' is set
      if (paymentMethod === undefined || paymentMethod === null) {
        throw new Error("Missing the required parameter 'paymentMethod' when calling setShippingInformationByPaymentId");
      }

      // verify the required parameter 'paymentId' is set
      if (paymentId === undefined || paymentId === null) {
        throw new Error("Missing the required parameter 'paymentId' when calling setShippingInformationByPaymentId");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setShippingInformationByPaymentId");
      }

      var pathParams = {
        'paymentMethod': paymentMethod,
        'paymentId': paymentId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _SecupayTransactionProductModel2.default;

      return this.apiClient.callApi('/Payment/{paymentMethod}/{paymentId}/shippingInformation', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * PUT Payment/{paymentMethod}/{paymentId}/shippingInformation
     * Update the accrual flag of an existing payment transaction
     * @param {String} paymentMethod Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)
     * @param {String} paymentId Payment id
     * @param {module:model/SecupayTransactionSetShippingInformationDTO} body Shipping information properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SecupayTransactionProductModel}
     */

  }, {
    key: 'setShippingInformationByPaymentId',
    value: function setShippingInformationByPaymentId(paymentMethod, paymentId, body) {
      return this.setShippingInformationByPaymentIdWithHttpInfo(paymentMethod, paymentId, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * PUT Payment/{paymentMethod}/{paymentId}/basket
     * Update a basket of an existing payment transaction
     * @param {String} paymentMethod Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)
     * @param {String} paymentId Payment id
     * @param {module:model/SecupayTransactionUpdateBasketDTO} body Update basket input properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SecupayTransactionProductModel} and HTTP response
     */

  }, {
    key: 'updateBasketByPaymentIdWithHttpInfo',
    value: function updateBasketByPaymentIdWithHttpInfo(paymentMethod, paymentId, body) {
      var postBody = body;

      // verify the required parameter 'paymentMethod' is set
      if (paymentMethod === undefined || paymentMethod === null) {
        throw new Error("Missing the required parameter 'paymentMethod' when calling updateBasketByPaymentId");
      }

      // verify the required parameter 'paymentId' is set
      if (paymentId === undefined || paymentId === null) {
        throw new Error("Missing the required parameter 'paymentId' when calling updateBasketByPaymentId");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateBasketByPaymentId");
      }

      var pathParams = {
        'paymentMethod': paymentMethod,
        'paymentId': paymentId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _SecupayTransactionProductModel2.default;

      return this.apiClient.callApi('/Payment/{paymentMethod}/{paymentId}/basket', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * PUT Payment/{paymentMethod}/{paymentId}/basket
     * Update a basket of an existing payment transaction
     * @param {String} paymentMethod Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)
     * @param {String} paymentId Payment id
     * @param {module:model/SecupayTransactionUpdateBasketDTO} body Update basket input properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SecupayTransactionProductModel}
     */

  }, {
    key: 'updateBasketByPaymentId',
    value: function updateBasketByPaymentId(paymentMethod, paymentId, body) {
      return this.updateBasketByPaymentIdWithHttpInfo(paymentMethod, paymentId, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return PaymentSecupayDebitsApi;
}();

exports.default = PaymentSecupayDebitsApi;
},{"../ApiClient":21,"../model/ProductExceptionPayload":143,"../model/SecupayTransactionCancelDTO":151,"../model/SecupayTransactionCaptureDTO":152,"../model/SecupayTransactionDTOExternalInvoicePdf":153,"../model/SecupayTransactionExternalInvoicePdf":154,"../model/SecupayTransactionProductDTO":156,"../model/SecupayTransactionProductModel":161,"../model/SecupayTransactionReverseAccrualDTO":165,"../model/SecupayTransactionSetShippingInformationDTO":166,"../model/SecupayTransactionUpdateBasketDTO":167}],36:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _ProductExceptionPayload = require('../model/ProductExceptionPayload');

var _ProductExceptionPayload2 = _interopRequireDefault(_ProductExceptionPayload);

var _SecupayTransactionCancelDTO = require('../model/SecupayTransactionCancelDTO');

var _SecupayTransactionCancelDTO2 = _interopRequireDefault(_SecupayTransactionCancelDTO);

var _SecupayTransactionCaptureDTO = require('../model/SecupayTransactionCaptureDTO');

var _SecupayTransactionCaptureDTO2 = _interopRequireDefault(_SecupayTransactionCaptureDTO);

var _SecupayTransactionDTOExternalInvoicePdf = require('../model/SecupayTransactionDTOExternalInvoicePdf');

var _SecupayTransactionDTOExternalInvoicePdf2 = _interopRequireDefault(_SecupayTransactionDTOExternalInvoicePdf);

var _SecupayTransactionExternalInvoicePdf = require('../model/SecupayTransactionExternalInvoicePdf');

var _SecupayTransactionExternalInvoicePdf2 = _interopRequireDefault(_SecupayTransactionExternalInvoicePdf);

var _SecupayTransactionProductDTO = require('../model/SecupayTransactionProductDTO');

var _SecupayTransactionProductDTO2 = _interopRequireDefault(_SecupayTransactionProductDTO);

var _SecupayTransactionProductModel = require('../model/SecupayTransactionProductModel');

var _SecupayTransactionProductModel2 = _interopRequireDefault(_SecupayTransactionProductModel);

var _SecupayTransactionReverseAccrualDTO = require('../model/SecupayTransactionReverseAccrualDTO');

var _SecupayTransactionReverseAccrualDTO2 = _interopRequireDefault(_SecupayTransactionReverseAccrualDTO);

var _SecupayTransactionSetShippingInformationDTO = require('../model/SecupayTransactionSetShippingInformationDTO');

var _SecupayTransactionSetShippingInformationDTO2 = _interopRequireDefault(_SecupayTransactionSetShippingInformationDTO);

var _SecupayTransactionUpdateBasketDTO = require('../model/SecupayTransactionUpdateBasketDTO');

var _SecupayTransactionUpdateBasketDTO2 = _interopRequireDefault(_SecupayTransactionUpdateBasketDTO);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* PaymentSecupayInvoices service.
* @module api/PaymentSecupayInvoicesApi
*/
PaymentSecupayInvoicesApi = function () {

  /**
  * Constructs a new PaymentSecupayInvoicesApi. 
  * @alias module:api/PaymentSecupayInvoicesApi
  * @class
  * @param {module:ApiClient} apiClient Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function PaymentSecupayInvoicesApi(apiClient) {
    _classCallCheck(this, PaymentSecupayInvoicesApi);

    this.apiClient = apiClient || _ApiClient2.default.instance;
  }

  /**
   * POST Payment/{paymentMethod}/{paymentId}/assignExternalInvoicePdf/{documentId}
   * Assign external invoice pdf
   * @param {String} paymentMethod Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)
   * @param {String} paymentId Payment id
   * @param {String} documentId Document id
   * @param {module:model/SecupayTransactionDTOExternalInvoicePdf} body Request body for assigning external invoice pdf
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SecupayTransactionExternalInvoicePdf} and HTTP response
   */


  _createClass(PaymentSecupayInvoicesApi, [{
    key: 'assignExternalInvoicePdfWithHttpInfo',
    value: function assignExternalInvoicePdfWithHttpInfo(paymentMethod, paymentId, documentId, body) {
      var postBody = body;

      // verify the required parameter 'paymentMethod' is set
      if (paymentMethod === undefined || paymentMethod === null) {
        throw new Error("Missing the required parameter 'paymentMethod' when calling assignExternalInvoicePdf");
      }

      // verify the required parameter 'paymentId' is set
      if (paymentId === undefined || paymentId === null) {
        throw new Error("Missing the required parameter 'paymentId' when calling assignExternalInvoicePdf");
      }

      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling assignExternalInvoicePdf");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling assignExternalInvoicePdf");
      }

      var pathParams = {
        'paymentMethod': paymentMethod,
        'paymentId': paymentId,
        'documentId': documentId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _SecupayTransactionExternalInvoicePdf2.default;

      return this.apiClient.callApi('/Payment/{paymentMethod}/{paymentId}/assignExternalInvoicePdf/{documentId}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Payment/{paymentMethod}/{paymentId}/assignExternalInvoicePdf/{documentId}
     * Assign external invoice pdf
     * @param {String} paymentMethod Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)
     * @param {String} paymentId Payment id
     * @param {String} documentId Document id
     * @param {module:model/SecupayTransactionDTOExternalInvoicePdf} body Request body for assigning external invoice pdf
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SecupayTransactionExternalInvoicePdf}
     */

  }, {
    key: 'assignExternalInvoicePdf',
    value: function assignExternalInvoicePdf(paymentMethod, paymentId, documentId, body) {
      return this.assignExternalInvoicePdfWithHttpInfo(paymentMethod, paymentId, documentId, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST Payment/{paymentMethod}/{paymentId}/cancel
     * Function to cancel the payment transaction
     * @param {String} paymentMethod Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)
     * @param {String} paymentId Payment id
     * @param {Object} opts Optional parameters
     * @param {module:model/SecupayTransactionCancelDTO} opts.body Cancel payment transaction input properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: 'cancelPaymentTransactionByIdWithHttpInfo',
    value: function cancelPaymentTransactionByIdWithHttpInfo(paymentMethod, paymentId, opts) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'paymentMethod' is set
      if (paymentMethod === undefined || paymentMethod === null) {
        throw new Error("Missing the required parameter 'paymentMethod' when calling cancelPaymentTransactionById");
      }

      // verify the required parameter 'paymentId' is set
      if (paymentId === undefined || paymentId === null) {
        throw new Error("Missing the required parameter 'paymentId' when calling cancelPaymentTransactionById");
      }

      var pathParams = {
        'paymentMethod': paymentMethod,
        'paymentId': paymentId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi('/Payment/{paymentMethod}/{paymentId}/cancel', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Payment/{paymentMethod}/{paymentId}/cancel
     * Function to cancel the payment transaction
     * @param {String} paymentMethod Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)
     * @param {String} paymentId Payment id
     * @param {Object} opts Optional parameters
     * @param {module:model/SecupayTransactionCancelDTO} opts.body Cancel payment transaction input properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: 'cancelPaymentTransactionById',
    value: function cancelPaymentTransactionById(paymentMethod, paymentId, opts) {
      return this.cancelPaymentTransactionByIdWithHttpInfo(paymentMethod, paymentId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST Payment/{paymentMethod}/{paymentId}/capture
     * Function to cancel the payment transaction
     * @param {String} paymentMethod Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)
     * @param {String} paymentId Payment id
     * @param {Object} opts Optional parameters
     * @param {module:model/SecupayTransactionCaptureDTO} opts.body Capture payment transaction input properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SecupayTransactionProductModel} and HTTP response
     */

  }, {
    key: 'capturePaymentTransactionByIdWithHttpInfo',
    value: function capturePaymentTransactionByIdWithHttpInfo(paymentMethod, paymentId, opts) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'paymentMethod' is set
      if (paymentMethod === undefined || paymentMethod === null) {
        throw new Error("Missing the required parameter 'paymentMethod' when calling capturePaymentTransactionById");
      }

      // verify the required parameter 'paymentId' is set
      if (paymentId === undefined || paymentId === null) {
        throw new Error("Missing the required parameter 'paymentId' when calling capturePaymentTransactionById");
      }

      var pathParams = {
        'paymentMethod': paymentMethod,
        'paymentId': paymentId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _SecupayTransactionProductModel2.default;

      return this.apiClient.callApi('/Payment/{paymentMethod}/{paymentId}/capture', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Payment/{paymentMethod}/{paymentId}/capture
     * Function to cancel the payment transaction
     * @param {String} paymentMethod Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)
     * @param {String} paymentId Payment id
     * @param {Object} opts Optional parameters
     * @param {module:model/SecupayTransactionCaptureDTO} opts.body Capture payment transaction input properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SecupayTransactionProductModel}
     */

  }, {
    key: 'capturePaymentTransactionById',
    value: function capturePaymentTransactionById(paymentMethod, paymentId, opts) {
      return this.capturePaymentTransactionByIdWithHttpInfo(paymentMethod, paymentId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST Payment/Secupayinvoices/{paymentInvoiceId}/cancel
     * DEPRECATED: use cancelPaymentTransactionById
     * @param {String} paymentInvoiceId Payment invoice id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: 'paymentSecupayInvoicesCancelByIdWithHttpInfo',
    value: function paymentSecupayInvoicesCancelByIdWithHttpInfo(paymentInvoiceId) {
      var postBody = null;

      // verify the required parameter 'paymentInvoiceId' is set
      if (paymentInvoiceId === undefined || paymentInvoiceId === null) {
        throw new Error("Missing the required parameter 'paymentInvoiceId' when calling paymentSecupayInvoicesCancelById");
      }

      var pathParams = {
        'paymentInvoiceId': paymentInvoiceId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi('/Payment/Secupayinvoices/{paymentInvoiceId}/cancel', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Payment/Secupayinvoices/{paymentInvoiceId}/cancel
     * DEPRECATED: use cancelPaymentTransactionById
     * @param {String} paymentInvoiceId Payment invoice id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: 'paymentSecupayInvoicesCancelById',
    value: function paymentSecupayInvoicesCancelById(paymentInvoiceId) {
      return this.paymentSecupayInvoicesCancelByIdWithHttpInfo(paymentInvoiceId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * GET Payment/Secupayinvoices/{paymentInvoiceId}
     * Get the details of a payment transaction
     * @param {String} paymentInvoiceId Payment transaction ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SecupayTransactionProductModel} and HTTP response
     */

  }, {
    key: 'paymentSecupayInvoicesGetByIdWithHttpInfo',
    value: function paymentSecupayInvoicesGetByIdWithHttpInfo(paymentInvoiceId) {
      var postBody = null;

      // verify the required parameter 'paymentInvoiceId' is set
      if (paymentInvoiceId === undefined || paymentInvoiceId === null) {
        throw new Error("Missing the required parameter 'paymentInvoiceId' when calling paymentSecupayInvoicesGetById");
      }

      var pathParams = {
        'paymentInvoiceId': paymentInvoiceId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _SecupayTransactionProductModel2.default;

      return this.apiClient.callApi('/Payment/Secupayinvoices/{paymentInvoiceId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * GET Payment/Secupayinvoices/{paymentInvoiceId}
     * Get the details of a payment transaction
     * @param {String} paymentInvoiceId Payment transaction ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SecupayTransactionProductModel}
     */

  }, {
    key: 'paymentSecupayInvoicesGetById',
    value: function paymentSecupayInvoicesGetById(paymentInvoiceId) {
      return this.paymentSecupayInvoicesGetByIdWithHttpInfo(paymentInvoiceId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST Payment/Secupayinvoices
     * Start a invoice payment transaction
     * @param {Object} opts Optional parameters
     * @param {module:model/SecupayTransactionProductDTO} opts.body Invoice payment transaction input properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SecupayTransactionProductModel} and HTTP response
     */

  }, {
    key: 'paymentSecupayinvoicesPostWithHttpInfo',
    value: function paymentSecupayinvoicesPostWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['body'];

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _SecupayTransactionProductModel2.default;

      return this.apiClient.callApi('/Payment/Secupayinvoices', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Payment/Secupayinvoices
     * Start a invoice payment transaction
     * @param {Object} opts Optional parameters
     * @param {module:model/SecupayTransactionProductDTO} opts.body Invoice payment transaction input properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SecupayTransactionProductModel}
     */

  }, {
    key: 'paymentSecupayinvoicesPost',
    value: function paymentSecupayinvoicesPost(opts) {
      return this.paymentSecupayinvoicesPostWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * PUT Payment/{paymentMethod}/{paymentId}/accrual
     * Update the accrual flag of an existing payment transaction
     * @param {String} paymentMethod Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)
     * @param {String} paymentId Payment id
     * @param {module:model/SecupayTransactionReverseAccrualDTO} body Reverse accrual input properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SecupayTransactionProductModel} and HTTP response
     */

  }, {
    key: 'reverseAccrualByPaymentIdWithHttpInfo',
    value: function reverseAccrualByPaymentIdWithHttpInfo(paymentMethod, paymentId, body) {
      var postBody = body;

      // verify the required parameter 'paymentMethod' is set
      if (paymentMethod === undefined || paymentMethod === null) {
        throw new Error("Missing the required parameter 'paymentMethod' when calling reverseAccrualByPaymentId");
      }

      // verify the required parameter 'paymentId' is set
      if (paymentId === undefined || paymentId === null) {
        throw new Error("Missing the required parameter 'paymentId' when calling reverseAccrualByPaymentId");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling reverseAccrualByPaymentId");
      }

      var pathParams = {
        'paymentMethod': paymentMethod,
        'paymentId': paymentId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _SecupayTransactionProductModel2.default;

      return this.apiClient.callApi('/Payment/{paymentMethod}/{paymentId}/accrual', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * PUT Payment/{paymentMethod}/{paymentId}/accrual
     * Update the accrual flag of an existing payment transaction
     * @param {String} paymentMethod Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)
     * @param {String} paymentId Payment id
     * @param {module:model/SecupayTransactionReverseAccrualDTO} body Reverse accrual input properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SecupayTransactionProductModel}
     */

  }, {
    key: 'reverseAccrualByPaymentId',
    value: function reverseAccrualByPaymentId(paymentMethod, paymentId, body) {
      return this.reverseAccrualByPaymentIdWithHttpInfo(paymentMethod, paymentId, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * PUT Payment/{paymentMethod}/{paymentId}/shippingInformation
     * Update the accrual flag of an existing payment transaction
     * @param {String} paymentMethod Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)
     * @param {String} paymentId Payment id
     * @param {module:model/SecupayTransactionSetShippingInformationDTO} body Shipping information properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SecupayTransactionProductModel} and HTTP response
     */

  }, {
    key: 'setShippingInformationByPaymentIdWithHttpInfo',
    value: function setShippingInformationByPaymentIdWithHttpInfo(paymentMethod, paymentId, body) {
      var postBody = body;

      // verify the required parameter 'paymentMethod' is set
      if (paymentMethod === undefined || paymentMethod === null) {
        throw new Error("Missing the required parameter 'paymentMethod' when calling setShippingInformationByPaymentId");
      }

      // verify the required parameter 'paymentId' is set
      if (paymentId === undefined || paymentId === null) {
        throw new Error("Missing the required parameter 'paymentId' when calling setShippingInformationByPaymentId");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setShippingInformationByPaymentId");
      }

      var pathParams = {
        'paymentMethod': paymentMethod,
        'paymentId': paymentId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _SecupayTransactionProductModel2.default;

      return this.apiClient.callApi('/Payment/{paymentMethod}/{paymentId}/shippingInformation', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * PUT Payment/{paymentMethod}/{paymentId}/shippingInformation
     * Update the accrual flag of an existing payment transaction
     * @param {String} paymentMethod Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)
     * @param {String} paymentId Payment id
     * @param {module:model/SecupayTransactionSetShippingInformationDTO} body Shipping information properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SecupayTransactionProductModel}
     */

  }, {
    key: 'setShippingInformationByPaymentId',
    value: function setShippingInformationByPaymentId(paymentMethod, paymentId, body) {
      return this.setShippingInformationByPaymentIdWithHttpInfo(paymentMethod, paymentId, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * PUT Payment/{paymentMethod}/{paymentId}/basket
     * Update a basket of an existing payment transaction
     * @param {String} paymentMethod Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)
     * @param {String} paymentId Payment id
     * @param {module:model/SecupayTransactionUpdateBasketDTO} body Update basket input properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SecupayTransactionProductModel} and HTTP response
     */

  }, {
    key: 'updateBasketByPaymentIdWithHttpInfo',
    value: function updateBasketByPaymentIdWithHttpInfo(paymentMethod, paymentId, body) {
      var postBody = body;

      // verify the required parameter 'paymentMethod' is set
      if (paymentMethod === undefined || paymentMethod === null) {
        throw new Error("Missing the required parameter 'paymentMethod' when calling updateBasketByPaymentId");
      }

      // verify the required parameter 'paymentId' is set
      if (paymentId === undefined || paymentId === null) {
        throw new Error("Missing the required parameter 'paymentId' when calling updateBasketByPaymentId");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateBasketByPaymentId");
      }

      var pathParams = {
        'paymentMethod': paymentMethod,
        'paymentId': paymentId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _SecupayTransactionProductModel2.default;

      return this.apiClient.callApi('/Payment/{paymentMethod}/{paymentId}/basket', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * PUT Payment/{paymentMethod}/{paymentId}/basket
     * Update a basket of an existing payment transaction
     * @param {String} paymentMethod Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)
     * @param {String} paymentId Payment id
     * @param {module:model/SecupayTransactionUpdateBasketDTO} body Update basket input properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SecupayTransactionProductModel}
     */

  }, {
    key: 'updateBasketByPaymentId',
    value: function updateBasketByPaymentId(paymentMethod, paymentId, body) {
      return this.updateBasketByPaymentIdWithHttpInfo(paymentMethod, paymentId, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return PaymentSecupayInvoicesApi;
}();

exports.default = PaymentSecupayInvoicesApi;
},{"../ApiClient":21,"../model/ProductExceptionPayload":143,"../model/SecupayTransactionCancelDTO":151,"../model/SecupayTransactionCaptureDTO":152,"../model/SecupayTransactionDTOExternalInvoicePdf":153,"../model/SecupayTransactionExternalInvoicePdf":154,"../model/SecupayTransactionProductDTO":156,"../model/SecupayTransactionProductModel":161,"../model/SecupayTransactionReverseAccrualDTO":165,"../model/SecupayTransactionSetShippingInformationDTO":166,"../model/SecupayTransactionUpdateBasketDTO":167}],37:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _ProductExceptionPayload = require('../model/ProductExceptionPayload');

var _ProductExceptionPayload2 = _interopRequireDefault(_ProductExceptionPayload);

var _SecupayTransactionCancelDTO = require('../model/SecupayTransactionCancelDTO');

var _SecupayTransactionCancelDTO2 = _interopRequireDefault(_SecupayTransactionCancelDTO);

var _SecupayTransactionCaptureDTO = require('../model/SecupayTransactionCaptureDTO');

var _SecupayTransactionCaptureDTO2 = _interopRequireDefault(_SecupayTransactionCaptureDTO);

var _SecupayTransactionDTOExternalInvoicePdf = require('../model/SecupayTransactionDTOExternalInvoicePdf');

var _SecupayTransactionDTOExternalInvoicePdf2 = _interopRequireDefault(_SecupayTransactionDTOExternalInvoicePdf);

var _SecupayTransactionExternalInvoicePdf = require('../model/SecupayTransactionExternalInvoicePdf');

var _SecupayTransactionExternalInvoicePdf2 = _interopRequireDefault(_SecupayTransactionExternalInvoicePdf);

var _SecupayTransactionProductDTO = require('../model/SecupayTransactionProductDTO');

var _SecupayTransactionProductDTO2 = _interopRequireDefault(_SecupayTransactionProductDTO);

var _SecupayTransactionProductModel = require('../model/SecupayTransactionProductModel');

var _SecupayTransactionProductModel2 = _interopRequireDefault(_SecupayTransactionProductModel);

var _SecupayTransactionReverseAccrualDTO = require('../model/SecupayTransactionReverseAccrualDTO');

var _SecupayTransactionReverseAccrualDTO2 = _interopRequireDefault(_SecupayTransactionReverseAccrualDTO);

var _SecupayTransactionSetShippingInformationDTO = require('../model/SecupayTransactionSetShippingInformationDTO');

var _SecupayTransactionSetShippingInformationDTO2 = _interopRequireDefault(_SecupayTransactionSetShippingInformationDTO);

var _SecupayTransactionUpdateBasketDTO = require('../model/SecupayTransactionUpdateBasketDTO');

var _SecupayTransactionUpdateBasketDTO2 = _interopRequireDefault(_SecupayTransactionUpdateBasketDTO);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* PaymentSecupayPrepays service.
* @module api/PaymentSecupayPrepaysApi
*/
PaymentSecupayPrepaysApi = function () {

  /**
  * Constructs a new PaymentSecupayPrepaysApi. 
  * @alias module:api/PaymentSecupayPrepaysApi
  * @class
  * @param {module:ApiClient} apiClient Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function PaymentSecupayPrepaysApi(apiClient) {
    _classCallCheck(this, PaymentSecupayPrepaysApi);

    this.apiClient = apiClient || _ApiClient2.default.instance;
  }

  /**
   * POST Payment/{paymentMethod}/{paymentId}/assignExternalInvoicePdf/{documentId}
   * Assign external invoice pdf
   * @param {String} paymentMethod Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)
   * @param {String} paymentId Payment id
   * @param {String} documentId Document id
   * @param {module:model/SecupayTransactionDTOExternalInvoicePdf} body Request body for assigning external invoice pdf
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SecupayTransactionExternalInvoicePdf} and HTTP response
   */


  _createClass(PaymentSecupayPrepaysApi, [{
    key: 'assignExternalInvoicePdfWithHttpInfo',
    value: function assignExternalInvoicePdfWithHttpInfo(paymentMethod, paymentId, documentId, body) {
      var postBody = body;

      // verify the required parameter 'paymentMethod' is set
      if (paymentMethod === undefined || paymentMethod === null) {
        throw new Error("Missing the required parameter 'paymentMethod' when calling assignExternalInvoicePdf");
      }

      // verify the required parameter 'paymentId' is set
      if (paymentId === undefined || paymentId === null) {
        throw new Error("Missing the required parameter 'paymentId' when calling assignExternalInvoicePdf");
      }

      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling assignExternalInvoicePdf");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling assignExternalInvoicePdf");
      }

      var pathParams = {
        'paymentMethod': paymentMethod,
        'paymentId': paymentId,
        'documentId': documentId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _SecupayTransactionExternalInvoicePdf2.default;

      return this.apiClient.callApi('/Payment/{paymentMethod}/{paymentId}/assignExternalInvoicePdf/{documentId}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Payment/{paymentMethod}/{paymentId}/assignExternalInvoicePdf/{documentId}
     * Assign external invoice pdf
     * @param {String} paymentMethod Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)
     * @param {String} paymentId Payment id
     * @param {String} documentId Document id
     * @param {module:model/SecupayTransactionDTOExternalInvoicePdf} body Request body for assigning external invoice pdf
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SecupayTransactionExternalInvoicePdf}
     */

  }, {
    key: 'assignExternalInvoicePdf',
    value: function assignExternalInvoicePdf(paymentMethod, paymentId, documentId, body) {
      return this.assignExternalInvoicePdfWithHttpInfo(paymentMethod, paymentId, documentId, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST Payment/{paymentMethod}/{paymentId}/cancel
     * Function to cancel the payment transaction
     * @param {String} paymentMethod Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)
     * @param {String} paymentId Payment id
     * @param {Object} opts Optional parameters
     * @param {module:model/SecupayTransactionCancelDTO} opts.body Cancel payment transaction input properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: 'cancelPaymentTransactionByIdWithHttpInfo',
    value: function cancelPaymentTransactionByIdWithHttpInfo(paymentMethod, paymentId, opts) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'paymentMethod' is set
      if (paymentMethod === undefined || paymentMethod === null) {
        throw new Error("Missing the required parameter 'paymentMethod' when calling cancelPaymentTransactionById");
      }

      // verify the required parameter 'paymentId' is set
      if (paymentId === undefined || paymentId === null) {
        throw new Error("Missing the required parameter 'paymentId' when calling cancelPaymentTransactionById");
      }

      var pathParams = {
        'paymentMethod': paymentMethod,
        'paymentId': paymentId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi('/Payment/{paymentMethod}/{paymentId}/cancel', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Payment/{paymentMethod}/{paymentId}/cancel
     * Function to cancel the payment transaction
     * @param {String} paymentMethod Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)
     * @param {String} paymentId Payment id
     * @param {Object} opts Optional parameters
     * @param {module:model/SecupayTransactionCancelDTO} opts.body Cancel payment transaction input properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: 'cancelPaymentTransactionById',
    value: function cancelPaymentTransactionById(paymentMethod, paymentId, opts) {
      return this.cancelPaymentTransactionByIdWithHttpInfo(paymentMethod, paymentId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST Payment/{paymentMethod}/{paymentId}/capture
     * Function to cancel the payment transaction
     * @param {String} paymentMethod Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)
     * @param {String} paymentId Payment id
     * @param {Object} opts Optional parameters
     * @param {module:model/SecupayTransactionCaptureDTO} opts.body Capture payment transaction input properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SecupayTransactionProductModel} and HTTP response
     */

  }, {
    key: 'capturePaymentTransactionByIdWithHttpInfo',
    value: function capturePaymentTransactionByIdWithHttpInfo(paymentMethod, paymentId, opts) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'paymentMethod' is set
      if (paymentMethod === undefined || paymentMethod === null) {
        throw new Error("Missing the required parameter 'paymentMethod' when calling capturePaymentTransactionById");
      }

      // verify the required parameter 'paymentId' is set
      if (paymentId === undefined || paymentId === null) {
        throw new Error("Missing the required parameter 'paymentId' when calling capturePaymentTransactionById");
      }

      var pathParams = {
        'paymentMethod': paymentMethod,
        'paymentId': paymentId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _SecupayTransactionProductModel2.default;

      return this.apiClient.callApi('/Payment/{paymentMethod}/{paymentId}/capture', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Payment/{paymentMethod}/{paymentId}/capture
     * Function to cancel the payment transaction
     * @param {String} paymentMethod Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)
     * @param {String} paymentId Payment id
     * @param {Object} opts Optional parameters
     * @param {module:model/SecupayTransactionCaptureDTO} opts.body Capture payment transaction input properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SecupayTransactionProductModel}
     */

  }, {
    key: 'capturePaymentTransactionById',
    value: function capturePaymentTransactionById(paymentMethod, paymentId, opts) {
      return this.capturePaymentTransactionByIdWithHttpInfo(paymentMethod, paymentId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST Payment/Secupayprepays/{paymentPrepayId}/cancel
     * DEPRECATED: use cancelPaymentTransactionById
     * @param {String} paymentPrepayId Payment prepay id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */

  }, {
    key: 'paymentSecupayPrepaysCancelByIdWithHttpInfo',
    value: function paymentSecupayPrepaysCancelByIdWithHttpInfo(paymentPrepayId) {
      var postBody = null;

      // verify the required parameter 'paymentPrepayId' is set
      if (paymentPrepayId === undefined || paymentPrepayId === null) {
        throw new Error("Missing the required parameter 'paymentPrepayId' when calling paymentSecupayPrepaysCancelById");
      }

      var pathParams = {
        'paymentPrepayId': paymentPrepayId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Object;

      return this.apiClient.callApi('/Payment/Secupayprepays/{paymentPrepayId}/cancel', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Payment/Secupayprepays/{paymentPrepayId}/cancel
     * DEPRECATED: use cancelPaymentTransactionById
     * @param {String} paymentPrepayId Payment prepay id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */

  }, {
    key: 'paymentSecupayPrepaysCancelById',
    value: function paymentSecupayPrepaysCancelById(paymentPrepayId) {
      return this.paymentSecupayPrepaysCancelByIdWithHttpInfo(paymentPrepayId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * GET Payment/Secupayprepays/{paymentPrepayId}
     * Get the details of a payment transaction
     * @param {String} paymentPrepayId Payment prepay id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SecupayTransactionProductModel} and HTTP response
     */

  }, {
    key: 'paymentSecupayPrepaysGetByIdWithHttpInfo',
    value: function paymentSecupayPrepaysGetByIdWithHttpInfo(paymentPrepayId) {
      var postBody = null;

      // verify the required parameter 'paymentPrepayId' is set
      if (paymentPrepayId === undefined || paymentPrepayId === null) {
        throw new Error("Missing the required parameter 'paymentPrepayId' when calling paymentSecupayPrepaysGetById");
      }

      var pathParams = {
        'paymentPrepayId': paymentPrepayId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _SecupayTransactionProductModel2.default;

      return this.apiClient.callApi('/Payment/Secupayprepays/{paymentPrepayId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * GET Payment/Secupayprepays/{paymentPrepayId}
     * Get the details of a payment transaction
     * @param {String} paymentPrepayId Payment prepay id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SecupayTransactionProductModel}
     */

  }, {
    key: 'paymentSecupayPrepaysGetById',
    value: function paymentSecupayPrepaysGetById(paymentPrepayId) {
      return this.paymentSecupayPrepaysGetByIdWithHttpInfo(paymentPrepayId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST Payment/Secupayprepays
     * Start a prepay payment transaction
     * @param {Object} opts Optional parameters
     * @param {module:model/SecupayTransactionProductDTO} opts.body Prepay payment transaction input properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SecupayTransactionProductModel} and HTTP response
     */

  }, {
    key: 'paymentSecupayprepaysPostWithHttpInfo',
    value: function paymentSecupayprepaysPostWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['body'];

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _SecupayTransactionProductModel2.default;

      return this.apiClient.callApi('/Payment/Secupayprepays', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Payment/Secupayprepays
     * Start a prepay payment transaction
     * @param {Object} opts Optional parameters
     * @param {module:model/SecupayTransactionProductDTO} opts.body Prepay payment transaction input properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SecupayTransactionProductModel}
     */

  }, {
    key: 'paymentSecupayprepaysPost',
    value: function paymentSecupayprepaysPost(opts) {
      return this.paymentSecupayprepaysPostWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * PUT Payment/{paymentMethod}/{paymentId}/accrual
     * Update the accrual flag of an existing payment transaction
     * @param {String} paymentMethod Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)
     * @param {String} paymentId Payment id
     * @param {module:model/SecupayTransactionReverseAccrualDTO} body Reverse accrual input properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SecupayTransactionProductModel} and HTTP response
     */

  }, {
    key: 'reverseAccrualByPaymentIdWithHttpInfo',
    value: function reverseAccrualByPaymentIdWithHttpInfo(paymentMethod, paymentId, body) {
      var postBody = body;

      // verify the required parameter 'paymentMethod' is set
      if (paymentMethod === undefined || paymentMethod === null) {
        throw new Error("Missing the required parameter 'paymentMethod' when calling reverseAccrualByPaymentId");
      }

      // verify the required parameter 'paymentId' is set
      if (paymentId === undefined || paymentId === null) {
        throw new Error("Missing the required parameter 'paymentId' when calling reverseAccrualByPaymentId");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling reverseAccrualByPaymentId");
      }

      var pathParams = {
        'paymentMethod': paymentMethod,
        'paymentId': paymentId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _SecupayTransactionProductModel2.default;

      return this.apiClient.callApi('/Payment/{paymentMethod}/{paymentId}/accrual', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * PUT Payment/{paymentMethod}/{paymentId}/accrual
     * Update the accrual flag of an existing payment transaction
     * @param {String} paymentMethod Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)
     * @param {String} paymentId Payment id
     * @param {module:model/SecupayTransactionReverseAccrualDTO} body Reverse accrual input properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SecupayTransactionProductModel}
     */

  }, {
    key: 'reverseAccrualByPaymentId',
    value: function reverseAccrualByPaymentId(paymentMethod, paymentId, body) {
      return this.reverseAccrualByPaymentIdWithHttpInfo(paymentMethod, paymentId, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * PUT Payment/{paymentMethod}/{paymentId}/shippingInformation
     * Update the accrual flag of an existing payment transaction
     * @param {String} paymentMethod Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)
     * @param {String} paymentId Payment id
     * @param {module:model/SecupayTransactionSetShippingInformationDTO} body Shipping information properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SecupayTransactionProductModel} and HTTP response
     */

  }, {
    key: 'setShippingInformationByPaymentIdWithHttpInfo',
    value: function setShippingInformationByPaymentIdWithHttpInfo(paymentMethod, paymentId, body) {
      var postBody = body;

      // verify the required parameter 'paymentMethod' is set
      if (paymentMethod === undefined || paymentMethod === null) {
        throw new Error("Missing the required parameter 'paymentMethod' when calling setShippingInformationByPaymentId");
      }

      // verify the required parameter 'paymentId' is set
      if (paymentId === undefined || paymentId === null) {
        throw new Error("Missing the required parameter 'paymentId' when calling setShippingInformationByPaymentId");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling setShippingInformationByPaymentId");
      }

      var pathParams = {
        'paymentMethod': paymentMethod,
        'paymentId': paymentId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _SecupayTransactionProductModel2.default;

      return this.apiClient.callApi('/Payment/{paymentMethod}/{paymentId}/shippingInformation', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * PUT Payment/{paymentMethod}/{paymentId}/shippingInformation
     * Update the accrual flag of an existing payment transaction
     * @param {String} paymentMethod Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)
     * @param {String} paymentId Payment id
     * @param {module:model/SecupayTransactionSetShippingInformationDTO} body Shipping information properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SecupayTransactionProductModel}
     */

  }, {
    key: 'setShippingInformationByPaymentId',
    value: function setShippingInformationByPaymentId(paymentMethod, paymentId, body) {
      return this.setShippingInformationByPaymentIdWithHttpInfo(paymentMethod, paymentId, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * PUT Payment/{paymentMethod}/{paymentId}/basket
     * Update a basket of an existing payment transaction
     * @param {String} paymentMethod Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)
     * @param {String} paymentId Payment id
     * @param {module:model/SecupayTransactionUpdateBasketDTO} body Update basket input properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SecupayTransactionProductModel} and HTTP response
     */

  }, {
    key: 'updateBasketByPaymentIdWithHttpInfo',
    value: function updateBasketByPaymentIdWithHttpInfo(paymentMethod, paymentId, body) {
      var postBody = body;

      // verify the required parameter 'paymentMethod' is set
      if (paymentMethod === undefined || paymentMethod === null) {
        throw new Error("Missing the required parameter 'paymentMethod' when calling updateBasketByPaymentId");
      }

      // verify the required parameter 'paymentId' is set
      if (paymentId === undefined || paymentId === null) {
        throw new Error("Missing the required parameter 'paymentId' when calling updateBasketByPaymentId");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateBasketByPaymentId");
      }

      var pathParams = {
        'paymentMethod': paymentMethod,
        'paymentId': paymentId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _SecupayTransactionProductModel2.default;

      return this.apiClient.callApi('/Payment/{paymentMethod}/{paymentId}/basket', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * PUT Payment/{paymentMethod}/{paymentId}/basket
     * Update a basket of an existing payment transaction
     * @param {String} paymentMethod Payment method (secupaydebits, secupayprepays, secupayinvoices, ...)
     * @param {String} paymentId Payment id
     * @param {module:model/SecupayTransactionUpdateBasketDTO} body Update basket input properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SecupayTransactionProductModel}
     */

  }, {
    key: 'updateBasketByPaymentId',
    value: function updateBasketByPaymentId(paymentMethod, paymentId, body) {
      return this.updateBasketByPaymentIdWithHttpInfo(paymentMethod, paymentId, body).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return PaymentSecupayPrepaysApi;
}();

exports.default = PaymentSecupayPrepaysApi;
},{"../ApiClient":21,"../model/ProductExceptionPayload":143,"../model/SecupayTransactionCancelDTO":151,"../model/SecupayTransactionCaptureDTO":152,"../model/SecupayTransactionDTOExternalInvoicePdf":153,"../model/SecupayTransactionExternalInvoicePdf":154,"../model/SecupayTransactionProductDTO":156,"../model/SecupayTransactionProductModel":161,"../model/SecupayTransactionReverseAccrualDTO":165,"../model/SecupayTransactionSetShippingInformationDTO":166,"../model/SecupayTransactionUpdateBasketDTO":167}],38:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _PaymentTransactionsCancelList = require('../model/PaymentTransactionsCancelList');

var _PaymentTransactionsCancelList2 = _interopRequireDefault(_PaymentTransactionsCancelList);

var _PaymentTransactionsList = require('../model/PaymentTransactionsList');

var _PaymentTransactionsList2 = _interopRequireDefault(_PaymentTransactionsList);

var _PaymentTransactionsProductModel = require('../model/PaymentTransactionsProductModel');

var _PaymentTransactionsProductModel2 = _interopRequireDefault(_PaymentTransactionsProductModel);

var _PaymentTransactionsShippingUrl = require('../model/PaymentTransactionsShippingUrl');

var _PaymentTransactionsShippingUrl2 = _interopRequireDefault(_PaymentTransactionsShippingUrl);

var _ProductExceptionPayload = require('../model/ProductExceptionPayload');

var _ProductExceptionPayload2 = _interopRequireDefault(_ProductExceptionPayload);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* PaymentTransactions service.
* @module api/PaymentTransactionsApi
*/
PaymentTransactionsApi = function () {

  /**
  * Constructs a new PaymentTransactionsApi. 
  * @alias module:api/PaymentTransactionsApi
  * @class
  * @param {module:ApiClient} apiClient Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function PaymentTransactionsApi(apiClient) {
    _classCallCheck(this, PaymentTransactionsApi);

    this.apiClient = apiClient || _ApiClient2.default.instance;
  }

  /**
   * GET Payment/Transactions
   * Get a list of payment transactions
   * @param {Object} opts Optional parameters
   * @param {Number} opts.count The number of items to return.
   * @param {Number} opts.offset The position within the whole result set to start returning items (First element is at 0).
   * @param {String} opts.fields List of fields to include in the result. Nested properties can be accessed with this notation: prop1.prop2  Example: prop3,prop1.prop2
   * @param {String} opts.q A query string to restrict the returned items to given conditions. The query string must consist of any combination of single expressions in the form property:condition.  *                  A condition may contain:  *                      - wildcard \&quot;*\&quot; for any number of characters  *                      - wildcard \&quot;?\&quot; for one character  *                      - ranges in the form [value TO value]  *  *                  Single expressions may combined by &#39;AND&#39;, &#39;OR&#39;, &#39;NOT&#39; operators and parenthesis &#39;(&#39;, &#39;)&#39; for grouping.  *                  Property names can be nested like \&quot;prop1.prop2\&quot;.  *                  Example: (NOT customer.name:meier*) AND (customer.age:[30 TO 40] OR customer.age:[50 TO 60])  *                  
   * @param {String} opts.sort String with comma separated pairs of field:order (e.g. contact.surname:asc,contact.comapnyname:desc). Result set will be sorted by included fields, in ascending &#39;asc&#39;, or descending &#39;dsc&#39; order.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaymentTransactionsList} and HTTP response
   */


  _createClass(PaymentTransactionsApi, [{
    key: 'paymentTransactionsGetWithHttpInfo',
    value: function paymentTransactionsGetWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {};
      var queryParams = {
        'count': opts['count'],
        'offset': opts['offset'],
        'fields': opts['fields'],
        'q': opts['q'],
        'sort': opts['sort']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _PaymentTransactionsList2.default;

      return this.apiClient.callApi('/Payment/Transactions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * GET Payment/Transactions
     * Get a list of payment transactions
     * @param {Object} opts Optional parameters
     * @param {Number} opts.count The number of items to return.
     * @param {Number} opts.offset The position within the whole result set to start returning items (First element is at 0).
     * @param {String} opts.fields List of fields to include in the result. Nested properties can be accessed with this notation: prop1.prop2  Example: prop3,prop1.prop2
     * @param {String} opts.q A query string to restrict the returned items to given conditions. The query string must consist of any combination of single expressions in the form property:condition.  *                  A condition may contain:  *                      - wildcard \&quot;*\&quot; for any number of characters  *                      - wildcard \&quot;?\&quot; for one character  *                      - ranges in the form [value TO value]  *  *                  Single expressions may combined by &#39;AND&#39;, &#39;OR&#39;, &#39;NOT&#39; operators and parenthesis &#39;(&#39;, &#39;)&#39; for grouping.  *                  Property names can be nested like \&quot;prop1.prop2\&quot;.  *                  Example: (NOT customer.name:meier*) AND (customer.age:[30 TO 40] OR customer.age:[50 TO 60])  *                  
     * @param {String} opts.sort String with comma separated pairs of field:order (e.g. contact.surname:asc,contact.comapnyname:desc). Result set will be sorted by included fields, in ascending &#39;asc&#39;, or descending &#39;dsc&#39; order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaymentTransactionsList}
     */

  }, {
    key: 'paymentTransactionsGet',
    value: function paymentTransactionsGet(opts) {
      return this.paymentTransactionsGetWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * GET Payment/Transactions/{paymentTransactionId}
     * Get all payment transactions
     * @param {String} paymentTransactionId Payment transaction id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaymentTransactionsProductModel} and HTTP response
     */

  }, {
    key: 'paymentTransactionsGetByIdWithHttpInfo',
    value: function paymentTransactionsGetByIdWithHttpInfo(paymentTransactionId) {
      var postBody = null;

      // verify the required parameter 'paymentTransactionId' is set
      if (paymentTransactionId === undefined || paymentTransactionId === null) {
        throw new Error("Missing the required parameter 'paymentTransactionId' when calling paymentTransactionsGetById");
      }

      var pathParams = {
        'paymentTransactionId': paymentTransactionId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _PaymentTransactionsProductModel2.default;

      return this.apiClient.callApi('/Payment/Transactions/{paymentTransactionId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * GET Payment/Transactions/{paymentTransactionId}
     * Get all payment transactions
     * @param {String} paymentTransactionId Payment transaction id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaymentTransactionsProductModel}
     */

  }, {
    key: 'paymentTransactionsGetById',
    value: function paymentTransactionsGetById(paymentTransactionId) {
      return this.paymentTransactionsGetByIdWithHttpInfo(paymentTransactionId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST Payment/Transactions/{paymentTransactionId}/cancel
     * Cancel a payment transaction
     * @param {String} paymentTransactionId Payment transaction id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PaymentTransactionsCancelList>} and HTTP response
     */

  }, {
    key: 'paymentTransactionsIdCancelPostWithHttpInfo',
    value: function paymentTransactionsIdCancelPostWithHttpInfo(paymentTransactionId) {
      var postBody = null;

      // verify the required parameter 'paymentTransactionId' is set
      if (paymentTransactionId === undefined || paymentTransactionId === null) {
        throw new Error("Missing the required parameter 'paymentTransactionId' when calling paymentTransactionsIdCancelPost");
      }

      var pathParams = {
        'paymentTransactionId': paymentTransactionId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = [_PaymentTransactionsCancelList2.default];

      return this.apiClient.callApi('/Payment/Transactions/{paymentTransactionId}/cancel', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Payment/Transactions/{paymentTransactionId}/cancel
     * Cancel a payment transaction
     * @param {String} paymentTransactionId Payment transaction id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PaymentTransactionsCancelList>}
     */

  }, {
    key: 'paymentTransactionsIdCancelPost',
    value: function paymentTransactionsIdCancelPost(paymentTransactionId) {
      return this.paymentTransactionsIdCancelPostWithHttpInfo(paymentTransactionId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * GET Payment/Transactions/{paymentTransactionId}/ShippingUrl
     * Get the url where you can fill the shipping information
     * @param {String} paymentTransactionId Payment transaction id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaymentTransactionsShippingUrl} and HTTP response
     */

  }, {
    key: 'paymentTransactionsIdShippingUrlGetWithHttpInfo',
    value: function paymentTransactionsIdShippingUrlGetWithHttpInfo(paymentTransactionId) {
      var postBody = null;

      // verify the required parameter 'paymentTransactionId' is set
      if (paymentTransactionId === undefined || paymentTransactionId === null) {
        throw new Error("Missing the required parameter 'paymentTransactionId' when calling paymentTransactionsIdShippingUrlGet");
      }

      var pathParams = {
        'paymentTransactionId': paymentTransactionId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _PaymentTransactionsShippingUrl2.default;

      return this.apiClient.callApi('/Payment/Transactions/{paymentTransactionId}/ShippingUrl', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * GET Payment/Transactions/{paymentTransactionId}/ShippingUrl
     * Get the url where you can fill the shipping information
     * @param {String} paymentTransactionId Payment transaction id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaymentTransactionsShippingUrl}
     */

  }, {
    key: 'paymentTransactionsIdShippingUrlGet',
    value: function paymentTransactionsIdShippingUrlGet(paymentTransactionId) {
      return this.paymentTransactionsIdShippingUrlGetWithHttpInfo(paymentTransactionId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return PaymentTransactionsApi;
}();

exports.default = PaymentTransactionsApi;
},{"../ApiClient":21,"../model/PaymentTransactionsCancelList":131,"../model/PaymentTransactionsList":132,"../model/PaymentTransactionsProductModel":133,"../model/PaymentTransactionsShippingUrl":137,"../model/ProductExceptionPayload":143}],39:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _PrepaidItemsList = require('../model/PrepaidItemsList');

var _PrepaidItemsList2 = _interopRequireDefault(_PrepaidItemsList);

var _PrepaidItemsProductModel = require('../model/PrepaidItemsProductModel');

var _PrepaidItemsProductModel2 = _interopRequireDefault(_PrepaidItemsProductModel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* PrepaidItems service.
* @module api/PrepaidItemsApi
*/
PrepaidItemsApi = function () {

  /**
  * Constructs a new PrepaidItemsApi. 
  * @alias module:api/PrepaidItemsApi
  * @class
  * @param {module:ApiClient} apiClient Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function PrepaidItemsApi(apiClient) {
    _classCallCheck(this, PrepaidItemsApi);

    this.apiClient = apiClient || _ApiClient2.default.instance;
  }

  /**
   * GET Prepaid/Items
   * Get a list of prepaid items
   * @param {Object} opts Optional parameters
   * @param {Number} opts.count The number of items to return.
   * @param {Number} opts.offset The position within the whole result set to start returning items (First element is at 0).
   * @param {String} opts.fields List of fields to include in the result. Nested properties can be accessed with this notation: prop1.prop2  Example: prop3,prop1.prop2
   * @param {String} opts.q A query string to restrict the returned items to given conditions. The query string must consist of any combination of single expressions in the form property:condition.  *                  A condition may contain:  *                      - wildcard \&quot;*\&quot; for any number of characters  *                      - wildcard \&quot;?\&quot; for one character  *                      - ranges in the form [value TO value]  *  *                  Single expressions may combined by &#39;AND&#39;, &#39;OR&#39;, &#39;NOT&#39; operators and parenthesis &#39;(&#39;, &#39;)&#39; for grouping.  *                  Property names can be nested like \&quot;prop1.prop2\&quot;.  *                  Example: (NOT customer.name:meier*) AND (customer.age:[30 TO 40] OR customer.age:[50 TO 60])  *                  
   * @param {String} opts.sort String with comma separated pairs of field:order (e.g. contact.surname:asc,contact.comapnyname:desc). Result set will be sorted by included fields, in ascending &#39;asc&#39;, or descending &#39;dsc&#39; order.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PrepaidItemsList} and HTTP response
   */


  _createClass(PrepaidItemsApi, [{
    key: 'getAllWithHttpInfo',
    value: function getAllWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {};
      var queryParams = {
        'count': opts['count'],
        'offset': opts['offset'],
        'fields': opts['fields'],
        'q': opts['q'],
        'sort': opts['sort']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _PrepaidItemsList2.default;

      return this.apiClient.callApi('/Prepaid/Items', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * GET Prepaid/Items
     * Get a list of prepaid items
     * @param {Object} opts Optional parameters
     * @param {Number} opts.count The number of items to return.
     * @param {Number} opts.offset The position within the whole result set to start returning items (First element is at 0).
     * @param {String} opts.fields List of fields to include in the result. Nested properties can be accessed with this notation: prop1.prop2  Example: prop3,prop1.prop2
     * @param {String} opts.q A query string to restrict the returned items to given conditions. The query string must consist of any combination of single expressions in the form property:condition.  *                  A condition may contain:  *                      - wildcard \&quot;*\&quot; for any number of characters  *                      - wildcard \&quot;?\&quot; for one character  *                      - ranges in the form [value TO value]  *  *                  Single expressions may combined by &#39;AND&#39;, &#39;OR&#39;, &#39;NOT&#39; operators and parenthesis &#39;(&#39;, &#39;)&#39; for grouping.  *                  Property names can be nested like \&quot;prop1.prop2\&quot;.  *                  Example: (NOT customer.name:meier*) AND (customer.age:[30 TO 40] OR customer.age:[50 TO 60])  *                  
     * @param {String} opts.sort String with comma separated pairs of field:order (e.g. contact.surname:asc,contact.comapnyname:desc). Result set will be sorted by included fields, in ascending &#39;asc&#39;, or descending &#39;dsc&#39; order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PrepaidItemsList}
     */

  }, {
    key: 'getAll',
    value: function getAll(opts) {
      return this.getAllWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * GET Prepaid/Items/{prepaidItemId}
     * Get one prepaid item for a specific id
     * @param {String} prepaidItemId Prepaid item id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PrepaidItemsProductModel} and HTTP response
     */

  }, {
    key: 'getOneWithHttpInfo',
    value: function getOneWithHttpInfo(prepaidItemId) {
      var postBody = null;

      // verify the required parameter 'prepaidItemId' is set
      if (prepaidItemId === undefined || prepaidItemId === null) {
        throw new Error("Missing the required parameter 'prepaidItemId' when calling getOne");
      }

      var pathParams = {
        'prepaidItemId': prepaidItemId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _PrepaidItemsProductModel2.default;

      return this.apiClient.callApi('/Prepaid/Items/{prepaidItemId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * GET Prepaid/Items/{prepaidItemId}
     * Get one prepaid item for a specific id
     * @param {String} prepaidItemId Prepaid item id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PrepaidItemsProductModel}
     */

  }, {
    key: 'getOne',
    value: function getOne(prepaidItemId) {
      return this.getOneWithHttpInfo(prepaidItemId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return PrepaidItemsApi;
}();

exports.default = PrepaidItemsApi;
},{"../ApiClient":21,"../model/PrepaidItemsList":138,"../model/PrepaidItemsProductModel":139}],40:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _ProductExceptionPayload = require('../model/ProductExceptionPayload');

var _ProductExceptionPayload2 = _interopRequireDefault(_ProductExceptionPayload);

var _SmartDevicesDTO = require('../model/SmartDevicesDTO');

var _SmartDevicesDTO2 = _interopRequireDefault(_SmartDevicesDTO);

var _SmartDevicesDTOPrepaidTid = require('../model/SmartDevicesDTOPrepaidTid');

var _SmartDevicesDTOPrepaidTid2 = _interopRequireDefault(_SmartDevicesDTOPrepaidTid);

var _SmartDevicesDTOSecubaseConfig = require('../model/SmartDevicesDTOSecubaseConfig');

var _SmartDevicesDTOSecubaseConfig2 = _interopRequireDefault(_SmartDevicesDTOSecubaseConfig);

var _SmartDevicesList = require('../model/SmartDevicesList');

var _SmartDevicesList2 = _interopRequireDefault(_SmartDevicesList);

var _SmartDevicesList3 = require('../model/SmartDevicesList1');

var _SmartDevicesList4 = _interopRequireDefault(_SmartDevicesList3);

var _SmartDevicesProductModel = require('../model/SmartDevicesProductModel');

var _SmartDevicesProductModel2 = _interopRequireDefault(_SmartDevicesProductModel);

var _SmartDevicesSecubaseConfig = require('../model/SmartDevicesSecubaseConfig');

var _SmartDevicesSecubaseConfig2 = _interopRequireDefault(_SmartDevicesSecubaseConfig);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* SmartDevices service.
* @module api/SmartDevicesApi
*/
SmartDevicesApi = function () {

  /**
  * Constructs a new SmartDevicesApi. 
  * @alias module:api/SmartDevicesApi
  * @class
  * @param {module:ApiClient} apiClient Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function SmartDevicesApi(apiClient) {
    _classCallCheck(this, SmartDevicesApi);

    this.apiClient = apiClient || _ApiClient2.default.instance;
  }

  /**
   * POST Smart/Devices
   * Create new smart device
   * @param {module:model/SmartDevicesDTO} smartDeviceProperties Smart device properties
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SmartDevicesProductModel} and HTTP response
   */


  _createClass(SmartDevicesApi, [{
    key: 'addDeviceWithHttpInfo',
    value: function addDeviceWithHttpInfo(smartDeviceProperties) {
      var postBody = smartDeviceProperties;

      // verify the required parameter 'smartDeviceProperties' is set
      if (smartDeviceProperties === undefined || smartDeviceProperties === null) {
        throw new Error("Missing the required parameter 'smartDeviceProperties' when calling addDevice");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _SmartDevicesProductModel2.default;

      return this.apiClient.callApi('/Smart/Devices', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Smart/Devices
     * Create new smart device
     * @param {module:model/SmartDevicesDTO} smartDeviceProperties Smart device properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SmartDevicesProductModel}
     */

  }, {
    key: 'addDevice',
    value: function addDevice(smartDeviceProperties) {
      return this.addDeviceWithHttpInfo(smartDeviceProperties).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST Smart/Devices/{smartDeviceId}/CreatePrepaidTid
     * Create prepaid tid
     * @param {String} smartDeviceId Smart device id
     * @param {module:model/SmartDevicesDTOPrepaidTid} prepaidTidProperties Prepaid tid properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SmartDevicesProductModel} and HTTP response
     */

  }, {
    key: 'createPrepaidTidWithHttpInfo',
    value: function createPrepaidTidWithHttpInfo(smartDeviceId, prepaidTidProperties) {
      var postBody = prepaidTidProperties;

      // verify the required parameter 'smartDeviceId' is set
      if (smartDeviceId === undefined || smartDeviceId === null) {
        throw new Error("Missing the required parameter 'smartDeviceId' when calling createPrepaidTid");
      }

      // verify the required parameter 'prepaidTidProperties' is set
      if (prepaidTidProperties === undefined || prepaidTidProperties === null) {
        throw new Error("Missing the required parameter 'prepaidTidProperties' when calling createPrepaidTid");
      }

      var pathParams = {
        'smartDeviceId': smartDeviceId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _SmartDevicesProductModel2.default;

      return this.apiClient.callApi('/Smart/Devices/{smartDeviceId}/CreatePrepaidTid', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Smart/Devices/{smartDeviceId}/CreatePrepaidTid
     * Create prepaid tid
     * @param {String} smartDeviceId Smart device id
     * @param {module:model/SmartDevicesDTOPrepaidTid} prepaidTidProperties Prepaid tid properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SmartDevicesProductModel}
     */

  }, {
    key: 'createPrepaidTid',
    value: function createPrepaidTid(smartDeviceId, prepaidTidProperties) {
      return this.createPrepaidTidWithHttpInfo(smartDeviceId, prepaidTidProperties).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST Smart/Devices/{smartDeviceId}/CreateVirtualDevice
     * Create virtual device
     * @param {String} smartDeviceId Smart device id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SmartDevicesProductModel} and HTTP response
     */

  }, {
    key: 'createVirtualDeviceWithHttpInfo',
    value: function createVirtualDeviceWithHttpInfo(smartDeviceId) {
      var postBody = null;

      // verify the required parameter 'smartDeviceId' is set
      if (smartDeviceId === undefined || smartDeviceId === null) {
        throw new Error("Missing the required parameter 'smartDeviceId' when calling createVirtualDevice");
      }

      var pathParams = {
        'smartDeviceId': smartDeviceId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _SmartDevicesProductModel2.default;

      return this.apiClient.callApi('/Smart/Devices/{smartDeviceId}/CreateVirtualDevice', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Smart/Devices/{smartDeviceId}/CreateVirtualDevice
     * Create virtual device
     * @param {String} smartDeviceId Smart device id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SmartDevicesProductModel}
     */

  }, {
    key: 'createVirtualDevice',
    value: function createVirtualDevice(smartDeviceId) {
      return this.createVirtualDeviceWithHttpInfo(smartDeviceId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * GET Smart/Devices
     * Get a list of smart devices
     * @param {Object} opts Optional parameters
     * @param {Number} opts.count The number of items to return.
     * @param {Number} opts.offset The position within the whole result set to start returning items (First element is at 0).
     * @param {String} opts.fields List of fields to include in the result. Nested properties can be accessed with this notation: prop1.prop2  Example: prop3,prop1.prop2
     * @param {String} opts.q A query string to restrict the returned items to given conditions. The query string must consist of any combination of single expressions in the form property:condition.  *                  A condition may contain:  *                      - wildcard \&quot;*\&quot; for any number of characters  *                      - wildcard \&quot;?\&quot; for one character  *                      - ranges in the form [value TO value]  *  *                  Single expressions may combined by &#39;AND&#39;, &#39;OR&#39;, &#39;NOT&#39; operators and parenthesis &#39;(&#39;, &#39;)&#39; for grouping.  *                  Property names can be nested like \&quot;prop1.prop2\&quot;.  *                  Example: (NOT customer.name:meier*) AND (customer.age:[30 TO 40] OR customer.age:[50 TO 60])  *                  
     * @param {String} opts.sort String with comma separated pairs of field:order (e.g. contact.surname:asc,contact.comapnyname:desc). Result set will be sorted by included fields, in ascending &#39;asc&#39;, or descending &#39;dsc&#39; order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SmartDevicesList} and HTTP response
     */

  }, {
    key: 'getAllWithHttpInfo',
    value: function getAllWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {};
      var queryParams = {
        'count': opts['count'],
        'offset': opts['offset'],
        'fields': opts['fields'],
        'q': opts['q'],
        'sort': opts['sort']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _SmartDevicesList2.default;

      return this.apiClient.callApi('/Smart/Devices', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * GET Smart/Devices
     * Get a list of smart devices
     * @param {Object} opts Optional parameters
     * @param {Number} opts.count The number of items to return.
     * @param {Number} opts.offset The position within the whole result set to start returning items (First element is at 0).
     * @param {String} opts.fields List of fields to include in the result. Nested properties can be accessed with this notation: prop1.prop2  Example: prop3,prop1.prop2
     * @param {String} opts.q A query string to restrict the returned items to given conditions. The query string must consist of any combination of single expressions in the form property:condition.  *                  A condition may contain:  *                      - wildcard \&quot;*\&quot; for any number of characters  *                      - wildcard \&quot;?\&quot; for one character  *                      - ranges in the form [value TO value]  *  *                  Single expressions may combined by &#39;AND&#39;, &#39;OR&#39;, &#39;NOT&#39; operators and parenthesis &#39;(&#39;, &#39;)&#39; for grouping.  *                  Property names can be nested like \&quot;prop1.prop2\&quot;.  *                  Example: (NOT customer.name:meier*) AND (customer.age:[30 TO 40] OR customer.age:[50 TO 60])  *                  
     * @param {String} opts.sort String with comma separated pairs of field:order (e.g. contact.surname:asc,contact.comapnyname:desc). Result set will be sorted by included fields, in ascending &#39;asc&#39;, or descending &#39;dsc&#39; order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SmartDevicesList}
     */

  }, {
    key: 'getAll',
    value: function getAll(opts) {
      return this.getAllWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * GET Smart/Devices/{smartDeviceId}
     * Get one smart device for a specific id
     * @param {String} smartDeviceId Smart device id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SmartDevicesProductModel} and HTTP response
     */

  }, {
    key: 'getOneWithHttpInfo',
    value: function getOneWithHttpInfo(smartDeviceId) {
      var postBody = null;

      // verify the required parameter 'smartDeviceId' is set
      if (smartDeviceId === undefined || smartDeviceId === null) {
        throw new Error("Missing the required parameter 'smartDeviceId' when calling getOne");
      }

      var pathParams = {
        'smartDeviceId': smartDeviceId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _SmartDevicesProductModel2.default;

      return this.apiClient.callApi('/Smart/Devices/{smartDeviceId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * GET Smart/Devices/{smartDeviceId}
     * Get one smart device for a specific id
     * @param {String} smartDeviceId Smart device id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SmartDevicesProductModel}
     */

  }, {
    key: 'getOne',
    value: function getOne(smartDeviceId) {
      return this.getOneWithHttpInfo(smartDeviceId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * GET Smart/Devices/{smartDeviceId}/routing/type/{type}
     * Get single routing
     * @param {String} smartDeviceId Smart device id
     * @param {String} type Payment type
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SmartDevicesList1} and HTTP response
     */

  }, {
    key: 'getRoutingWithHttpInfo',
    value: function getRoutingWithHttpInfo(smartDeviceId, type) {
      var postBody = null;

      // verify the required parameter 'smartDeviceId' is set
      if (smartDeviceId === undefined || smartDeviceId === null) {
        throw new Error("Missing the required parameter 'smartDeviceId' when calling getRouting");
      }

      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getRouting");
      }

      var pathParams = {
        'smartDeviceId': smartDeviceId,
        'type': type
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _SmartDevicesList4.default;

      return this.apiClient.callApi('/Smart/Devices/{smartDeviceId}/routing/type/{type}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * GET Smart/Devices/{smartDeviceId}/routing/type/{type}
     * Get single routing
     * @param {String} smartDeviceId Smart device id
     * @param {String} type Payment type
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SmartDevicesList1}
     */

  }, {
    key: 'getRouting',
    value: function getRouting(smartDeviceId, type) {
      return this.getRoutingWithHttpInfo(smartDeviceId, type).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST Smart/Devices/{smartDeviceId}/GetSecubaseConfig
     * Get secubase config
     * @param {String} smartDeviceId Smart device id
     * @param {module:model/SmartDevicesDTOSecubaseConfig} secubaseConfigProperties Secubase config properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SmartDevicesSecubaseConfig} and HTTP response
     */

  }, {
    key: 'getSecubaseConfigWithHttpInfo',
    value: function getSecubaseConfigWithHttpInfo(smartDeviceId, secubaseConfigProperties) {
      var postBody = secubaseConfigProperties;

      // verify the required parameter 'smartDeviceId' is set
      if (smartDeviceId === undefined || smartDeviceId === null) {
        throw new Error("Missing the required parameter 'smartDeviceId' when calling getSecubaseConfig");
      }

      // verify the required parameter 'secubaseConfigProperties' is set
      if (secubaseConfigProperties === undefined || secubaseConfigProperties === null) {
        throw new Error("Missing the required parameter 'secubaseConfigProperties' when calling getSecubaseConfig");
      }

      var pathParams = {
        'smartDeviceId': smartDeviceId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _SmartDevicesSecubaseConfig2.default;

      return this.apiClient.callApi('/Smart/Devices/{smartDeviceId}/GetSecubaseConfig', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Smart/Devices/{smartDeviceId}/GetSecubaseConfig
     * Get secubase config
     * @param {String} smartDeviceId Smart device id
     * @param {module:model/SmartDevicesDTOSecubaseConfig} secubaseConfigProperties Secubase config properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SmartDevicesSecubaseConfig}
     */

  }, {
    key: 'getSecubaseConfig',
    value: function getSecubaseConfig(smartDeviceId, secubaseConfigProperties) {
      return this.getSecubaseConfigWithHttpInfo(smartDeviceId, secubaseConfigProperties).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * PUT Smart/Devices/{smartDeviceId}
     * Update smart device
     * @param {String} smartDeviceId Smart device id
     * @param {module:model/SmartDevicesDTO} smartDeviceProperties Smart device properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SmartDevicesProductModel} and HTTP response
     */

  }, {
    key: 'updateDeviceWithHttpInfo',
    value: function updateDeviceWithHttpInfo(smartDeviceId, smartDeviceProperties) {
      var postBody = smartDeviceProperties;

      // verify the required parameter 'smartDeviceId' is set
      if (smartDeviceId === undefined || smartDeviceId === null) {
        throw new Error("Missing the required parameter 'smartDeviceId' when calling updateDevice");
      }

      // verify the required parameter 'smartDeviceProperties' is set
      if (smartDeviceProperties === undefined || smartDeviceProperties === null) {
        throw new Error("Missing the required parameter 'smartDeviceProperties' when calling updateDevice");
      }

      var pathParams = {
        'smartDeviceId': smartDeviceId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _SmartDevicesProductModel2.default;

      return this.apiClient.callApi('/Smart/Devices/{smartDeviceId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * PUT Smart/Devices/{smartDeviceId}
     * Update smart device
     * @param {String} smartDeviceId Smart device id
     * @param {module:model/SmartDevicesDTO} smartDeviceProperties Smart device properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SmartDevicesProductModel}
     */

  }, {
    key: 'updateDevice',
    value: function updateDevice(smartDeviceId, smartDeviceProperties) {
      return this.updateDeviceWithHttpInfo(smartDeviceId, smartDeviceProperties).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return SmartDevicesApi;
}();

exports.default = SmartDevicesApi;
},{"../ApiClient":21,"../model/ProductExceptionPayload":143,"../model/SmartDevicesDTO":170,"../model/SmartDevicesDTOPrepaidTid":171,"../model/SmartDevicesDTOSecubaseConfig":172,"../model/SmartDevicesList":174,"../model/SmartDevicesList1":175,"../model/SmartDevicesProductModel":176,"../model/SmartDevicesSecubaseConfig":178}],41:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _ProductExceptionPayload = require('../model/ProductExceptionPayload');

var _ProductExceptionPayload2 = _interopRequireDefault(_ProductExceptionPayload);

var _SmartTransactionsDTO = require('../model/SmartTransactionsDTO');

var _SmartTransactionsDTO2 = _interopRequireDefault(_SmartTransactionsDTO);

var _SmartTransactionsList = require('../model/SmartTransactionsList');

var _SmartTransactionsList2 = _interopRequireDefault(_SmartTransactionsList);

var _SmartTransactionsPreTransactionModel = require('../model/SmartTransactionsPreTransactionModel');

var _SmartTransactionsPreTransactionModel2 = _interopRequireDefault(_SmartTransactionsPreTransactionModel);

var _SmartTransactionsProductModel = require('../model/SmartTransactionsProductModel');

var _SmartTransactionsProductModel2 = _interopRequireDefault(_SmartTransactionsProductModel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* SmartTransactions service.
* @module api/SmartTransactionsApi
*/
SmartTransactionsApi = function () {

  /**
  * Constructs a new SmartTransactionsApi. 
  * @alias module:api/SmartTransactionsApi
  * @class
  * @param {module:ApiClient} apiClient Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function SmartTransactionsApi(apiClient) {
    _classCallCheck(this, SmartTransactionsApi);

    this.apiClient = apiClient || _ApiClient2.default.instance;
  }

  /**
   * POST Smart/Transactions
   * Create new smart transaction
   * @param {module:model/SmartTransactionsDTO} smartTransactionProperties Smart transaction properties
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SmartTransactionsProductModel} and HTTP response
   */


  _createClass(SmartTransactionsApi, [{
    key: 'addTransactionWithHttpInfo',
    value: function addTransactionWithHttpInfo(smartTransactionProperties) {
      var postBody = smartTransactionProperties;

      // verify the required parameter 'smartTransactionProperties' is set
      if (smartTransactionProperties === undefined || smartTransactionProperties === null) {
        throw new Error("Missing the required parameter 'smartTransactionProperties' when calling addTransaction");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _SmartTransactionsProductModel2.default;

      return this.apiClient.callApi('/Smart/Transactions', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Smart/Transactions
     * Create new smart transaction
     * @param {module:model/SmartTransactionsDTO} smartTransactionProperties Smart transaction properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SmartTransactionsProductModel}
     */

  }, {
    key: 'addTransaction',
    value: function addTransaction(smartTransactionProperties) {
      return this.addTransactionWithHttpInfo(smartTransactionProperties).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST Smart/Transactions/{smartTransactionId}/cancel
     * Method to cancel the transaction with given idn
     * @param {String} smartTransactionId Smart transaction id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SmartTransactionsProductModel} and HTTP response
     */

  }, {
    key: 'cancelTransactionWithHttpInfo',
    value: function cancelTransactionWithHttpInfo(smartTransactionId) {
      var postBody = null;

      // verify the required parameter 'smartTransactionId' is set
      if (smartTransactionId === undefined || smartTransactionId === null) {
        throw new Error("Missing the required parameter 'smartTransactionId' when calling cancelTransaction");
      }

      var pathParams = {
        'smartTransactionId': smartTransactionId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _SmartTransactionsProductModel2.default;

      return this.apiClient.callApi('/Smart/Transactions/{smartTransactionId}/cancel', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Smart/Transactions/{smartTransactionId}/cancel
     * Method to cancel the transaction with given idn
     * @param {String} smartTransactionId Smart transaction id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SmartTransactionsProductModel}
     */

  }, {
    key: 'cancelTransaction',
    value: function cancelTransaction(smartTransactionId) {
      return this.cancelTransactionWithHttpInfo(smartTransactionId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST Smart/Transactions/{smartTransactionId}/canceltrx
     * Starts Cancel &#39;Cash&#39; transaction on Terminal with &#39;receipt_number&#39; (&#39;Beleg-Nr.&#39;)
     * @param {String} smartTransactionId Smart transaction id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SmartTransactionsProductModel} and HTTP response
     */

  }, {
    key: 'cancelTrxWithHttpInfo',
    value: function cancelTrxWithHttpInfo(smartTransactionId) {
      var postBody = null;

      // verify the required parameter 'smartTransactionId' is set
      if (smartTransactionId === undefined || smartTransactionId === null) {
        throw new Error("Missing the required parameter 'smartTransactionId' when calling cancelTrx");
      }

      var pathParams = {
        'smartTransactionId': smartTransactionId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _SmartTransactionsProductModel2.default;

      return this.apiClient.callApi('/Smart/Transactions/{smartTransactionId}/canceltrx', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Smart/Transactions/{smartTransactionId}/canceltrx
     * Starts Cancel &#39;Cash&#39; transaction on Terminal with &#39;receipt_number&#39; (&#39;Beleg-Nr.&#39;)
     * @param {String} smartTransactionId Smart transaction id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SmartTransactionsProductModel}
     */

  }, {
    key: 'cancelTrx',
    value: function cancelTrx(smartTransactionId) {
      return this.cancelTrxWithHttpInfo(smartTransactionId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST Smart/Transactions/{smartDeviceId}/diagnosis
     * Starts extended Diagnose on Terminal, this method is normally called by SDK&#39;s from cash register
     * @param {String} smartDeviceId Smart device id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SmartTransactionsProductModel} and HTTP response
     */

  }, {
    key: 'diagnoseWithHttpInfo',
    value: function diagnoseWithHttpInfo(smartDeviceId) {
      var postBody = null;

      // verify the required parameter 'smartDeviceId' is set
      if (smartDeviceId === undefined || smartDeviceId === null) {
        throw new Error("Missing the required parameter 'smartDeviceId' when calling diagnose");
      }

      var pathParams = {
        'smartDeviceId': smartDeviceId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _SmartTransactionsProductModel2.default;

      return this.apiClient.callApi('/Smart/Transactions/{smartDeviceId}/diagnosis', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Smart/Transactions/{smartDeviceId}/diagnosis
     * Starts extended Diagnose on Terminal, this method is normally called by SDK&#39;s from cash register
     * @param {String} smartDeviceId Smart device id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SmartTransactionsProductModel}
     */

  }, {
    key: 'diagnose',
    value: function diagnose(smartDeviceId) {
      return this.diagnoseWithHttpInfo(smartDeviceId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * GET Smart/Transactions
     * Get a list of smart transactions
     * @param {Object} opts Optional parameters
     * @param {Number} opts.count The number of items to return.
     * @param {Number} opts.offset The position within the whole result set to start returning items (First element is at 0).
     * @param {String} opts.fields List of fields to include in the result. Nested properties can be accessed with this notation: prop1.prop2  Example: prop3,prop1.prop2
     * @param {String} opts.q A query string to restrict the returned items to given conditions. The query string must consist of any combination of single expressions in the form property:condition.  *                  A condition may contain:  *                      - wildcard \&quot;*\&quot; for any number of characters  *                      - wildcard \&quot;?\&quot; for one character  *                      - ranges in the form [value TO value]  *  *                  Single expressions may combined by &#39;AND&#39;, &#39;OR&#39;, &#39;NOT&#39; operators and parenthesis &#39;(&#39;, &#39;)&#39; for grouping.  *                  Property names can be nested like \&quot;prop1.prop2\&quot;.  *                  Example: (NOT customer.name:meier*) AND (customer.age:[30 TO 40] OR customer.age:[50 TO 60])  *                  
     * @param {String} opts.sort String with comma separated pairs of field:order (e.g. contact.surname:asc,contact.comapnyname:desc). Result set will be sorted by included fields, in ascending &#39;asc&#39;, or descending &#39;dsc&#39; order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SmartTransactionsList} and HTTP response
     */

  }, {
    key: 'getAllWithHttpInfo',
    value: function getAllWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {};
      var queryParams = {
        'count': opts['count'],
        'offset': opts['offset'],
        'fields': opts['fields'],
        'q': opts['q'],
        'sort': opts['sort']
      };
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _SmartTransactionsList2.default;

      return this.apiClient.callApi('/Smart/Transactions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * GET Smart/Transactions
     * Get a list of smart transactions
     * @param {Object} opts Optional parameters
     * @param {Number} opts.count The number of items to return.
     * @param {Number} opts.offset The position within the whole result set to start returning items (First element is at 0).
     * @param {String} opts.fields List of fields to include in the result. Nested properties can be accessed with this notation: prop1.prop2  Example: prop3,prop1.prop2
     * @param {String} opts.q A query string to restrict the returned items to given conditions. The query string must consist of any combination of single expressions in the form property:condition.  *                  A condition may contain:  *                      - wildcard \&quot;*\&quot; for any number of characters  *                      - wildcard \&quot;?\&quot; for one character  *                      - ranges in the form [value TO value]  *  *                  Single expressions may combined by &#39;AND&#39;, &#39;OR&#39;, &#39;NOT&#39; operators and parenthesis &#39;(&#39;, &#39;)&#39; for grouping.  *                  Property names can be nested like \&quot;prop1.prop2\&quot;.  *                  Example: (NOT customer.name:meier*) AND (customer.age:[30 TO 40] OR customer.age:[50 TO 60])  *                  
     * @param {String} opts.sort String with comma separated pairs of field:order (e.g. contact.surname:asc,contact.comapnyname:desc). Result set will be sorted by included fields, in ascending &#39;asc&#39;, or descending &#39;dsc&#39; order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SmartTransactionsList}
     */

  }, {
    key: 'getAll',
    value: function getAll(opts) {
      return this.getAllWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * GET Smart/Transactions/{smartTransactionId}
     * Get one smart transaction for a specific id
     * @param {String} smartTransactionId Smart transaction id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SmartTransactionsProductModel} and HTTP response
     */

  }, {
    key: 'getOneWithHttpInfo',
    value: function getOneWithHttpInfo(smartTransactionId) {
      var postBody = null;

      // verify the required parameter 'smartTransactionId' is set
      if (smartTransactionId === undefined || smartTransactionId === null) {
        throw new Error("Missing the required parameter 'smartTransactionId' when calling getOne");
      }

      var pathParams = {
        'smartTransactionId': smartTransactionId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _SmartTransactionsProductModel2.default;

      return this.apiClient.callApi('/Smart/Transactions/{smartTransactionId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * GET Smart/Transactions/{smartTransactionId}
     * Get one smart transaction for a specific id
     * @param {String} smartTransactionId Smart transaction id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SmartTransactionsProductModel}
     */

  }, {
    key: 'getOne',
    value: function getOne(smartTransactionId) {
      return this.getOneWithHttpInfo(smartTransactionId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST Smart/Transactions/{smartTransactionId}/PreTransaction
     * Function that checks balance of merchantcard from ident and if possible creates bonus product items for basket
     * @param {String} smartTransactionId Smart transaction id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SmartTransactionsPreTransactionModel} and HTTP response
     */

  }, {
    key: 'preTransactionWithHttpInfo',
    value: function preTransactionWithHttpInfo(smartTransactionId) {
      var postBody = null;

      // verify the required parameter 'smartTransactionId' is set
      if (smartTransactionId === undefined || smartTransactionId === null) {
        throw new Error("Missing the required parameter 'smartTransactionId' when calling preTransaction");
      }

      var pathParams = {
        'smartTransactionId': smartTransactionId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _SmartTransactionsPreTransactionModel2.default;

      return this.apiClient.callApi('/Smart/Transactions/{smartTransactionId}/PreTransaction', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Smart/Transactions/{smartTransactionId}/PreTransaction
     * Function that checks balance of merchantcard from ident and if possible creates bonus product items for basket
     * @param {String} smartTransactionId Smart transaction id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SmartTransactionsPreTransactionModel}
     */

  }, {
    key: 'preTransaction',
    value: function preTransaction(smartTransactionId) {
      return this.preTransactionWithHttpInfo(smartTransactionId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST Smart/Transactions/{smartDeviceId}/endOfDay
     * Starts End of Day Report on Terminal, this method is normally called by SDK&#39;s from cash register
     * @param {String} smartDeviceId Smart device id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SmartTransactionsProductModel} and HTTP response
     */

  }, {
    key: 'startEndOfDayReportWithHttpInfo',
    value: function startEndOfDayReportWithHttpInfo(smartDeviceId) {
      var postBody = null;

      // verify the required parameter 'smartDeviceId' is set
      if (smartDeviceId === undefined || smartDeviceId === null) {
        throw new Error("Missing the required parameter 'smartDeviceId' when calling startEndOfDayReport");
      }

      var pathParams = {
        'smartDeviceId': smartDeviceId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _SmartTransactionsProductModel2.default;

      return this.apiClient.callApi('/Smart/Transactions/{smartDeviceId}/endOfDay', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Smart/Transactions/{smartDeviceId}/endOfDay
     * Starts End of Day Report on Terminal, this method is normally called by SDK&#39;s from cash register
     * @param {String} smartDeviceId Smart device id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SmartTransactionsProductModel}
     */

  }, {
    key: 'startEndOfDayReport',
    value: function startEndOfDayReport(smartDeviceId) {
      return this.startEndOfDayReportWithHttpInfo(smartDeviceId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * POST Smart/Transactions/{smartTransactionId}/start/{paymentMethod}
     * Start smart transaction with given payment method
     * @param {String} smartTransactionId Smart transaction id
     * @param {String} paymentMethod Payment method
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SmartTransactionsProductModel} and HTTP response
     */

  }, {
    key: 'startTransactionWithHttpInfo',
    value: function startTransactionWithHttpInfo(smartTransactionId, paymentMethod) {
      var postBody = null;

      // verify the required parameter 'smartTransactionId' is set
      if (smartTransactionId === undefined || smartTransactionId === null) {
        throw new Error("Missing the required parameter 'smartTransactionId' when calling startTransaction");
      }

      // verify the required parameter 'paymentMethod' is set
      if (paymentMethod === undefined || paymentMethod === null) {
        throw new Error("Missing the required parameter 'paymentMethod' when calling startTransaction");
      }

      var pathParams = {
        'smartTransactionId': smartTransactionId,
        'paymentMethod': paymentMethod
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _SmartTransactionsProductModel2.default;

      return this.apiClient.callApi('/Smart/Transactions/{smartTransactionId}/start/{paymentMethod}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * POST Smart/Transactions/{smartTransactionId}/start/{paymentMethod}
     * Start smart transaction with given payment method
     * @param {String} smartTransactionId Smart transaction id
     * @param {String} paymentMethod Payment method
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SmartTransactionsProductModel}
     */

  }, {
    key: 'startTransaction',
    value: function startTransaction(smartTransactionId, paymentMethod) {
      return this.startTransactionWithHttpInfo(smartTransactionId, paymentMethod).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * PUT Smart/Transactions/{smartTransactionId}
     * Update smart transaction
     * @param {String} smartTransactionId Smart transaction id
     * @param {module:model/SmartTransactionsDTO} smartTransactionProperties Smart transaction properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SmartTransactionsProductModel} and HTTP response
     */

  }, {
    key: 'updateTransactionWithHttpInfo',
    value: function updateTransactionWithHttpInfo(smartTransactionId, smartTransactionProperties) {
      var postBody = smartTransactionProperties;

      // verify the required parameter 'smartTransactionId' is set
      if (smartTransactionId === undefined || smartTransactionId === null) {
        throw new Error("Missing the required parameter 'smartTransactionId' when calling updateTransaction");
      }

      // verify the required parameter 'smartTransactionProperties' is set
      if (smartTransactionProperties === undefined || smartTransactionProperties === null) {
        throw new Error("Missing the required parameter 'smartTransactionProperties' when calling updateTransaction");
      }

      var pathParams = {
        'smartTransactionId': smartTransactionId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['oauth_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = _SmartTransactionsProductModel2.default;

      return this.apiClient.callApi('/Smart/Transactions/{smartTransactionId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
    }

    /**
     * PUT Smart/Transactions/{smartTransactionId}
     * Update smart transaction
     * @param {String} smartTransactionId Smart transaction id
     * @param {module:model/SmartTransactionsDTO} smartTransactionProperties Smart transaction properties
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SmartTransactionsProductModel}
     */

  }, {
    key: 'updateTransaction',
    value: function updateTransaction(smartTransactionId, smartTransactionProperties) {
      return this.updateTransactionWithHttpInfo(smartTransactionId, smartTransactionProperties).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);

  return SmartTransactionsApi;
}();

exports.default = SmartTransactionsApi;
},{"../ApiClient":21,"../model/ProductExceptionPayload":143,"../model/SmartTransactionsDTO":188,"../model/SmartTransactionsList":190,"../model/SmartTransactionsPreTransactionModel":193,"../model/SmartTransactionsProductModel":194}],42:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

AuthenticationCredentials = function () {
    function AuthenticationCredentials() {
        _classCallCheck(this, AuthenticationCredentials);
    }

    _createClass(AuthenticationCredentials, [{
        key: "getCredentials",
        value: function getCredentials() {
            return this.credentials;
        }
    }, {
        key: "getUniqueKey",
        value: function getUniqueKey() {}
    }]);

    return AuthenticationCredentials;
}();

exports.default = AuthenticationCredentials;


AuthenticationCredentials.credentials = {};
},{}],43:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Authenticator service.
 * @module authentication/Authenticator
 */
Authenticator = function () {
  function Authenticator(credentials, apiClient) {
    _classCallCheck(this, Authenticator);

    this.credentials = credentials;
    this.apiClient = apiClient || _ApiClient2.default.instance;
  }

  _createClass(Authenticator, [{
    key: 'getToken',
    value: function getToken() {
          this.apiClient.basePath = 'https://connect-testing.secupay-ag.de/';
          return this.apiClient.callApi('oauth/token', //path
          'POST', //httpMethod
          {}, //pathParams
          {}, //queryParams
          { 'Content-Type': 'application/json' }, //headerParams
          {}, //formParams
          this.credentials.getCredentials(), //bodyParam
          [], //authNames
          [], //contentTypes
          [] //accepts
          //returnType
          ).then(function (response) {
            return response.response.body;
      }).catch(function (err) {
        console.log(err);
      });
    }
  }]);

  return Authenticator;
}();

exports.default = Authenticator;
},{"../ApiClient":21}],44:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _md = require('md5');

var _md2 = _interopRequireDefault(_md);

var _AuthenticationCredentials = require('./AuthenticationCredentials');

var _AuthenticationCredentials2 = _interopRequireDefault(_AuthenticationCredentials);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * OAuthApplicationUserCredentials service.
 * @module authentication/OAuthApplicationUserCredentials
 */

OAuthApplicationUserCredentials = function (_AuthenticationCreden) {
    _inherits(OAuthApplicationUserCredentials, _AuthenticationCreden);

    function OAuthApplicationUserCredentials() {
        _classCallCheck(this, OAuthApplicationUserCredentials);

        return _possibleConstructorReturn(this, (OAuthApplicationUserCredentials.__proto__ || Object.getPrototypeOf(OAuthApplicationUserCredentials)).apply(this, arguments));
    }

    _createClass(OAuthApplicationUserCredentials, [{
        key: 'getUniqueKey',
        value: function getUniqueKey() {
            return (0, _md2.default)(this.credentials.grant_type + this.credentials.client_id + this.credentials.username + this.credentials.device + this.credentials['deviceinfo[name]']);
        }
    }], [{
        key: 'from',
        value: function from(clientId, clientSecret, username, password, device, deviceName) {
            var credentials = new OAuthApplicationUserCredentials();
            credentials.credentials = {
                'grant_type': 'appuser',
                'client_id': clientId,
                'client_secret': clientSecret,
                'username': username,
                'password': password,
                'device': device,
                'deviceinfo[name]': deviceName
            };

            return credentials;
        }
    }]);

    return OAuthApplicationUserCredentials;
}(_AuthenticationCredentials2.default);

exports.default = OAuthApplicationUserCredentials;
},{"./AuthenticationCredentials":42,"md5":14}],45:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _md = require('md5');

var _md2 = _interopRequireDefault(_md);

var _AuthenticationCredentials = require('./AuthenticationCredentials');

var _AuthenticationCredentials2 = _interopRequireDefault(_AuthenticationCredentials);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * OAuthClientCredentials service.
 * @module authentication/OAuthClientCredentials
 */

OAuthClientCredentials = function (_AuthenticationCreden) {
    _inherits(OAuthClientCredentials, _AuthenticationCreden);

    function OAuthClientCredentials() {
        _classCallCheck(this, OAuthClientCredentials);

        return _possibleConstructorReturn(this, (OAuthClientCredentials.__proto__ || Object.getPrototypeOf(OAuthClientCredentials)).apply(this, arguments));
    }

    _createClass(OAuthClientCredentials, [{
        key: 'getUniqueKey',
        value: function getUniqueKey() {
            return (0, _md2.default)(this.credentials.grant_type + this.credentials.client_id);
        }
    }], [{
        key: 'from',
        value: function from(clientId, clientSecret) {
            var credentials = new OAuthClientCredentials();
            credentials.credentials = {
                'grant_type': 'client_credentials',
                'client_id': clientId,
                'client_secret': clientSecret
            };

            return credentials;
        }
    }]);

    return OAuthClientCredentials;
}(_AuthenticationCredentials2.default);

exports.default = OAuthClientCredentials;
},{"./AuthenticationCredentials":42,"md5":14}],46:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _md = require('md5');

var _md2 = _interopRequireDefault(_md);

var _AuthenticationCredentials = require('./AuthenticationCredentials');

var _AuthenticationCredentials2 = _interopRequireDefault(_AuthenticationCredentials);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * OAuthDeviceCredentials service.
 * @module authentication/OAuthDeviceCredentials
 */

OAuthDeviceCredentials = function (_AuthenticationCreden) {
    _inherits(OAuthDeviceCredentials, _AuthenticationCreden);

    function OAuthDeviceCredentials() {
        _classCallCheck(this, OAuthDeviceCredentials);

        return _possibleConstructorReturn(this, (OAuthDeviceCredentials.__proto__ || Object.getPrototypeOf(OAuthDeviceCredentials)).apply(this, arguments));
    }

    _createClass(OAuthDeviceCredentials, [{
        key: 'getUniqueKey',
        value: function getUniqueKey() {
            return (0, _md2.default)(this.credentials.grant_type + this.credentials.client_id + this.credentials.uuid);
        }
    }], [{
        key: 'from',
        value: function from(clientId, clientSecret, deviceUuid) {
            var credentials = new OAuthDeviceCredentials();
            credentials.credentials = {
                'grant_type': 'device',
                'client_id': clientId,
                'client_secret': clientSecret,
                'uuid': deviceUuid
            };
            return credentials;
        }
    }]);

    return OAuthDeviceCredentials;
}(_AuthenticationCredentials2.default);

exports.default = OAuthDeviceCredentials;
},{"./AuthenticationCredentials":42,"md5":14}],47:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _SDKCache2 = require('./SDKCache');

var _SDKCache3 = _interopRequireDefault(_SDKCache2);

var _fs = require('fs');

var fs = _interopRequireWildcard(_fs);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FileCache = function (_SDKCache) {
  _inherits(FileCache, _SDKCache);

  function FileCache() {
    _classCallCheck(this, FileCache);

    var _this = _possibleConstructorReturn(this, (FileCache.__proto__ || Object.getPrototypeOf(FileCache)).call(this));

    _this.dirName = 'tmp/';
    return _this;
  }

  _createClass(FileCache, [{
    key: 'exists',
    value: function exists(key) {
      var _this2 = this;

      return new Promise(function (resolve) {
        var path = _this2.dirName + key;

        fs.exists(path, function (exists) {
          if (exists) {
            _this2.readFromFile(key).then(function (item) {
              var now = new Date();
              now = Math.round(now.getTime() / 1000);

              var createdAt = new Date(item.createdAt);
              createdAt = Math.round(createdAt.getTime() / 1000);

              var difference = now - createdAt;

              if (item.expires_in - 30 > difference) {
                resolve(true);
              } else {
                resolve(false);
              }
            }).catch(function (err) {
              console.log(err);
            });
          } else {
            resolve(false);
          }
        });
      });
    }
  }, {
    key: 'setItem',
    value: function setItem(key, value) {
      var item = value;
      Object.assign(item, { createdAt: new Date() });
      this.saveToFile(key, item);
    }
  }, {
    key: 'getItem',
    value: function getItem(key) {
      return this.readFromFile(key).then(function (item) {
        return item;
      }).catch(function (err) {
        console.log(err);
      });
    }
  }, {
    key: 'saveToFile',
    value: function saveToFile(fileName, content) {
      var _this3 = this;

      fs.exists(this.dirName, function (exists) {
        if (!exists) {
          fs.mkdir(_this3.dirName, function (err) {
            if (err) console.log(err);
          });
        }

        var path = _this3.dirName + fileName;

        fs.writeFile(path, JSON.stringify(content), function (err) {
          if (err) console.log(err);
        });
      });
    }
  }, {
    key: 'readFromFile',
    value: function readFromFile(fileName) {
      var _this4 = this;

      return new Promise(function (resolve, reject) {
        var path = _this4.dirName + fileName;

        fs.exists(path, function (exists) {
          if (!exists) reject(new Error('File from ' + path + " doesn't exist!"));

          fs.readFile(path, function (err, item) {
            if (err) reject(new Error('Problem with reading file!'));

            item = JSON.parse(item);
            resolve(item);
          });
        });
      });
    }
  }]);

  return FileCache;
}(_SDKCache3.default);

exports.default = FileCache;
},{"./SDKCache":48,"fs":3}],48:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

SDKCache = function () {
  function SDKCache() {
    _classCallCheck(this, SDKCache);
  }

  /**
   * This function checks whether key exists.
   * If key exists and isn't expire, then returns true in other case returns false.
   *
   * @param key
   * @returns {boolean}
   */


  _createClass(SDKCache, [{
    key: "exists",
    value: function exists(key) {
      return false;
    }

    /**
     * This function returns cache item.
     *
     * @param key
     */

  }, {
    key: "getItem",
    value: function getItem(key) {}

    /**
     * This function sets cache item.
     *
     * @param key
     * @param value
     */

  }, {
    key: "setItem",
    value: function setItem(key, value) {}
  }]);

  return SDKCache;
}();

exports.default = SDKCache;
},{}],49:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SocketProvider = exports.NodeSocket = exports.BrowserSocket = exports.Stomp = exports.Frame = exports.FrameCommands = exports.Environments = exports.StompSmartTransactionsApi = exports.StompClient = exports.SmartTransactionsApi = exports.SmartDevicesApi = exports.PrepaidItemsApi = exports.PaymentTransactionsApi = exports.PaymentSecupayPrepaysApi = exports.PaymentSecupayInvoicesApi = exports.PaymentSecupayDebitsApi = exports.PaymentSecupayCreditcardsApi = exports.PaymentCustomersApi = exports.PaymentContractsApi = exports.PaymentContainersApi = exports.LoyaltyStoregroupsApi = exports.LoyaltySalesApi = exports.LoyaltyMerchantcardsApi = exports.LoyaltyCustomersApi = exports.LoyaltyCardsApi = exports.LoyaltyCardgroupsApi = exports.GeneralStoresApi = exports.GeneralMerchantsApi = exports.DocumentUploadsApi = exports.ReceiptTypeValue = exports.LoyaltyMerchantcardsProductWithReceiptModel = exports.LoyaltyMerchantcardsDTONewPasscode = exports.DocumentUploadsProductModel = exports.VirtualTerminalData = exports.Store = exports.SmartTransactionsReceiptValue = exports.SmartTransactionsReceipt = exports.SmartTransactionsProductModel = exports.SmartTransactionsPreTransactionModel = exports.SmartTransactionsPickupOptions = exports.SmartTransactionsMerchant = exports.SmartTransactionsList = exports.SmartTransactionsIdent = exports.SmartTransactionsDTO = exports.SmartTransactionsCheckin = exports.SmartTransactionsBonusProducts = exports.SmartTransactionsBasketText = exports.SmartTransactionsBasketProductGroup = exports.SmartTransactionsBasketProduct = exports.SmartTransactionsBasketInfo = exports.SmartTransactionsBasket = exports.SmartDevicesSecubaseConfigLoggingFileNet = exports.SmartDevicesSecubaseConfigLogging = exports.SmartDevicesSecubaseConfig = exports.SmartDevicesProducts = exports.SmartDevicesProductModel = exports.SmartDevicesList1 = exports.SmartDevicesList = exports.SmartDevicesDevice = exports.SmartDevicesDTOSecubaseConfig = exports.SmartDevicesDTOPrepaidTid = exports.SmartDevicesDTO = exports.SmartDeviceProductsPrepaid = exports.SmartDeviceProductsEnabled = exports.SecupayTransactionUpdateBasketDTO = exports.SecupayTransactionSetShippingInformationDTO = exports.SecupayTransactionReverseAccrualDTO = exports.SecupayTransactionProductModelUsedPaymentInstrument = exports.SecupayTransactionProductModelTransferAccount = exports.SecupayTransactionProductModelRedirectUrl = exports.SecupayTransactionProductModel = exports.SecupayTransactionProductDTOSubscription = exports.SecupayTransactionProductDTORedirectUrl = exports.SecupayTransactionProductDTOOptData = exports.SecupayTransactionProductDTOExperience = exports.SecupayTransactionProductDTO = exports.SecupayTransactionExternalInvoicePdfDocument = exports.SecupayTransactionExternalInvoicePdf = exports.SecupayTransactionDTOExternalInvoicePdf = exports.SecupayTransactionCaptureDTO = exports.SecupayTransactionCancelDTO = exports.SecupaySubTransactionProductModel = exports.SecupayBasketItem = exports.ReceiptValue = exports.ReceiptType = undefined;
exports.ProductInstanceUID = exports.ProductInstanceID = exports.ProductExceptionPayload = exports.PrepaidSalesSmartDevice = exports.PrepaidSalesProductModel = exports.PrepaidSalesItem = exports.PrepaidItemsProductModel = exports.PrepaidItemsList = exports.PaymentTransactionsShippingUrl = exports.PaymentTransactionsProductModelMerchant = exports.PaymentTransactionsProductModelDetails = exports.PaymentTransactionsProductModelCustomer = exports.PaymentTransactionsProductModel = exports.PaymentTransactionsList = exports.PaymentTransactionsCancelList = exports.PaymentInformation = exports.PaymentCustomersProductModel = exports.PaymentCustomersList = exports.PaymentCustomersDTO = exports.PaymentContractsRequestIdResult = exports.PaymentContractsProductModel = exports.PaymentContractsList = exports.PaymentContractsDTORequestId = exports.PaymentContractsDTOIFrameOpts = exports.PaymentContractsDTOClone = exports.PaymentContractsDTO = exports.PaymentContainersProductModel = exports.PaymentContainersList = exports.PaymentContainersDTOPrivate = exports.PaymentContainersDTOCustomer = exports.PaymentContainersDTO = exports.PaymentContainerMandate = exports.ParentModel = exports.OpenHours = exports.LoyaltyStoregroupsProductModel = exports.LoyaltyStoregroupsList = exports.LoyaltyStoregroupsDTOStoresAddressComponents = exports.LoyaltyStoregroupsDTO = exports.LoyaltyMerchantcardsValidateMerchantCard = exports.LoyaltyMerchantcardsProductModel = exports.LoyaltyMerchantcardsList = exports.LoyaltyMerchantcardsDTOValidateMerchantCard = exports.LoyaltyMerchantcardsDTOTransaction = exports.LoyaltyMerchantcardsDTOResetPasscode = exports.LoyaltyMerchantcardsDTOPaymentContainer = exports.LoyaltyMerchantcardsDTOLock = exports.LoyaltyMerchantcardsDTOCsc = exports.LoyaltyMerchantcardsDTOCheckPasscode = exports.LoyaltyMerchantcardsDTOCardsAmount = exports.LoyaltyMerchantcardsDTO = exports.LoyaltyDTOStore = exports.LoyaltyDTOMerchant = exports.LoyaltyCustomersRemoved = exports.LoyaltyCustomersProductModel = exports.LoyaltyCustomersPaymentContainerModel = exports.LoyaltyCustomersList = exports.LoyaltyCustomersDTO = exports.LoyaltyCustomersContactDTO = exports.LoyaltyCardsProductModel = exports.LoyaltyCardsList = exports.LoyaltyCardsDTOAccount = exports.LoyaltyCardgroupsProductModel = exports.LoyaltyCardgroupsList = exports.LoyaltyCardgroupsDTOMerchant = exports.LoyaltyCardgroupsDTOCheckPasscodeEnabled = exports.LoyaltyCardgroupsDTO = exports.ItemGroup = exports.InvitedBy = exports.GeoAddressGeometry = exports.GeoAddress = exports.GeneralStoresProductModel = exports.GeneralStoresList = exports.GeneralStoresDTOType = exports.GeneralStoresDTOReason = exports.GeneralStoresDTO = exports.GeneralMerchantsUser = exports.GeneralMerchantsUrls = exports.GeneralMerchantsProductModel = exports.GeneralMerchantsList = exports.GeneralMerchantsLegalDetails = exports.GeneralMerchantsDTO = exports.GeneralMerchantsCheckoutOptionsShipping = exports.GeneralMerchantsCheckoutOptionsCollectionSmartDevices = exports.GeneralMerchantsCheckoutOptionsCollection = exports.GeneralMerchantsCheckoutOptions = exports.DocumentUploadsDTOContent = exports.DocumentUploadsBaseProductModel = exports.DayTime = exports.Contact = exports.BankAccountDescriptor = exports.AssignedBy = exports.AddressComponents = exports.Address = exports.FileCache = exports.SDKCache = exports.OAuthDeviceCredentials = exports.OAuthClientCredentials = exports.OAuthApplicationUserCredentials = exports.Authenticator = exports.ApiClient = undefined;

var _ApiClient = require('./ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _Authenticator = require('./authentication/Authenticator');

var _Authenticator2 = _interopRequireDefault(_Authenticator);

var _OAuthApplicationUserCredentials = require('./authentication/OAuthApplicationUserCredentials');

var _OAuthApplicationUserCredentials2 = _interopRequireDefault(_OAuthApplicationUserCredentials);

var _OAuthClientCredentials = require('./authentication/OAuthClientCredentials');

var _OAuthClientCredentials2 = _interopRequireDefault(_OAuthClientCredentials);

var _OAuthDeviceCredentials = require('./authentication/OAuthDeviceCredentials');

var _OAuthDeviceCredentials2 = _interopRequireDefault(_OAuthDeviceCredentials);

var _SDKCache = require('./cache/SDKCache');

var _SDKCache2 = _interopRequireDefault(_SDKCache);

var _FileCache = require('./cache/FileCache');

var _FileCache2 = _interopRequireDefault(_FileCache);

var _Address = require('./model/Address');

var _Address2 = _interopRequireDefault(_Address);

var _AddressComponents = require('./model/AddressComponents');

var _AddressComponents2 = _interopRequireDefault(_AddressComponents);

var _AssignedBy = require('./model/AssignedBy');

var _AssignedBy2 = _interopRequireDefault(_AssignedBy);

var _BankAccountDescriptor = require('./model/BankAccountDescriptor');

var _BankAccountDescriptor2 = _interopRequireDefault(_BankAccountDescriptor);

var _Contact = require('./model/Contact');

var _Contact2 = _interopRequireDefault(_Contact);

var _DayTime = require('./model/DayTime');

var _DayTime2 = _interopRequireDefault(_DayTime);

var _DocumentUploadsBaseProductModel = require('./model/DocumentUploadsBaseProductModel');

var _DocumentUploadsBaseProductModel2 = _interopRequireDefault(_DocumentUploadsBaseProductModel);

var _DocumentUploadsDTOContent = require('./model/DocumentUploadsDTOContent');

var _DocumentUploadsDTOContent2 = _interopRequireDefault(_DocumentUploadsDTOContent);

var _GeneralMerchantsCheckoutOptions = require('./model/GeneralMerchantsCheckoutOptions');

var _GeneralMerchantsCheckoutOptions2 = _interopRequireDefault(_GeneralMerchantsCheckoutOptions);

var _GeneralMerchantsCheckoutOptionsCollection = require('./model/GeneralMerchantsCheckoutOptionsCollection');

var _GeneralMerchantsCheckoutOptionsCollection2 = _interopRequireDefault(_GeneralMerchantsCheckoutOptionsCollection);

var _GeneralMerchantsCheckoutOptionsCollectionSmartDevices = require('./model/GeneralMerchantsCheckoutOptionsCollectionSmartDevices');

var _GeneralMerchantsCheckoutOptionsCollectionSmartDevices2 = _interopRequireDefault(_GeneralMerchantsCheckoutOptionsCollectionSmartDevices);

var _GeneralMerchantsCheckoutOptionsShipping = require('./model/GeneralMerchantsCheckoutOptionsShipping');

var _GeneralMerchantsCheckoutOptionsShipping2 = _interopRequireDefault(_GeneralMerchantsCheckoutOptionsShipping);

var _GeneralMerchantsDTO = require('./model/GeneralMerchantsDTO');

var _GeneralMerchantsDTO2 = _interopRequireDefault(_GeneralMerchantsDTO);

var _GeneralMerchantsLegalDetails = require('./model/GeneralMerchantsLegalDetails');

var _GeneralMerchantsLegalDetails2 = _interopRequireDefault(_GeneralMerchantsLegalDetails);

var _GeneralMerchantsList = require('./model/GeneralMerchantsList');

var _GeneralMerchantsList2 = _interopRequireDefault(_GeneralMerchantsList);

var _GeneralMerchantsProductModel = require('./model/GeneralMerchantsProductModel');

var _GeneralMerchantsProductModel2 = _interopRequireDefault(_GeneralMerchantsProductModel);

var _GeneralMerchantsUrls = require('./model/GeneralMerchantsUrls');

var _GeneralMerchantsUrls2 = _interopRequireDefault(_GeneralMerchantsUrls);

var _GeneralMerchantsUser = require('./model/GeneralMerchantsUser');

var _GeneralMerchantsUser2 = _interopRequireDefault(_GeneralMerchantsUser);

var _GeneralStoresDTO = require('./model/GeneralStoresDTO');

var _GeneralStoresDTO2 = _interopRequireDefault(_GeneralStoresDTO);

var _GeneralStoresDTOReason = require('./model/GeneralStoresDTOReason');

var _GeneralStoresDTOReason2 = _interopRequireDefault(_GeneralStoresDTOReason);

var _GeneralStoresDTOType = require('./model/GeneralStoresDTOType');

var _GeneralStoresDTOType2 = _interopRequireDefault(_GeneralStoresDTOType);

var _GeneralStoresList = require('./model/GeneralStoresList');

var _GeneralStoresList2 = _interopRequireDefault(_GeneralStoresList);

var _GeneralStoresProductModel = require('./model/GeneralStoresProductModel');

var _GeneralStoresProductModel2 = _interopRequireDefault(_GeneralStoresProductModel);

var _GeoAddress = require('./model/GeoAddress');

var _GeoAddress2 = _interopRequireDefault(_GeoAddress);

var _GeoAddressGeometry = require('./model/GeoAddressGeometry');

var _GeoAddressGeometry2 = _interopRequireDefault(_GeoAddressGeometry);

var _InvitedBy = require('./model/InvitedBy');

var _InvitedBy2 = _interopRequireDefault(_InvitedBy);

var _ItemGroup = require('./model/ItemGroup');

var _ItemGroup2 = _interopRequireDefault(_ItemGroup);

var _LoyaltyCardgroupsDTO = require('./model/LoyaltyCardgroupsDTO');

var _LoyaltyCardgroupsDTO2 = _interopRequireDefault(_LoyaltyCardgroupsDTO);

var _LoyaltyCardgroupsDTOCheckPasscodeEnabled = require('./model/LoyaltyCardgroupsDTOCheckPasscodeEnabled');

var _LoyaltyCardgroupsDTOCheckPasscodeEnabled2 = _interopRequireDefault(_LoyaltyCardgroupsDTOCheckPasscodeEnabled);

var _LoyaltyCardgroupsDTOMerchant = require('./model/LoyaltyCardgroupsDTOMerchant');

var _LoyaltyCardgroupsDTOMerchant2 = _interopRequireDefault(_LoyaltyCardgroupsDTOMerchant);

var _LoyaltyCardgroupsList = require('./model/LoyaltyCardgroupsList');

var _LoyaltyCardgroupsList2 = _interopRequireDefault(_LoyaltyCardgroupsList);

var _LoyaltyCardgroupsProductModel = require('./model/LoyaltyCardgroupsProductModel');

var _LoyaltyCardgroupsProductModel2 = _interopRequireDefault(_LoyaltyCardgroupsProductModel);

var _LoyaltyCardsDTOAccount = require('./model/LoyaltyCardsDTOAccount');

var _LoyaltyCardsDTOAccount2 = _interopRequireDefault(_LoyaltyCardsDTOAccount);

var _LoyaltyCardsList = require('./model/LoyaltyCardsList');

var _LoyaltyCardsList2 = _interopRequireDefault(_LoyaltyCardsList);

var _LoyaltyCardsProductModel = require('./model/LoyaltyCardsProductModel');

var _LoyaltyCardsProductModel2 = _interopRequireDefault(_LoyaltyCardsProductModel);

var _LoyaltyCustomersContactDTO = require('./model/LoyaltyCustomersContactDTO');

var _LoyaltyCustomersContactDTO2 = _interopRequireDefault(_LoyaltyCustomersContactDTO);

var _LoyaltyCustomersDTO = require('./model/LoyaltyCustomersDTO');

var _LoyaltyCustomersDTO2 = _interopRequireDefault(_LoyaltyCustomersDTO);

var _LoyaltyCustomersList = require('./model/LoyaltyCustomersList');

var _LoyaltyCustomersList2 = _interopRequireDefault(_LoyaltyCustomersList);

var _LoyaltyCustomersPaymentContainerModel = require('./model/LoyaltyCustomersPaymentContainerModel');

var _LoyaltyCustomersPaymentContainerModel2 = _interopRequireDefault(_LoyaltyCustomersPaymentContainerModel);

var _LoyaltyCustomersProductModel = require('./model/LoyaltyCustomersProductModel');

var _LoyaltyCustomersProductModel2 = _interopRequireDefault(_LoyaltyCustomersProductModel);

var _LoyaltyCustomersRemoved = require('./model/LoyaltyCustomersRemoved');

var _LoyaltyCustomersRemoved2 = _interopRequireDefault(_LoyaltyCustomersRemoved);

var _LoyaltyDTOMerchant = require('./model/LoyaltyDTOMerchant');

var _LoyaltyDTOMerchant2 = _interopRequireDefault(_LoyaltyDTOMerchant);

var _LoyaltyDTOStore = require('./model/LoyaltyDTOStore');

var _LoyaltyDTOStore2 = _interopRequireDefault(_LoyaltyDTOStore);

var _LoyaltyMerchantcardsDTO = require('./model/LoyaltyMerchantcardsDTO');

var _LoyaltyMerchantcardsDTO2 = _interopRequireDefault(_LoyaltyMerchantcardsDTO);

var _LoyaltyMerchantcardsDTOCardsAmount = require('./model/LoyaltyMerchantcardsDTOCardsAmount');

var _LoyaltyMerchantcardsDTOCardsAmount2 = _interopRequireDefault(_LoyaltyMerchantcardsDTOCardsAmount);

var _LoyaltyMerchantcardsDTOCheckPasscode = require('./model/LoyaltyMerchantcardsDTOCheckPasscode');

var _LoyaltyMerchantcardsDTOCheckPasscode2 = _interopRequireDefault(_LoyaltyMerchantcardsDTOCheckPasscode);

var _LoyaltyMerchantcardsDTOCsc = require('./model/LoyaltyMerchantcardsDTOCsc');

var _LoyaltyMerchantcardsDTOCsc2 = _interopRequireDefault(_LoyaltyMerchantcardsDTOCsc);

var _LoyaltyMerchantcardsDTOLock = require('./model/LoyaltyMerchantcardsDTOLock');

var _LoyaltyMerchantcardsDTOLock2 = _interopRequireDefault(_LoyaltyMerchantcardsDTOLock);

var _LoyaltyMerchantcardsDTOPaymentContainer = require('./model/LoyaltyMerchantcardsDTOPaymentContainer');

var _LoyaltyMerchantcardsDTOPaymentContainer2 = _interopRequireDefault(_LoyaltyMerchantcardsDTOPaymentContainer);

var _LoyaltyMerchantcardsDTOResetPasscode = require('./model/LoyaltyMerchantcardsDTOResetPasscode');

var _LoyaltyMerchantcardsDTOResetPasscode2 = _interopRequireDefault(_LoyaltyMerchantcardsDTOResetPasscode);

var _LoyaltyMerchantcardsDTOTransaction = require('./model/LoyaltyMerchantcardsDTOTransaction');

var _LoyaltyMerchantcardsDTOTransaction2 = _interopRequireDefault(_LoyaltyMerchantcardsDTOTransaction);

var _LoyaltyMerchantcardsDTOValidateMerchantCard = require('./model/LoyaltyMerchantcardsDTOValidateMerchantCard');

var _LoyaltyMerchantcardsDTOValidateMerchantCard2 = _interopRequireDefault(_LoyaltyMerchantcardsDTOValidateMerchantCard);

var _LoyaltyMerchantcardsList = require('./model/LoyaltyMerchantcardsList');

var _LoyaltyMerchantcardsList2 = _interopRequireDefault(_LoyaltyMerchantcardsList);

var _LoyaltyMerchantcardsProductModel = require('./model/LoyaltyMerchantcardsProductModel');

var _LoyaltyMerchantcardsProductModel2 = _interopRequireDefault(_LoyaltyMerchantcardsProductModel);

var _LoyaltyMerchantcardsValidateMerchantCard = require('./model/LoyaltyMerchantcardsValidateMerchantCard');

var _LoyaltyMerchantcardsValidateMerchantCard2 = _interopRequireDefault(_LoyaltyMerchantcardsValidateMerchantCard);

var _LoyaltyStoregroupsDTO = require('./model/LoyaltyStoregroupsDTO');

var _LoyaltyStoregroupsDTO2 = _interopRequireDefault(_LoyaltyStoregroupsDTO);

var _LoyaltyStoregroupsDTOStoresAddressComponents = require('./model/LoyaltyStoregroupsDTOStoresAddressComponents');

var _LoyaltyStoregroupsDTOStoresAddressComponents2 = _interopRequireDefault(_LoyaltyStoregroupsDTOStoresAddressComponents);

var _LoyaltyStoregroupsList = require('./model/LoyaltyStoregroupsList');

var _LoyaltyStoregroupsList2 = _interopRequireDefault(_LoyaltyStoregroupsList);

var _LoyaltyStoregroupsProductModel = require('./model/LoyaltyStoregroupsProductModel');

var _LoyaltyStoregroupsProductModel2 = _interopRequireDefault(_LoyaltyStoregroupsProductModel);

var _OpenHours = require('./model/OpenHours');

var _OpenHours2 = _interopRequireDefault(_OpenHours);

var _ParentModel = require('./model/ParentModel');

var _ParentModel2 = _interopRequireDefault(_ParentModel);

var _PaymentContainerMandate = require('./model/PaymentContainerMandate');

var _PaymentContainerMandate2 = _interopRequireDefault(_PaymentContainerMandate);

var _PaymentContainersDTO = require('./model/PaymentContainersDTO');

var _PaymentContainersDTO2 = _interopRequireDefault(_PaymentContainersDTO);

var _PaymentContainersDTOCustomer = require('./model/PaymentContainersDTOCustomer');

var _PaymentContainersDTOCustomer2 = _interopRequireDefault(_PaymentContainersDTOCustomer);

var _PaymentContainersDTOPrivate = require('./model/PaymentContainersDTOPrivate');

var _PaymentContainersDTOPrivate2 = _interopRequireDefault(_PaymentContainersDTOPrivate);

var _PaymentContainersList = require('./model/PaymentContainersList');

var _PaymentContainersList2 = _interopRequireDefault(_PaymentContainersList);

var _PaymentContainersProductModel = require('./model/PaymentContainersProductModel');

var _PaymentContainersProductModel2 = _interopRequireDefault(_PaymentContainersProductModel);

var _PaymentContractsDTO = require('./model/PaymentContractsDTO');

var _PaymentContractsDTO2 = _interopRequireDefault(_PaymentContractsDTO);

var _PaymentContractsDTOClone = require('./model/PaymentContractsDTOClone');

var _PaymentContractsDTOClone2 = _interopRequireDefault(_PaymentContractsDTOClone);

var _PaymentContractsDTOIFrameOpts = require('./model/PaymentContractsDTOIFrameOpts');

var _PaymentContractsDTOIFrameOpts2 = _interopRequireDefault(_PaymentContractsDTOIFrameOpts);

var _PaymentContractsDTORequestId = require('./model/PaymentContractsDTORequestId');

var _PaymentContractsDTORequestId2 = _interopRequireDefault(_PaymentContractsDTORequestId);

var _PaymentContractsList = require('./model/PaymentContractsList');

var _PaymentContractsList2 = _interopRequireDefault(_PaymentContractsList);

var _PaymentContractsProductModel = require('./model/PaymentContractsProductModel');

var _PaymentContractsProductModel2 = _interopRequireDefault(_PaymentContractsProductModel);

var _PaymentContractsRequestIdResult = require('./model/PaymentContractsRequestIdResult');

var _PaymentContractsRequestIdResult2 = _interopRequireDefault(_PaymentContractsRequestIdResult);

var _PaymentCustomersDTO = require('./model/PaymentCustomersDTO');

var _PaymentCustomersDTO2 = _interopRequireDefault(_PaymentCustomersDTO);

var _PaymentCustomersList = require('./model/PaymentCustomersList');

var _PaymentCustomersList2 = _interopRequireDefault(_PaymentCustomersList);

var _PaymentCustomersProductModel = require('./model/PaymentCustomersProductModel');

var _PaymentCustomersProductModel2 = _interopRequireDefault(_PaymentCustomersProductModel);

var _PaymentInformation = require('./model/PaymentInformation');

var _PaymentInformation2 = _interopRequireDefault(_PaymentInformation);

var _PaymentTransactionsCancelList = require('./model/PaymentTransactionsCancelList');

var _PaymentTransactionsCancelList2 = _interopRequireDefault(_PaymentTransactionsCancelList);

var _PaymentTransactionsList = require('./model/PaymentTransactionsList');

var _PaymentTransactionsList2 = _interopRequireDefault(_PaymentTransactionsList);

var _PaymentTransactionsProductModel = require('./model/PaymentTransactionsProductModel');

var _PaymentTransactionsProductModel2 = _interopRequireDefault(_PaymentTransactionsProductModel);

var _PaymentTransactionsProductModelCustomer = require('./model/PaymentTransactionsProductModelCustomer');

var _PaymentTransactionsProductModelCustomer2 = _interopRequireDefault(_PaymentTransactionsProductModelCustomer);

var _PaymentTransactionsProductModelDetails = require('./model/PaymentTransactionsProductModelDetails');

var _PaymentTransactionsProductModelDetails2 = _interopRequireDefault(_PaymentTransactionsProductModelDetails);

var _PaymentTransactionsProductModelMerchant = require('./model/PaymentTransactionsProductModelMerchant');

var _PaymentTransactionsProductModelMerchant2 = _interopRequireDefault(_PaymentTransactionsProductModelMerchant);

var _PaymentTransactionsShippingUrl = require('./model/PaymentTransactionsShippingUrl');

var _PaymentTransactionsShippingUrl2 = _interopRequireDefault(_PaymentTransactionsShippingUrl);

var _PrepaidItemsList = require('./model/PrepaidItemsList');

var _PrepaidItemsList2 = _interopRequireDefault(_PrepaidItemsList);

var _PrepaidItemsProductModel = require('./model/PrepaidItemsProductModel');

var _PrepaidItemsProductModel2 = _interopRequireDefault(_PrepaidItemsProductModel);

var _PrepaidSalesItem = require('./model/PrepaidSalesItem');

var _PrepaidSalesItem2 = _interopRequireDefault(_PrepaidSalesItem);

var _PrepaidSalesProductModel = require('./model/PrepaidSalesProductModel');

var _PrepaidSalesProductModel2 = _interopRequireDefault(_PrepaidSalesProductModel);

var _PrepaidSalesSmartDevice = require('./model/PrepaidSalesSmartDevice');

var _PrepaidSalesSmartDevice2 = _interopRequireDefault(_PrepaidSalesSmartDevice);

var _ProductExceptionPayload = require('./model/ProductExceptionPayload');

var _ProductExceptionPayload2 = _interopRequireDefault(_ProductExceptionPayload);

var _ProductInstanceID = require('./model/ProductInstanceID');

var _ProductInstanceID2 = _interopRequireDefault(_ProductInstanceID);

var _ProductInstanceUID = require('./model/ProductInstanceUID');

var _ProductInstanceUID2 = _interopRequireDefault(_ProductInstanceUID);

var _ReceiptType = require('./model/ReceiptType');

var _ReceiptType2 = _interopRequireDefault(_ReceiptType);

var _ReceiptValue = require('./model/ReceiptValue');

var _ReceiptValue2 = _interopRequireDefault(_ReceiptValue);

var _SecupayBasketItem = require('./model/SecupayBasketItem');

var _SecupayBasketItem2 = _interopRequireDefault(_SecupayBasketItem);

var _SecupaySubTransactionProductModel = require('./model/SecupaySubTransactionProductModel');

var _SecupaySubTransactionProductModel2 = _interopRequireDefault(_SecupaySubTransactionProductModel);

var _SecupayTransactionCancelDTO = require('./model/SecupayTransactionCancelDTO');

var _SecupayTransactionCancelDTO2 = _interopRequireDefault(_SecupayTransactionCancelDTO);

var _SecupayTransactionCaptureDTO = require('./model/SecupayTransactionCaptureDTO');

var _SecupayTransactionCaptureDTO2 = _interopRequireDefault(_SecupayTransactionCaptureDTO);

var _SecupayTransactionDTOExternalInvoicePdf = require('./model/SecupayTransactionDTOExternalInvoicePdf');

var _SecupayTransactionDTOExternalInvoicePdf2 = _interopRequireDefault(_SecupayTransactionDTOExternalInvoicePdf);

var _SecupayTransactionExternalInvoicePdf = require('./model/SecupayTransactionExternalInvoicePdf');

var _SecupayTransactionExternalInvoicePdf2 = _interopRequireDefault(_SecupayTransactionExternalInvoicePdf);

var _SecupayTransactionExternalInvoicePdfDocument = require('./model/SecupayTransactionExternalInvoicePdfDocument');

var _SecupayTransactionExternalInvoicePdfDocument2 = _interopRequireDefault(_SecupayTransactionExternalInvoicePdfDocument);

var _SecupayTransactionProductDTO = require('./model/SecupayTransactionProductDTO');

var _SecupayTransactionProductDTO2 = _interopRequireDefault(_SecupayTransactionProductDTO);

var _SecupayTransactionProductDTOExperience = require('./model/SecupayTransactionProductDTOExperience');

var _SecupayTransactionProductDTOExperience2 = _interopRequireDefault(_SecupayTransactionProductDTOExperience);

var _SecupayTransactionProductDTOOptData = require('./model/SecupayTransactionProductDTOOptData');

var _SecupayTransactionProductDTOOptData2 = _interopRequireDefault(_SecupayTransactionProductDTOOptData);

var _SecupayTransactionProductDTORedirectUrl = require('./model/SecupayTransactionProductDTORedirectUrl');

var _SecupayTransactionProductDTORedirectUrl2 = _interopRequireDefault(_SecupayTransactionProductDTORedirectUrl);

var _SecupayTransactionProductDTOSubscription = require('./model/SecupayTransactionProductDTOSubscription');

var _SecupayTransactionProductDTOSubscription2 = _interopRequireDefault(_SecupayTransactionProductDTOSubscription);

var _SecupayTransactionProductModel = require('./model/SecupayTransactionProductModel');

var _SecupayTransactionProductModel2 = _interopRequireDefault(_SecupayTransactionProductModel);

var _SecupayTransactionProductModelRedirectUrl = require('./model/SecupayTransactionProductModelRedirectUrl');

var _SecupayTransactionProductModelRedirectUrl2 = _interopRequireDefault(_SecupayTransactionProductModelRedirectUrl);

var _SecupayTransactionProductModelTransferAccount = require('./model/SecupayTransactionProductModelTransferAccount');

var _SecupayTransactionProductModelTransferAccount2 = _interopRequireDefault(_SecupayTransactionProductModelTransferAccount);

var _SecupayTransactionProductModelUsedPaymentInstrument = require('./model/SecupayTransactionProductModelUsedPaymentInstrument');

var _SecupayTransactionProductModelUsedPaymentInstrument2 = _interopRequireDefault(_SecupayTransactionProductModelUsedPaymentInstrument);

var _SecupayTransactionReverseAccrualDTO = require('./model/SecupayTransactionReverseAccrualDTO');

var _SecupayTransactionReverseAccrualDTO2 = _interopRequireDefault(_SecupayTransactionReverseAccrualDTO);

var _SecupayTransactionSetShippingInformationDTO = require('./model/SecupayTransactionSetShippingInformationDTO');

var _SecupayTransactionSetShippingInformationDTO2 = _interopRequireDefault(_SecupayTransactionSetShippingInformationDTO);

var _SecupayTransactionUpdateBasketDTO = require('./model/SecupayTransactionUpdateBasketDTO');

var _SecupayTransactionUpdateBasketDTO2 = _interopRequireDefault(_SecupayTransactionUpdateBasketDTO);

var _SmartDeviceProductsEnabled = require('./model/SmartDeviceProductsEnabled');

var _SmartDeviceProductsEnabled2 = _interopRequireDefault(_SmartDeviceProductsEnabled);

var _SmartDeviceProductsPrepaid = require('./model/SmartDeviceProductsPrepaid');

var _SmartDeviceProductsPrepaid2 = _interopRequireDefault(_SmartDeviceProductsPrepaid);

var _SmartDevicesDTO = require('./model/SmartDevicesDTO');

var _SmartDevicesDTO2 = _interopRequireDefault(_SmartDevicesDTO);

var _SmartDevicesDTOPrepaidTid = require('./model/SmartDevicesDTOPrepaidTid');

var _SmartDevicesDTOPrepaidTid2 = _interopRequireDefault(_SmartDevicesDTOPrepaidTid);

var _SmartDevicesDTOSecubaseConfig = require('./model/SmartDevicesDTOSecubaseConfig');

var _SmartDevicesDTOSecubaseConfig2 = _interopRequireDefault(_SmartDevicesDTOSecubaseConfig);

var _SmartDevicesDevice = require('./model/SmartDevicesDevice');

var _SmartDevicesDevice2 = _interopRequireDefault(_SmartDevicesDevice);

var _SmartDevicesList = require('./model/SmartDevicesList');

var _SmartDevicesList2 = _interopRequireDefault(_SmartDevicesList);

var _SmartDevicesList3 = require('./model/SmartDevicesList1');

var _SmartDevicesList4 = _interopRequireDefault(_SmartDevicesList3);

var _SmartDevicesProductModel = require('./model/SmartDevicesProductModel');

var _SmartDevicesProductModel2 = _interopRequireDefault(_SmartDevicesProductModel);

var _SmartDevicesProducts = require('./model/SmartDevicesProducts');

var _SmartDevicesProducts2 = _interopRequireDefault(_SmartDevicesProducts);

var _SmartDevicesSecubaseConfig = require('./model/SmartDevicesSecubaseConfig');

var _SmartDevicesSecubaseConfig2 = _interopRequireDefault(_SmartDevicesSecubaseConfig);

var _SmartDevicesSecubaseConfigLogging = require('./model/SmartDevicesSecubaseConfigLogging');

var _SmartDevicesSecubaseConfigLogging2 = _interopRequireDefault(_SmartDevicesSecubaseConfigLogging);

var _SmartDevicesSecubaseConfigLoggingFileNet = require('./model/SmartDevicesSecubaseConfigLoggingFileNet');

var _SmartDevicesSecubaseConfigLoggingFileNet2 = _interopRequireDefault(_SmartDevicesSecubaseConfigLoggingFileNet);

var _SmartTransactionsBasket = require('./model/SmartTransactionsBasket');

var _SmartTransactionsBasket2 = _interopRequireDefault(_SmartTransactionsBasket);

var _SmartTransactionsBasketInfo = require('./model/SmartTransactionsBasketInfo');

var _SmartTransactionsBasketInfo2 = _interopRequireDefault(_SmartTransactionsBasketInfo);

var _SmartTransactionsBasketProduct = require('./model/SmartTransactionsBasketProduct');

var _SmartTransactionsBasketProduct2 = _interopRequireDefault(_SmartTransactionsBasketProduct);

var _SmartTransactionsBasketProductGroup = require('./model/SmartTransactionsBasketProductGroup');

var _SmartTransactionsBasketProductGroup2 = _interopRequireDefault(_SmartTransactionsBasketProductGroup);

var _SmartTransactionsBasketText = require('./model/SmartTransactionsBasketText');

var _SmartTransactionsBasketText2 = _interopRequireDefault(_SmartTransactionsBasketText);

var _SmartTransactionsBonusProducts = require('./model/SmartTransactionsBonusProducts');

var _SmartTransactionsBonusProducts2 = _interopRequireDefault(_SmartTransactionsBonusProducts);

var _SmartTransactionsCheckin = require('./model/SmartTransactionsCheckin');

var _SmartTransactionsCheckin2 = _interopRequireDefault(_SmartTransactionsCheckin);

var _SmartTransactionsDTO = require('./model/SmartTransactionsDTO');

var _SmartTransactionsDTO2 = _interopRequireDefault(_SmartTransactionsDTO);

var _SmartTransactionsIdent = require('./model/SmartTransactionsIdent');

var _SmartTransactionsIdent2 = _interopRequireDefault(_SmartTransactionsIdent);

var _SmartTransactionsList = require('./model/SmartTransactionsList');

var _SmartTransactionsList2 = _interopRequireDefault(_SmartTransactionsList);

var _SmartTransactionsPickupOptions = require('./model/SmartTransactionsPickupOptions');

var _SmartTransactionsPickupOptions2 = _interopRequireDefault(_SmartTransactionsPickupOptions);

var _SmartTransactionsPreTransactionModel = require('./model/SmartTransactionsPreTransactionModel');

var _SmartTransactionsPreTransactionModel2 = _interopRequireDefault(_SmartTransactionsPreTransactionModel);

var _SmartTransactionsProductModel = require('./model/SmartTransactionsProductModel');

var _SmartTransactionsProductModel2 = _interopRequireDefault(_SmartTransactionsProductModel);

var _SmartTransactionsReceipt = require('./model/SmartTransactionsReceipt');

var _SmartTransactionsReceipt2 = _interopRequireDefault(_SmartTransactionsReceipt);

var _SmartTransactionsReceiptValue = require('./model/SmartTransactionsReceiptValue');

var _SmartTransactionsReceiptValue2 = _interopRequireDefault(_SmartTransactionsReceiptValue);

var _Store = require('./model/Store');

var _Store2 = _interopRequireDefault(_Store);

var _VirtualTerminalData = require('./model/VirtualTerminalData');

var _VirtualTerminalData2 = _interopRequireDefault(_VirtualTerminalData);

var _DocumentUploadsProductModel = require('./model/DocumentUploadsProductModel');

var _DocumentUploadsProductModel2 = _interopRequireDefault(_DocumentUploadsProductModel);

var _LoyaltyMerchantcardsDTONewPasscode = require('./model/LoyaltyMerchantcardsDTONewPasscode');

var _LoyaltyMerchantcardsDTONewPasscode2 = _interopRequireDefault(_LoyaltyMerchantcardsDTONewPasscode);

var _LoyaltyMerchantcardsProductWithReceiptModel = require('./model/LoyaltyMerchantcardsProductWithReceiptModel');

var _LoyaltyMerchantcardsProductWithReceiptModel2 = _interopRequireDefault(_LoyaltyMerchantcardsProductWithReceiptModel);

var _ReceiptTypeValue = require('./model/ReceiptTypeValue');

var _ReceiptTypeValue2 = _interopRequireDefault(_ReceiptTypeValue);

var _SmartTransactionsMerchant = require('./model/SmartTransactionsMerchant');

var _SmartTransactionsMerchant2 = _interopRequireDefault(_SmartTransactionsMerchant);

var _DocumentUploadsApi = require('./api/DocumentUploadsApi');

var _DocumentUploadsApi2 = _interopRequireDefault(_DocumentUploadsApi);

var _GeneralMerchantsApi = require('./api/GeneralMerchantsApi');

var _GeneralMerchantsApi2 = _interopRequireDefault(_GeneralMerchantsApi);

var _GeneralStoresApi = require('./api/GeneralStoresApi');

var _GeneralStoresApi2 = _interopRequireDefault(_GeneralStoresApi);

var _LoyaltyCardgroupsApi = require('./api/LoyaltyCardgroupsApi');

var _LoyaltyCardgroupsApi2 = _interopRequireDefault(_LoyaltyCardgroupsApi);

var _LoyaltyCardsApi = require('./api/LoyaltyCardsApi');

var _LoyaltyCardsApi2 = _interopRequireDefault(_LoyaltyCardsApi);

var _LoyaltyCustomersApi = require('./api/LoyaltyCustomersApi');

var _LoyaltyCustomersApi2 = _interopRequireDefault(_LoyaltyCustomersApi);

var _LoyaltyMerchantcardsApi = require('./api/LoyaltyMerchantcardsApi');

var _LoyaltyMerchantcardsApi2 = _interopRequireDefault(_LoyaltyMerchantcardsApi);

var _LoyaltySalesApi = require('./api/LoyaltySalesApi');

var _LoyaltySalesApi2 = _interopRequireDefault(_LoyaltySalesApi);

var _LoyaltyStoregroupsApi = require('./api/LoyaltyStoregroupsApi');

var _LoyaltyStoregroupsApi2 = _interopRequireDefault(_LoyaltyStoregroupsApi);

var _PaymentContainersApi = require('./api/PaymentContainersApi');

var _PaymentContainersApi2 = _interopRequireDefault(_PaymentContainersApi);

var _PaymentContractsApi = require('./api/PaymentContractsApi');

var _PaymentContractsApi2 = _interopRequireDefault(_PaymentContractsApi);

var _PaymentCustomersApi = require('./api/PaymentCustomersApi');

var _PaymentCustomersApi2 = _interopRequireDefault(_PaymentCustomersApi);

var _PaymentSecupayCreditcardsApi = require('./api/PaymentSecupayCreditcardsApi');

var _PaymentSecupayCreditcardsApi2 = _interopRequireDefault(_PaymentSecupayCreditcardsApi);

var _PaymentSecupayDebitsApi = require('./api/PaymentSecupayDebitsApi');

var _PaymentSecupayDebitsApi2 = _interopRequireDefault(_PaymentSecupayDebitsApi);

var _PaymentSecupayInvoicesApi = require('./api/PaymentSecupayInvoicesApi');

var _PaymentSecupayInvoicesApi2 = _interopRequireDefault(_PaymentSecupayInvoicesApi);

var _PaymentSecupayPrepaysApi = require('./api/PaymentSecupayPrepaysApi');

var _PaymentSecupayPrepaysApi2 = _interopRequireDefault(_PaymentSecupayPrepaysApi);

var _PaymentTransactionsApi = require('./api/PaymentTransactionsApi');

var _PaymentTransactionsApi2 = _interopRequireDefault(_PaymentTransactionsApi);

var _PrepaidItemsApi = require('./api/PrepaidItemsApi');

var _PrepaidItemsApi2 = _interopRequireDefault(_PrepaidItemsApi);

var _SmartDevicesApi = require('./api/SmartDevicesApi');

var _SmartDevicesApi2 = _interopRequireDefault(_SmartDevicesApi);

var _SmartTransactionsApi = require('./api/SmartTransactionsApi');

var _SmartTransactionsApi2 = _interopRequireDefault(_SmartTransactionsApi);

var _StompClient = require('./stomp/StompClient');

var _StompClient2 = _interopRequireDefault(_StompClient);

var _StompSmartTransactionsApi = require('./stomp/api/StompSmartTransactionsApi');

var _StompSmartTransactionsApi2 = _interopRequireDefault(_StompSmartTransactionsApi);

var _StompGlobals = require('./stomp/StompGlobals');

var _StompGlobals2 = _interopRequireDefault(_StompGlobals);

var _Frame = require('./stomp/frame/Frame');

var _Frame2 = _interopRequireDefault(_Frame);

var _Stomp = require('./stomp/main/Stomp');

var _Stomp2 = _interopRequireDefault(_Stomp);

var _BrowserSocket = require('./stomp/socket/BrowserSocket');

var _BrowserSocket2 = _interopRequireDefault(_BrowserSocket);

var _NodeSocket = require('./stomp/socket/NodeSocket');

var _NodeSocket2 = _interopRequireDefault(_NodeSocket);

var _SocketProvider = require('./stomp/socket/SocketProvider');

var _SocketProvider2 = _interopRequireDefault(_SocketProvider);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var SecuconnectJsSdk = require('index'); // See note below*.
* var xxxSvc = new SecuconnectJsSdk.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new SecuconnectJsSdk.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new SecuconnectJsSdk.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new SecuconnectJsSdk.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
*/
exports.ApiClient = _ApiClient2.default;
exports.Authenticator = _Authenticator2.default;
exports.OAuthApplicationUserCredentials = _OAuthApplicationUserCredentials2.default;
exports.OAuthClientCredentials = _OAuthClientCredentials2.default;
exports.OAuthDeviceCredentials = _OAuthDeviceCredentials2.default;
exports.SDKCache = _SDKCache2.default;
exports.FileCache = _FileCache2.default;
exports.Address = _Address2.default;
exports.AddressComponents = _AddressComponents2.default;
exports.AssignedBy = _AssignedBy2.default;
exports.BankAccountDescriptor = _BankAccountDescriptor2.default;
exports.Contact = _Contact2.default;
exports.DayTime = _DayTime2.default;
exports.DocumentUploadsBaseProductModel = _DocumentUploadsBaseProductModel2.default;
exports.DocumentUploadsDTOContent = _DocumentUploadsDTOContent2.default;
exports.GeneralMerchantsCheckoutOptions = _GeneralMerchantsCheckoutOptions2.default;
exports.GeneralMerchantsCheckoutOptionsCollection = _GeneralMerchantsCheckoutOptionsCollection2.default;
exports.GeneralMerchantsCheckoutOptionsCollectionSmartDevices = _GeneralMerchantsCheckoutOptionsCollectionSmartDevices2.default;
exports.GeneralMerchantsCheckoutOptionsShipping = _GeneralMerchantsCheckoutOptionsShipping2.default;
exports.GeneralMerchantsDTO = _GeneralMerchantsDTO2.default;
exports.GeneralMerchantsLegalDetails = _GeneralMerchantsLegalDetails2.default;
exports.GeneralMerchantsList = _GeneralMerchantsList2.default;
exports.GeneralMerchantsProductModel = _GeneralMerchantsProductModel2.default;
exports.GeneralMerchantsUrls = _GeneralMerchantsUrls2.default;
exports.GeneralMerchantsUser = _GeneralMerchantsUser2.default;
exports.GeneralStoresDTO = _GeneralStoresDTO2.default;
exports.GeneralStoresDTOReason = _GeneralStoresDTOReason2.default;
exports.GeneralStoresDTOType = _GeneralStoresDTOType2.default;
exports.GeneralStoresList = _GeneralStoresList2.default;
exports.GeneralStoresProductModel = _GeneralStoresProductModel2.default;
exports.GeoAddress = _GeoAddress2.default;
exports.GeoAddressGeometry = _GeoAddressGeometry2.default;
exports.InvitedBy = _InvitedBy2.default;
exports.ItemGroup = _ItemGroup2.default;
exports.LoyaltyCardgroupsDTO = _LoyaltyCardgroupsDTO2.default;
exports.LoyaltyCardgroupsDTOCheckPasscodeEnabled = _LoyaltyCardgroupsDTOCheckPasscodeEnabled2.default;
exports.LoyaltyCardgroupsDTOMerchant = _LoyaltyCardgroupsDTOMerchant2.default;
exports.LoyaltyCardgroupsList = _LoyaltyCardgroupsList2.default;
exports.LoyaltyCardgroupsProductModel = _LoyaltyCardgroupsProductModel2.default;
exports.LoyaltyCardsDTOAccount = _LoyaltyCardsDTOAccount2.default;
exports.LoyaltyCardsList = _LoyaltyCardsList2.default;
exports.LoyaltyCardsProductModel = _LoyaltyCardsProductModel2.default;
exports.LoyaltyCustomersContactDTO = _LoyaltyCustomersContactDTO2.default;
exports.LoyaltyCustomersDTO = _LoyaltyCustomersDTO2.default;
exports.LoyaltyCustomersList = _LoyaltyCustomersList2.default;
exports.LoyaltyCustomersPaymentContainerModel = _LoyaltyCustomersPaymentContainerModel2.default;
exports.LoyaltyCustomersProductModel = _LoyaltyCustomersProductModel2.default;
exports.LoyaltyCustomersRemoved = _LoyaltyCustomersRemoved2.default;
exports.LoyaltyDTOMerchant = _LoyaltyDTOMerchant2.default;
exports.LoyaltyDTOStore = _LoyaltyDTOStore2.default;
exports.LoyaltyMerchantcardsDTO = _LoyaltyMerchantcardsDTO2.default;
exports.LoyaltyMerchantcardsDTOCardsAmount = _LoyaltyMerchantcardsDTOCardsAmount2.default;
exports.LoyaltyMerchantcardsDTOCheckPasscode = _LoyaltyMerchantcardsDTOCheckPasscode2.default;
exports.LoyaltyMerchantcardsDTOCsc = _LoyaltyMerchantcardsDTOCsc2.default;
exports.LoyaltyMerchantcardsDTOLock = _LoyaltyMerchantcardsDTOLock2.default;
exports.LoyaltyMerchantcardsDTOPaymentContainer = _LoyaltyMerchantcardsDTOPaymentContainer2.default;
exports.LoyaltyMerchantcardsDTOResetPasscode = _LoyaltyMerchantcardsDTOResetPasscode2.default;
exports.LoyaltyMerchantcardsDTOTransaction = _LoyaltyMerchantcardsDTOTransaction2.default;
exports.LoyaltyMerchantcardsDTOValidateMerchantCard = _LoyaltyMerchantcardsDTOValidateMerchantCard2.default;
exports.LoyaltyMerchantcardsList = _LoyaltyMerchantcardsList2.default;
exports.LoyaltyMerchantcardsProductModel = _LoyaltyMerchantcardsProductModel2.default;
exports.LoyaltyMerchantcardsValidateMerchantCard = _LoyaltyMerchantcardsValidateMerchantCard2.default;
exports.LoyaltyStoregroupsDTO = _LoyaltyStoregroupsDTO2.default;
exports.LoyaltyStoregroupsDTOStoresAddressComponents = _LoyaltyStoregroupsDTOStoresAddressComponents2.default;
exports.LoyaltyStoregroupsList = _LoyaltyStoregroupsList2.default;
exports.LoyaltyStoregroupsProductModel = _LoyaltyStoregroupsProductModel2.default;
exports.OpenHours = _OpenHours2.default;
exports.ParentModel = _ParentModel2.default;
exports.PaymentContainerMandate = _PaymentContainerMandate2.default;
exports.PaymentContainersDTO = _PaymentContainersDTO2.default;
exports.PaymentContainersDTOCustomer = _PaymentContainersDTOCustomer2.default;
exports.PaymentContainersDTOPrivate = _PaymentContainersDTOPrivate2.default;
exports.PaymentContainersList = _PaymentContainersList2.default;
exports.PaymentContainersProductModel = _PaymentContainersProductModel2.default;
exports.PaymentContractsDTO = _PaymentContractsDTO2.default;
exports.PaymentContractsDTOClone = _PaymentContractsDTOClone2.default;
exports.PaymentContractsDTOIFrameOpts = _PaymentContractsDTOIFrameOpts2.default;
exports.PaymentContractsDTORequestId = _PaymentContractsDTORequestId2.default;
exports.PaymentContractsList = _PaymentContractsList2.default;
exports.PaymentContractsProductModel = _PaymentContractsProductModel2.default;
exports.PaymentContractsRequestIdResult = _PaymentContractsRequestIdResult2.default;
exports.PaymentCustomersDTO = _PaymentCustomersDTO2.default;
exports.PaymentCustomersList = _PaymentCustomersList2.default;
exports.PaymentCustomersProductModel = _PaymentCustomersProductModel2.default;
exports.PaymentInformation = _PaymentInformation2.default;
exports.PaymentTransactionsCancelList = _PaymentTransactionsCancelList2.default;
exports.PaymentTransactionsList = _PaymentTransactionsList2.default;
exports.PaymentTransactionsProductModel = _PaymentTransactionsProductModel2.default;
exports.PaymentTransactionsProductModelCustomer = _PaymentTransactionsProductModelCustomer2.default;
exports.PaymentTransactionsProductModelDetails = _PaymentTransactionsProductModelDetails2.default;
exports.PaymentTransactionsProductModelMerchant = _PaymentTransactionsProductModelMerchant2.default;
exports.PaymentTransactionsShippingUrl = _PaymentTransactionsShippingUrl2.default;
exports.PrepaidItemsList = _PrepaidItemsList2.default;
exports.PrepaidItemsProductModel = _PrepaidItemsProductModel2.default;
exports.PrepaidSalesItem = _PrepaidSalesItem2.default;
exports.PrepaidSalesProductModel = _PrepaidSalesProductModel2.default;
exports.PrepaidSalesSmartDevice = _PrepaidSalesSmartDevice2.default;
exports.ProductExceptionPayload = _ProductExceptionPayload2.default;
exports.ProductInstanceID = _ProductInstanceID2.default;
exports.ProductInstanceUID = _ProductInstanceUID2.default;
exports.ReceiptType = _ReceiptType2.default;
exports.ReceiptValue = _ReceiptValue2.default;
exports.SecupayBasketItem = _SecupayBasketItem2.default;
exports.SecupaySubTransactionProductModel = _SecupaySubTransactionProductModel2.default;
exports.SecupayTransactionCancelDTO = _SecupayTransactionCancelDTO2.default;
exports.SecupayTransactionCaptureDTO = _SecupayTransactionCaptureDTO2.default;
exports.SecupayTransactionDTOExternalInvoicePdf = _SecupayTransactionDTOExternalInvoicePdf2.default;
exports.SecupayTransactionExternalInvoicePdf = _SecupayTransactionExternalInvoicePdf2.default;
exports.SecupayTransactionExternalInvoicePdfDocument = _SecupayTransactionExternalInvoicePdfDocument2.default;
exports.SecupayTransactionProductDTO = _SecupayTransactionProductDTO2.default;
exports.SecupayTransactionProductDTOExperience = _SecupayTransactionProductDTOExperience2.default;
exports.SecupayTransactionProductDTOOptData = _SecupayTransactionProductDTOOptData2.default;
exports.SecupayTransactionProductDTORedirectUrl = _SecupayTransactionProductDTORedirectUrl2.default;
exports.SecupayTransactionProductDTOSubscription = _SecupayTransactionProductDTOSubscription2.default;
exports.SecupayTransactionProductModel = _SecupayTransactionProductModel2.default;
exports.SecupayTransactionProductModelRedirectUrl = _SecupayTransactionProductModelRedirectUrl2.default;
exports.SecupayTransactionProductModelTransferAccount = _SecupayTransactionProductModelTransferAccount2.default;
exports.SecupayTransactionProductModelUsedPaymentInstrument = _SecupayTransactionProductModelUsedPaymentInstrument2.default;
exports.SecupayTransactionReverseAccrualDTO = _SecupayTransactionReverseAccrualDTO2.default;
exports.SecupayTransactionSetShippingInformationDTO = _SecupayTransactionSetShippingInformationDTO2.default;
exports.SecupayTransactionUpdateBasketDTO = _SecupayTransactionUpdateBasketDTO2.default;
exports.SmartDeviceProductsEnabled = _SmartDeviceProductsEnabled2.default;
exports.SmartDeviceProductsPrepaid = _SmartDeviceProductsPrepaid2.default;
exports.SmartDevicesDTO = _SmartDevicesDTO2.default;
exports.SmartDevicesDTOPrepaidTid = _SmartDevicesDTOPrepaidTid2.default;
exports.SmartDevicesDTOSecubaseConfig = _SmartDevicesDTOSecubaseConfig2.default;
exports.SmartDevicesDevice = _SmartDevicesDevice2.default;
exports.SmartDevicesList = _SmartDevicesList2.default;
exports.SmartDevicesList1 = _SmartDevicesList4.default;
exports.SmartDevicesProductModel = _SmartDevicesProductModel2.default;
exports.SmartDevicesProducts = _SmartDevicesProducts2.default;
exports.SmartDevicesSecubaseConfig = _SmartDevicesSecubaseConfig2.default;
exports.SmartDevicesSecubaseConfigLogging = _SmartDevicesSecubaseConfigLogging2.default;
exports.SmartDevicesSecubaseConfigLoggingFileNet = _SmartDevicesSecubaseConfigLoggingFileNet2.default;
exports.SmartTransactionsBasket = _SmartTransactionsBasket2.default;
exports.SmartTransactionsBasketInfo = _SmartTransactionsBasketInfo2.default;
exports.SmartTransactionsBasketProduct = _SmartTransactionsBasketProduct2.default;
exports.SmartTransactionsBasketProductGroup = _SmartTransactionsBasketProductGroup2.default;
exports.SmartTransactionsBasketText = _SmartTransactionsBasketText2.default;
exports.SmartTransactionsBonusProducts = _SmartTransactionsBonusProducts2.default;
exports.SmartTransactionsCheckin = _SmartTransactionsCheckin2.default;
exports.SmartTransactionsDTO = _SmartTransactionsDTO2.default;
exports.SmartTransactionsIdent = _SmartTransactionsIdent2.default;
exports.SmartTransactionsList = _SmartTransactionsList2.default;
exports.SmartTransactionsMerchant = _SmartTransactionsMerchant2.default;
exports.SmartTransactionsPickupOptions = _SmartTransactionsPickupOptions2.default;
exports.SmartTransactionsPreTransactionModel = _SmartTransactionsPreTransactionModel2.default;
exports.SmartTransactionsProductModel = _SmartTransactionsProductModel2.default;
exports.SmartTransactionsReceipt = _SmartTransactionsReceipt2.default;
exports.SmartTransactionsReceiptValue = _SmartTransactionsReceiptValue2.default;
exports.Store = _Store2.default;
exports.VirtualTerminalData = _VirtualTerminalData2.default;
exports.DocumentUploadsProductModel = _DocumentUploadsProductModel2.default;
exports.LoyaltyMerchantcardsDTONewPasscode = _LoyaltyMerchantcardsDTONewPasscode2.default;
exports.LoyaltyMerchantcardsProductWithReceiptModel = _LoyaltyMerchantcardsProductWithReceiptModel2.default;
exports.ReceiptTypeValue = _ReceiptTypeValue2.default;
exports.DocumentUploadsApi = _DocumentUploadsApi2.default;
exports.GeneralMerchantsApi = _GeneralMerchantsApi2.default;
exports.GeneralStoresApi = _GeneralStoresApi2.default;
exports.LoyaltyCardgroupsApi = _LoyaltyCardgroupsApi2.default;
exports.LoyaltyCardsApi = _LoyaltyCardsApi2.default;
exports.LoyaltyCustomersApi = _LoyaltyCustomersApi2.default;
exports.LoyaltyMerchantcardsApi = _LoyaltyMerchantcardsApi2.default;
exports.LoyaltySalesApi = _LoyaltySalesApi2.default;
exports.LoyaltyStoregroupsApi = _LoyaltyStoregroupsApi2.default;
exports.PaymentContainersApi = _PaymentContainersApi2.default;
exports.PaymentContractsApi = _PaymentContractsApi2.default;
exports.PaymentCustomersApi = _PaymentCustomersApi2.default;
exports.PaymentSecupayCreditcardsApi = _PaymentSecupayCreditcardsApi2.default;
exports.PaymentSecupayDebitsApi = _PaymentSecupayDebitsApi2.default;
exports.PaymentSecupayInvoicesApi = _PaymentSecupayInvoicesApi2.default;
exports.PaymentSecupayPrepaysApi = _PaymentSecupayPrepaysApi2.default;
exports.PaymentTransactionsApi = _PaymentTransactionsApi2.default;
exports.PrepaidItemsApi = _PrepaidItemsApi2.default;
exports.SmartDevicesApi = _SmartDevicesApi2.default;
exports.SmartTransactionsApi = _SmartTransactionsApi2.default;
exports.StompClient = _StompClient2.default;
exports.StompSmartTransactionsApi = _StompSmartTransactionsApi2.default;
exports.Environments = _StompGlobals2.default;
exports.FrameCommands = _StompGlobals2.default;
exports.Frame = _Frame2.default;
exports.Stomp = _Stomp2.default;
exports.BrowserSocket = _BrowserSocket2.default;
exports.NodeSocket = _NodeSocket2.default;
exports.SocketProvider = _SocketProvider2.default;
},{"./ApiClient":21,"./api/DocumentUploadsApi":22,"./api/GeneralMerchantsApi":23,"./api/GeneralStoresApi":24,"./api/LoyaltyCardgroupsApi":25,"./api/LoyaltyCardsApi":26,"./api/LoyaltyCustomersApi":27,"./api/LoyaltyMerchantcardsApi":28,"./api/LoyaltySalesApi":29,"./api/LoyaltyStoregroupsApi":30,"./api/PaymentContainersApi":31,"./api/PaymentContractsApi":32,"./api/PaymentCustomersApi":33,"./api/PaymentSecupayCreditcardsApi":34,"./api/PaymentSecupayDebitsApi":35,"./api/PaymentSecupayInvoicesApi":36,"./api/PaymentSecupayPrepaysApi":37,"./api/PaymentTransactionsApi":38,"./api/PrepaidItemsApi":39,"./api/SmartDevicesApi":40,"./api/SmartTransactionsApi":41,"./authentication/Authenticator":43,"./authentication/OAuthApplicationUserCredentials":44,"./authentication/OAuthClientCredentials":45,"./authentication/OAuthDeviceCredentials":46,"./cache/FileCache":47,"./cache/SDKCache":48,"./model/Address":50,"./model/AddressComponents":51,"./model/AssignedBy":52,"./model/BankAccountDescriptor":53,"./model/Contact":54,"./model/DayTime":55,"./model/DocumentUploadsBaseProductModel":56,"./model/DocumentUploadsDTOContent":57,"./model/DocumentUploadsProductModel":58,"./model/GeneralMerchantsCheckoutOptions":59,"./model/GeneralMerchantsCheckoutOptionsCollection":60,"./model/GeneralMerchantsCheckoutOptionsCollectionSmartDevices":61,"./model/GeneralMerchantsCheckoutOptionsShipping":62,"./model/GeneralMerchantsDTO":63,"./model/GeneralMerchantsLegalDetails":64,"./model/GeneralMerchantsList":65,"./model/GeneralMerchantsProductModel":66,"./model/GeneralMerchantsUrls":67,"./model/GeneralMerchantsUser":68,"./model/GeneralStoresDTO":69,"./model/GeneralStoresDTOReason":70,"./model/GeneralStoresDTOType":71,"./model/GeneralStoresList":72,"./model/GeneralStoresProductModel":73,"./model/GeoAddress":74,"./model/GeoAddressGeometry":75,"./model/InvitedBy":76,"./model/ItemGroup":77,"./model/LoyaltyCardgroupsDTO":78,"./model/LoyaltyCardgroupsDTOCheckPasscodeEnabled":79,"./model/LoyaltyCardgroupsDTOMerchant":80,"./model/LoyaltyCardgroupsList":81,"./model/LoyaltyCardgroupsProductModel":82,"./model/LoyaltyCardsDTOAccount":83,"./model/LoyaltyCardsList":84,"./model/LoyaltyCardsProductModel":85,"./model/LoyaltyCustomersContactDTO":86,"./model/LoyaltyCustomersDTO":87,"./model/LoyaltyCustomersList":88,"./model/LoyaltyCustomersPaymentContainerModel":89,"./model/LoyaltyCustomersProductModel":90,"./model/LoyaltyCustomersRemoved":91,"./model/LoyaltyDTOMerchant":92,"./model/LoyaltyDTOStore":93,"./model/LoyaltyMerchantcardsDTO":94,"./model/LoyaltyMerchantcardsDTOCardsAmount":95,"./model/LoyaltyMerchantcardsDTOCheckPasscode":96,"./model/LoyaltyMerchantcardsDTOCsc":97,"./model/LoyaltyMerchantcardsDTOLock":98,"./model/LoyaltyMerchantcardsDTONewPasscode":99,"./model/LoyaltyMerchantcardsDTOPaymentContainer":100,"./model/LoyaltyMerchantcardsDTOResetPasscode":101,"./model/LoyaltyMerchantcardsDTOTransaction":102,"./model/LoyaltyMerchantcardsDTOValidateMerchantCard":103,"./model/LoyaltyMerchantcardsList":104,"./model/LoyaltyMerchantcardsProductModel":105,"./model/LoyaltyMerchantcardsProductWithReceiptModel":106,"./model/LoyaltyMerchantcardsValidateMerchantCard":107,"./model/LoyaltyStoregroupsDTO":108,"./model/LoyaltyStoregroupsDTOStoresAddressComponents":109,"./model/LoyaltyStoregroupsList":110,"./model/LoyaltyStoregroupsProductModel":111,"./model/OpenHours":112,"./model/ParentModel":113,"./model/PaymentContainerMandate":114,"./model/PaymentContainersDTO":115,"./model/PaymentContainersDTOCustomer":116,"./model/PaymentContainersDTOPrivate":117,"./model/PaymentContainersList":118,"./model/PaymentContainersProductModel":119,"./model/PaymentContractsDTO":120,"./model/PaymentContractsDTOClone":121,"./model/PaymentContractsDTOIFrameOpts":122,"./model/PaymentContractsDTORequestId":123,"./model/PaymentContractsList":124,"./model/PaymentContractsProductModel":125,"./model/PaymentContractsRequestIdResult":126,"./model/PaymentCustomersDTO":127,"./model/PaymentCustomersList":128,"./model/PaymentCustomersProductModel":129,"./model/PaymentInformation":130,"./model/PaymentTransactionsCancelList":131,"./model/PaymentTransactionsList":132,"./model/PaymentTransactionsProductModel":133,"./model/PaymentTransactionsProductModelCustomer":134,"./model/PaymentTransactionsProductModelDetails":135,"./model/PaymentTransactionsProductModelMerchant":136,"./model/PaymentTransactionsShippingUrl":137,"./model/PrepaidItemsList":138,"./model/PrepaidItemsProductModel":139,"./model/PrepaidSalesItem":140,"./model/PrepaidSalesProductModel":141,"./model/PrepaidSalesSmartDevice":142,"./model/ProductExceptionPayload":143,"./model/ProductInstanceID":144,"./model/ProductInstanceUID":145,"./model/ReceiptType":146,"./model/ReceiptTypeValue":147,"./model/ReceiptValue":148,"./model/SecupayBasketItem":149,"./model/SecupaySubTransactionProductModel":150,"./model/SecupayTransactionCancelDTO":151,"./model/SecupayTransactionCaptureDTO":152,"./model/SecupayTransactionDTOExternalInvoicePdf":153,"./model/SecupayTransactionExternalInvoicePdf":154,"./model/SecupayTransactionExternalInvoicePdfDocument":155,"./model/SecupayTransactionProductDTO":156,"./model/SecupayTransactionProductDTOExperience":157,"./model/SecupayTransactionProductDTOOptData":158,"./model/SecupayTransactionProductDTORedirectUrl":159,"./model/SecupayTransactionProductDTOSubscription":160,"./model/SecupayTransactionProductModel":161,"./model/SecupayTransactionProductModelRedirectUrl":162,"./model/SecupayTransactionProductModelTransferAccount":163,"./model/SecupayTransactionProductModelUsedPaymentInstrument":164,"./model/SecupayTransactionReverseAccrualDTO":165,"./model/SecupayTransactionSetShippingInformationDTO":166,"./model/SecupayTransactionUpdateBasketDTO":167,"./model/SmartDeviceProductsEnabled":168,"./model/SmartDeviceProductsPrepaid":169,"./model/SmartDevicesDTO":170,"./model/SmartDevicesDTOPrepaidTid":171,"./model/SmartDevicesDTOSecubaseConfig":172,"./model/SmartDevicesDevice":173,"./model/SmartDevicesList":174,"./model/SmartDevicesList1":175,"./model/SmartDevicesProductModel":176,"./model/SmartDevicesProducts":177,"./model/SmartDevicesSecubaseConfig":178,"./model/SmartDevicesSecubaseConfigLogging":179,"./model/SmartDevicesSecubaseConfigLoggingFileNet":180,"./model/SmartTransactionsBasket":181,"./model/SmartTransactionsBasketInfo":182,"./model/SmartTransactionsBasketProduct":183,"./model/SmartTransactionsBasketProductGroup":184,"./model/SmartTransactionsBasketText":185,"./model/SmartTransactionsBonusProducts":186,"./model/SmartTransactionsCheckin":187,"./model/SmartTransactionsDTO":188,"./model/SmartTransactionsIdent":189,"./model/SmartTransactionsList":190,"./model/SmartTransactionsMerchant":191,"./model/SmartTransactionsPickupOptions":192,"./model/SmartTransactionsPreTransactionModel":193,"./model/SmartTransactionsProductModel":194,"./model/SmartTransactionsReceipt":195,"./model/SmartTransactionsReceiptValue":196,"./model/Store":197,"./model/VirtualTerminalData":198,"./stomp/StompClient":199,"./stomp/StompGlobals":200,"./stomp/api/StompSmartTransactionsApi":201,"./stomp/frame/Frame":202,"./stomp/main/Stomp":203,"./stomp/socket/BrowserSocket":204,"./stomp/socket/NodeSocket":205,"./stomp/socket/SocketProvider":206}],50:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The Address model module.
* @module model/Address
*/
Address = function () {
    /**
    * Constructs a new <code>Address</code>.
    * Address
    * @alias module:model/Address
    * @class
    */

    function Address() {
        _classCallCheck(this, Address);

        this.type = undefined;
        this.street = undefined;
        this.street_number = undefined;
        this.city = undefined;
        this.postal_code = undefined;
        this.country = undefined;
    }

    /**
    * Constructs a <code>Address</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/Address} obj Optional instance to populate.
    * @return {module:model/Address} The populated <code>Address</code> instance.
    */


    _createClass(Address, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new Address();

                if (data.hasOwnProperty('type')) {
                    obj['type'] = _ApiClient2.default.convertToType(data['type'], 'String');
                }
                if (data.hasOwnProperty('street')) {
                    obj['street'] = _ApiClient2.default.convertToType(data['street'], 'String');
                }
                if (data.hasOwnProperty('street_number')) {
                    obj['street_number'] = _ApiClient2.default.convertToType(data['street_number'], 'String');
                }
                if (data.hasOwnProperty('city')) {
                    obj['city'] = _ApiClient2.default.convertToType(data['city'], 'String');
                }
                if (data.hasOwnProperty('postal_code')) {
                    obj['postal_code'] = _ApiClient2.default.convertToType(data['postal_code'], 'String');
                }
                if (data.hasOwnProperty('country')) {
                    obj['country'] = _ApiClient2.default.convertToType(data['country'], 'String');
                }
            }
            return obj;
        }

        /**
        * Type
        * @member {String} type
        */

        /**
        * Street
        * @member {String} street
        */

        /**
        * Street number
        * @member {String} street_number
        */

        /**
        * City
        * @member {String} city
        */

        /**
        * Postal code
        * @member {String} postal_code
        */

        /**
        * Country
        * @member {String} country
        */

    }]);

    return Address;
}();

exports.default = Address;
},{"../ApiClient":21}],51:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The AddressComponents model module.
* @module model/AddressComponents
*/
AddressComponents = function () {
    /**
    * Constructs a new <code>AddressComponents</code>.
    * @alias module:model/AddressComponents
    * @class
    */

    function AddressComponents() {
        _classCallCheck(this, AddressComponents);

        this.long_name = undefined;
        this.short_name = undefined;
        this.types = undefined;
    }

    /**
    * Constructs a <code>AddressComponents</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/AddressComponents} obj Optional instance to populate.
    * @return {module:model/AddressComponents} The populated <code>AddressComponents</code> instance.
    */


    _createClass(AddressComponents, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new AddressComponents();

                if (data.hasOwnProperty('long_name')) {
                    obj['long_name'] = _ApiClient2.default.convertToType(data['long_name'], 'String');
                }
                if (data.hasOwnProperty('short_name')) {
                    obj['short_name'] = _ApiClient2.default.convertToType(data['short_name'], 'String');
                }
                if (data.hasOwnProperty('types')) {
                    obj['types'] = _ApiClient2.default.convertToType(data['types'], ['String']);
                }
            }
            return obj;
        }

        /**
        * Long name
        * @member {String} long_name
        */

        /**
        * Short name
        * @member {String} short_name
        */

        /**
        * Types
        * @member {Array.<String>} types
        */

    }]);

    return AddressComponents;
}();

exports.default = AddressComponents;
},{"../ApiClient":21}],52:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The AssignedBy model module.
* @module model/AssignedBy
*/
AssignedBy = function () {
    /**
    * Constructs a new <code>AssignedBy</code>.
    * @alias module:model/AssignedBy
    * @class
    */

    function AssignedBy() {
        _classCallCheck(this, AssignedBy);

        this.object = undefined;
        this.id = undefined;
        this.owner = undefined;
    }

    /**
    * Constructs a <code>AssignedBy</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/AssignedBy} obj Optional instance to populate.
    * @return {module:model/AssignedBy} The populated <code>AssignedBy</code> instance.
    */


    _createClass(AssignedBy, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new AssignedBy();

                if (data.hasOwnProperty('object')) {
                    obj['object'] = _ApiClient2.default.convertToType(data['object'], 'String');
                }
                if (data.hasOwnProperty('id')) {
                    obj['id'] = _ApiClient2.default.convertToType(data['id'], 'String');
                }
                if (data.hasOwnProperty('owner')) {
                    obj['owner'] = _ApiClient2.default.convertToType(data['owner'], 'Boolean');
                }
            }
            return obj;
        }

        /**
        * Object of assigned by
        * @member {String} object
        */

        /**
        * Id of assigned by
        * @member {String} id
        */

        /**
        * Owner
        * @member {Boolean} owner
        */

    }]);

    return AssignedBy;
}();

exports.default = AssignedBy;
},{"../ApiClient":21}],53:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The BankAccountDescriptor model module.
* @module model/BankAccountDescriptor
*/
BankAccountDescriptor = function () {
    /**
    * Constructs a new <code>BankAccountDescriptor</code>.
    * Bank account data like owner, iban, bic and bank name
    * @alias module:model/BankAccountDescriptor
    * @class
    */

    function BankAccountDescriptor() {
        _classCallCheck(this, BankAccountDescriptor);

        this.owner = undefined;
        this.iban = undefined;
        this.bic = undefined;
        this.bankname = undefined;
    }

    /**
    * Constructs a <code>BankAccountDescriptor</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/BankAccountDescriptor} obj Optional instance to populate.
    * @return {module:model/BankAccountDescriptor} The populated <code>BankAccountDescriptor</code> instance.
    */


    _createClass(BankAccountDescriptor, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new BankAccountDescriptor();

                if (data.hasOwnProperty('owner')) {
                    obj['owner'] = _ApiClient2.default.convertToType(data['owner'], 'String');
                }
                if (data.hasOwnProperty('iban')) {
                    obj['iban'] = _ApiClient2.default.convertToType(data['iban'], 'String');
                }
                if (data.hasOwnProperty('bic')) {
                    obj['bic'] = _ApiClient2.default.convertToType(data['bic'], 'String');
                }
                if (data.hasOwnProperty('bankname')) {
                    obj['bankname'] = _ApiClient2.default.convertToType(data['bankname'], 'String');
                }
            }
            return obj;
        }

        /**
        * Owner
        * @member {String} owner
        */

        /**
        * IBAN
        * @member {String} iban
        */

        /**
        * BIC
        * @member {String} bic
        */

        /**
        * Bank name
        * @member {String} bankname
        */

    }]);

    return BankAccountDescriptor;
}();

exports.default = BankAccountDescriptor;
},{"../ApiClient":21}],54:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _Address = require('./Address');

var _Address2 = _interopRequireDefault(_Address);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The Contact model module.
* @module model/Contact
*/
Contact = function () {
    /**
    * Constructs a new <code>Contact</code>.
    * @alias module:model/Contact
    * @class
    */

    function Contact() {
        _classCallCheck(this, Contact);

        this.forename = undefined;
        this.surname = undefined;
        this.companyname = undefined;
        this.salutation = undefined;
        this.gender = undefined;
        this.title = undefined;
        this.email = undefined;
        this.phone = undefined;
        this.mobile = undefined;
        this.fax = undefined;
        this.dob = undefined;
        this.picture = undefined;
        this.url_website = undefined;
        this.birthplace = undefined;
        this.nationality = undefined;
        this.address = undefined;
    }

    /**
    * Constructs a <code>Contact</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/Contact} obj Optional instance to populate.
    * @return {module:model/Contact} The populated <code>Contact</code> instance.
    */


    _createClass(Contact, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new Contact();

                if (data.hasOwnProperty('forename')) {
                    obj['forename'] = _ApiClient2.default.convertToType(data['forename'], 'String');
                }
                if (data.hasOwnProperty('surname')) {
                    obj['surname'] = _ApiClient2.default.convertToType(data['surname'], 'String');
                }
                if (data.hasOwnProperty('companyname')) {
                    obj['companyname'] = _ApiClient2.default.convertToType(data['companyname'], 'String');
                }
                if (data.hasOwnProperty('salutation')) {
                    obj['salutation'] = _ApiClient2.default.convertToType(data['salutation'], 'String');
                }
                if (data.hasOwnProperty('gender')) {
                    obj['gender'] = _ApiClient2.default.convertToType(data['gender'], 'String');
                }
                if (data.hasOwnProperty('title')) {
                    obj['title'] = _ApiClient2.default.convertToType(data['title'], 'String');
                }
                if (data.hasOwnProperty('email')) {
                    obj['email'] = _ApiClient2.default.convertToType(data['email'], 'String');
                }
                if (data.hasOwnProperty('phone')) {
                    obj['phone'] = _ApiClient2.default.convertToType(data['phone'], 'String');
                }
                if (data.hasOwnProperty('mobile')) {
                    obj['mobile'] = _ApiClient2.default.convertToType(data['mobile'], 'String');
                }
                if (data.hasOwnProperty('fax')) {
                    obj['fax'] = _ApiClient2.default.convertToType(data['fax'], 'String');
                }
                if (data.hasOwnProperty('dob')) {
                    obj['dob'] = _ApiClient2.default.convertToType(data['dob'], 'String');
                }
                if (data.hasOwnProperty('picture')) {
                    obj['picture'] = _ApiClient2.default.convertToType(data['picture'], 'String');
                }
                if (data.hasOwnProperty('url_website')) {
                    obj['url_website'] = _ApiClient2.default.convertToType(data['url_website'], 'String');
                }
                if (data.hasOwnProperty('birthplace')) {
                    obj['birthplace'] = _ApiClient2.default.convertToType(data['birthplace'], 'String');
                }
                if (data.hasOwnProperty('nationality')) {
                    obj['nationality'] = _ApiClient2.default.convertToType(data['nationality'], 'String');
                }
                if (data.hasOwnProperty('address')) {
                    obj['address'] = _Address2.default.constructFromObject(data['address']);
                }
            }
            return obj;
        }

        /**
        * Forename
        * @member {String} forename
        */

        /**
        * Surname
        * @member {String} surname
        */

        /**
        * Company name
        * @member {String} companyname
        */

        /**
        * Salutation
        * @member {String} salutation
        */

        /**
        * Gender
        * @member {String} gender
        */

        /**
        * Title
        * @member {String} title
        */

        /**
        * Email
        * @member {String} email
        */

        /**
        * Phone
        * @member {String} phone
        */

        /**
        * Mobile
        * @member {String} mobile
        */

        /**
        * Fax
        * @member {String} fax
        */

        /**
        * Date of birth
        * @member {String} dob
        */

        /**
        * The document id of an user picture (To upload the picture use our document service.)
        * @member {String} picture
        */

        /**
        * URL to website
        * @member {String} url_website
        */

        /**
        * Birthplace
        * @member {String} birthplace
        */

        /**
        * Nationality
        * @member {String} nationality
        */

        /**
        * Address
        * @member {module:model/Address} address
        */

    }]);

    return Contact;
}();

exports.default = Contact;
},{"../ApiClient":21,"./Address":50}],55:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The DayTime model module.
* @module model/DayTime
*/
DayTime = function () {
    /**
    * Constructs a new <code>DayTime</code>.
    * Day and time
    * @alias module:model/DayTime
    * @class
    */

    function DayTime() {
        _classCallCheck(this, DayTime);

        this.day = undefined;
        this.time = undefined;
    }

    /**
    * Constructs a <code>DayTime</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/DayTime} obj Optional instance to populate.
    * @return {module:model/DayTime} The populated <code>DayTime</code> instance.
    */


    _createClass(DayTime, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new DayTime();

                if (data.hasOwnProperty('day')) {
                    obj['day'] = _ApiClient2.default.convertToType(data['day'], 'Number');
                }
                if (data.hasOwnProperty('time')) {
                    obj['time'] = _ApiClient2.default.convertToType(data['time'], 'String');
                }
            }
            return obj;
        }

        /**
        * Day
        * @member {Number} day
        */

        /**
        * Time
        * @member {String} time
        */

    }]);

    return DayTime;
}();

exports.default = DayTime;
},{"../ApiClient":21}],56:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The DocumentUploadsBaseProductModel model module.
* @module model/DocumentUploadsBaseProductModel
*/
DocumentUploadsBaseProductModel = function () {
    /**
    * Constructs a new <code>DocumentUploadsBaseProductModel</code>.
    * @alias module:model/DocumentUploadsBaseProductModel
    * @class
    */

    function DocumentUploadsBaseProductModel() {
        _classCallCheck(this, DocumentUploadsBaseProductModel);

        this.object = undefined;
        this.id = undefined;
        this.created = undefined;
    }

    /**
    * Constructs a <code>DocumentUploadsBaseProductModel</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/DocumentUploadsBaseProductModel} obj Optional instance to populate.
    * @return {module:model/DocumentUploadsBaseProductModel} The populated <code>DocumentUploadsBaseProductModel</code> instance.
    */


    _createClass(DocumentUploadsBaseProductModel, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new DocumentUploadsBaseProductModel();

                if (data.hasOwnProperty('object')) {
                    obj['object'] = _ApiClient2.default.convertToType(data['object'], 'String');
                }
                if (data.hasOwnProperty('id')) {
                    obj['id'] = _ApiClient2.default.convertToType(data['id'], 'String');
                }
                if (data.hasOwnProperty('created')) {
                    obj['created'] = _ApiClient2.default.convertToType(data['created'], 'Date');
                }
            }
            return obj;
        }

        /**
        * Object of document upload
        * @member {String} object
        */

        /**
        * Id of document upload
        * @member {String} id
        */

        /**
        * Created at date
        * @member {Date} created
        */

    }]);

    return DocumentUploadsBaseProductModel;
}();

exports.default = DocumentUploadsBaseProductModel;
},{"../ApiClient":21}],57:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The DocumentUploadsDTOContent model module.
* @module model/DocumentUploadsDTOContent
*/
DocumentUploadsDTOContent = function () {
    /**
    * Constructs a new <code>DocumentUploadsDTOContent</code>.
    * @alias module:model/DocumentUploadsDTOContent
    * @class
    */

    function DocumentUploadsDTOContent() {
        _classCallCheck(this, DocumentUploadsDTOContent);

        this.content = undefined;
    }

    /**
    * Constructs a <code>DocumentUploadsDTOContent</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/DocumentUploadsDTOContent} obj Optional instance to populate.
    * @return {module:model/DocumentUploadsDTOContent} The populated <code>DocumentUploadsDTOContent</code> instance.
    */


    _createClass(DocumentUploadsDTOContent, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new DocumentUploadsDTOContent();

                if (data.hasOwnProperty('content')) {
                    obj['content'] = _ApiClient2.default.convertToType(data['content'], 'String');
                }
            }
            return obj;
        }

        /**
        * Content
        * @member {String} content
        */

    }]);

    return DocumentUploadsDTOContent;
}();

exports.default = DocumentUploadsDTOContent;
},{"../ApiClient":21}],58:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _DocumentUploadsBaseProductModel = require('./DocumentUploadsBaseProductModel');

var _DocumentUploadsBaseProductModel2 = _interopRequireDefault(_DocumentUploadsBaseProductModel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The DocumentUploadsProductModel model module.
* @module model/DocumentUploadsProductModel
*/
DocumentUploadsProductModel = function () {
    /**
    * Constructs a new <code>DocumentUploadsProductModel</code>.
    * @alias module:model/DocumentUploadsProductModel
    * @class
    * @implements module:model/DocumentUploadsBaseProductModel
    */

    function DocumentUploadsProductModel() {
        _classCallCheck(this, DocumentUploadsProductModel);

        this.type = undefined;
        this.name = undefined;
        this.size = undefined;
        this.object = undefined;
        this.id = undefined;
        this.created = undefined;


        _DocumentUploadsBaseProductModel2.default.call(this);
    }

    /**
    * Constructs a <code>DocumentUploadsProductModel</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/DocumentUploadsProductModel} obj Optional instance to populate.
    * @return {module:model/DocumentUploadsProductModel} The populated <code>DocumentUploadsProductModel</code> instance.
    */


    _createClass(DocumentUploadsProductModel, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new DocumentUploadsProductModel();

                _DocumentUploadsBaseProductModel2.default.constructFromObject(data, obj);

                if (data.hasOwnProperty('type')) {
                    obj['type'] = _ApiClient2.default.convertToType(data['type'], 'String');
                }
                if (data.hasOwnProperty('name')) {
                    obj['name'] = _ApiClient2.default.convertToType(data['name'], 'String');
                }
                if (data.hasOwnProperty('size')) {
                    obj['size'] = _ApiClient2.default.convertToType(data['size'], 'Number');
                }
            }
            return obj;
        }

        /**
        * Type
        * @member {String} type
        */

        /**
        * Name
        * @member {String} name
        */

        /**
        * Size
        * @member {Number} size
        */


        // Implement DocumentUploadsBaseProductModel interface:
        /**
        * Object of document upload
        * @member {String} object
        */

        /**
            * Id of document upload
            * @member {String} id
            */

        /**
            * Created at date
            * @member {Date} created
            */

    }]);

    return DocumentUploadsProductModel;
}();

exports.default = DocumentUploadsProductModel;
},{"../ApiClient":21,"./DocumentUploadsBaseProductModel":56}],59:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _GeneralMerchantsCheckoutOptionsCollection = require('./GeneralMerchantsCheckoutOptionsCollection');

var _GeneralMerchantsCheckoutOptionsCollection2 = _interopRequireDefault(_GeneralMerchantsCheckoutOptionsCollection);

var _GeneralMerchantsCheckoutOptionsShipping = require('./GeneralMerchantsCheckoutOptionsShipping');

var _GeneralMerchantsCheckoutOptionsShipping2 = _interopRequireDefault(_GeneralMerchantsCheckoutOptionsShipping);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The GeneralMerchantsCheckoutOptions model module.
* @module model/GeneralMerchantsCheckoutOptions
*/
GeneralMerchantsCheckoutOptions = function () {
    /**
    * Constructs a new <code>GeneralMerchantsCheckoutOptions</code>.
    * @alias module:model/GeneralMerchantsCheckoutOptions
    * @class
    */

    function GeneralMerchantsCheckoutOptions() {
        _classCallCheck(this, GeneralMerchantsCheckoutOptions);

        this.enabled = undefined;
        this.shipping = undefined;
        this.collection = undefined;
    }

    /**
    * Constructs a <code>GeneralMerchantsCheckoutOptions</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/GeneralMerchantsCheckoutOptions} obj Optional instance to populate.
    * @return {module:model/GeneralMerchantsCheckoutOptions} The populated <code>GeneralMerchantsCheckoutOptions</code> instance.
    */


    _createClass(GeneralMerchantsCheckoutOptions, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new GeneralMerchantsCheckoutOptions();

                if (data.hasOwnProperty('enabled')) {
                    obj['enabled'] = _ApiClient2.default.convertToType(data['enabled'], 'Boolean');
                }
                if (data.hasOwnProperty('shipping')) {
                    obj['shipping'] = _GeneralMerchantsCheckoutOptionsShipping2.default.constructFromObject(data['shipping']);
                }
                if (data.hasOwnProperty('collection')) {
                    obj['collection'] = _GeneralMerchantsCheckoutOptionsCollection2.default.constructFromObject(data['collection']);
                }
            }
            return obj;
        }

        /**
        * Enabled
        * @member {Boolean} enabled
        */

        /**
        * Shipping
        * @member {module:model/GeneralMerchantsCheckoutOptionsShipping} shipping
        */

        /**
        * Collection
        * @member {module:model/GeneralMerchantsCheckoutOptionsCollection} collection
        */

    }]);

    return GeneralMerchantsCheckoutOptions;
}();

exports.default = GeneralMerchantsCheckoutOptions;
},{"../ApiClient":21,"./GeneralMerchantsCheckoutOptionsCollection":60,"./GeneralMerchantsCheckoutOptionsShipping":62}],60:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _GeneralMerchantsCheckoutOptionsCollectionSmartDevices = require('./GeneralMerchantsCheckoutOptionsCollectionSmartDevices');

var _GeneralMerchantsCheckoutOptionsCollectionSmartDevices2 = _interopRequireDefault(_GeneralMerchantsCheckoutOptionsCollectionSmartDevices);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The GeneralMerchantsCheckoutOptionsCollection model module.
* @module model/GeneralMerchantsCheckoutOptionsCollection
*/
GeneralMerchantsCheckoutOptionsCollection = function () {
    /**
    * Constructs a new <code>GeneralMerchantsCheckoutOptionsCollection</code>.
    * @alias module:model/GeneralMerchantsCheckoutOptionsCollection
    * @class
    */

    function GeneralMerchantsCheckoutOptionsCollection() {
        _classCallCheck(this, GeneralMerchantsCheckoutOptionsCollection);

        this.enabled = undefined;
        this.smart_devices = undefined;
    }

    /**
    * Constructs a <code>GeneralMerchantsCheckoutOptionsCollection</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/GeneralMerchantsCheckoutOptionsCollection} obj Optional instance to populate.
    * @return {module:model/GeneralMerchantsCheckoutOptionsCollection} The populated <code>GeneralMerchantsCheckoutOptionsCollection</code> instance.
    */


    _createClass(GeneralMerchantsCheckoutOptionsCollection, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new GeneralMerchantsCheckoutOptionsCollection();

                if (data.hasOwnProperty('enabled')) {
                    obj['enabled'] = _ApiClient2.default.convertToType(data['enabled'], 'Boolean');
                }
                if (data.hasOwnProperty('smart_devices')) {
                    obj['smart_devices'] = _GeneralMerchantsCheckoutOptionsCollectionSmartDevices2.default.constructFromObject(data['smart_devices']);
                }
            }
            return obj;
        }

        /**
        * Enabled
        * @member {Boolean} enabled
        */

        /**
        * Smart devices
        * @member {module:model/GeneralMerchantsCheckoutOptionsCollectionSmartDevices} smart_devices
        */

    }]);

    return GeneralMerchantsCheckoutOptionsCollection;
}();

exports.default = GeneralMerchantsCheckoutOptionsCollection;
},{"../ApiClient":21,"./GeneralMerchantsCheckoutOptionsCollectionSmartDevices":61}],61:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _Store = require('./Store');

var _Store2 = _interopRequireDefault(_Store);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The GeneralMerchantsCheckoutOptionsCollectionSmartDevices model module.
* @module model/GeneralMerchantsCheckoutOptionsCollectionSmartDevices
*/
GeneralMerchantsCheckoutOptionsCollectionSmartDevices = function () {
    /**
    * Constructs a new <code>GeneralMerchantsCheckoutOptionsCollectionSmartDevices</code>.
    * @alias module:model/GeneralMerchantsCheckoutOptionsCollectionSmartDevices
    * @class
    */

    function GeneralMerchantsCheckoutOptionsCollectionSmartDevices() {
        _classCallCheck(this, GeneralMerchantsCheckoutOptionsCollectionSmartDevices);

        this.object = undefined;
        this.id = undefined;
        this.description = undefined;
        this.store = undefined;
    }

    /**
    * Constructs a <code>GeneralMerchantsCheckoutOptionsCollectionSmartDevices</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/GeneralMerchantsCheckoutOptionsCollectionSmartDevices} obj Optional instance to populate.
    * @return {module:model/GeneralMerchantsCheckoutOptionsCollectionSmartDevices} The populated <code>GeneralMerchantsCheckoutOptionsCollectionSmartDevices</code> instance.
    */


    _createClass(GeneralMerchantsCheckoutOptionsCollectionSmartDevices, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new GeneralMerchantsCheckoutOptionsCollectionSmartDevices();

                if (data.hasOwnProperty('object')) {
                    obj['object'] = _ApiClient2.default.convertToType(data['object'], 'String');
                }
                if (data.hasOwnProperty('id')) {
                    obj['id'] = _ApiClient2.default.convertToType(data['id'], 'String');
                }
                if (data.hasOwnProperty('description')) {
                    obj['description'] = _ApiClient2.default.convertToType(data['description'], 'String');
                }
                if (data.hasOwnProperty('store')) {
                    obj['store'] = _Store2.default.constructFromObject(data['store']);
                }
            }
            return obj;
        }

        /**
        * Object of smart device
        * @member {String} object
        */

        /**
        * Id of smart device
        * @member {String} id
        */

        /**
        * Description of smart device
        * @member {String} description
        */

        /**
        * Store
        * @member {module:model/Store} store
        */

    }]);

    return GeneralMerchantsCheckoutOptionsCollectionSmartDevices;
}();

exports.default = GeneralMerchantsCheckoutOptionsCollectionSmartDevices;
},{"../ApiClient":21,"./Store":197}],62:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The GeneralMerchantsCheckoutOptionsShipping model module.
* @module model/GeneralMerchantsCheckoutOptionsShipping
*/
GeneralMerchantsCheckoutOptionsShipping = function () {
    /**
    * Constructs a new <code>GeneralMerchantsCheckoutOptionsShipping</code>.
    * @alias module:model/GeneralMerchantsCheckoutOptionsShipping
    * @class
    */

    function GeneralMerchantsCheckoutOptionsShipping() {
        _classCallCheck(this, GeneralMerchantsCheckoutOptionsShipping);

        this.enabled = undefined;
    }

    /**
    * Constructs a <code>GeneralMerchantsCheckoutOptionsShipping</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/GeneralMerchantsCheckoutOptionsShipping} obj Optional instance to populate.
    * @return {module:model/GeneralMerchantsCheckoutOptionsShipping} The populated <code>GeneralMerchantsCheckoutOptionsShipping</code> instance.
    */


    _createClass(GeneralMerchantsCheckoutOptionsShipping, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new GeneralMerchantsCheckoutOptionsShipping();

                if (data.hasOwnProperty('enabled')) {
                    obj['enabled'] = _ApiClient2.default.convertToType(data['enabled'], 'Boolean');
                }
            }
            return obj;
        }

        /**
        * Enabled
        * @member {Boolean} enabled
        */

    }]);

    return GeneralMerchantsCheckoutOptionsShipping;
}();

exports.default = GeneralMerchantsCheckoutOptionsShipping;
},{"../ApiClient":21}],63:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _GeneralMerchantsCheckoutOptions = require('./GeneralMerchantsCheckoutOptions');

var _GeneralMerchantsCheckoutOptions2 = _interopRequireDefault(_GeneralMerchantsCheckoutOptions);

var _GeneralMerchantsLegalDetails = require('./GeneralMerchantsLegalDetails');

var _GeneralMerchantsLegalDetails2 = _interopRequireDefault(_GeneralMerchantsLegalDetails);

var _GeneralMerchantsUrls = require('./GeneralMerchantsUrls');

var _GeneralMerchantsUrls2 = _interopRequireDefault(_GeneralMerchantsUrls);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The GeneralMerchantsDTO model module.
* @module model/GeneralMerchantsDTO
*/
GeneralMerchantsDTO = function () {
    /**
    * Constructs a new <code>GeneralMerchantsDTO</code>.
    * @alias module:model/GeneralMerchantsDTO
    * @class
    */

    function GeneralMerchantsDTO() {
        _classCallCheck(this, GeneralMerchantsDTO);

        this.legal_details = undefined;
        this.checkout_options = undefined;
        this.urls = undefined;
    }

    /**
    * Constructs a <code>GeneralMerchantsDTO</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/GeneralMerchantsDTO} obj Optional instance to populate.
    * @return {module:model/GeneralMerchantsDTO} The populated <code>GeneralMerchantsDTO</code> instance.
    */


    _createClass(GeneralMerchantsDTO, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new GeneralMerchantsDTO();

                if (data.hasOwnProperty('legal_details')) {
                    obj['legal_details'] = _ApiClient2.default.convertToType(data['legal_details'], [_GeneralMerchantsLegalDetails2.default]);
                }
                if (data.hasOwnProperty('checkout_options')) {
                    obj['checkout_options'] = _GeneralMerchantsCheckoutOptions2.default.constructFromObject(data['checkout_options']);
                }
                if (data.hasOwnProperty('urls')) {
                    obj['urls'] = _ApiClient2.default.convertToType(data['urls'], [_GeneralMerchantsUrls2.default]);
                }
            }
            return obj;
        }

        /**
        * Legal details
        * @member {Array.<module:model/GeneralMerchantsLegalDetails>} legal_details
        */

        /**
        * Checkout options
        * @member {module:model/GeneralMerchantsCheckoutOptions} checkout_options
        */

        /**
        * Urls
        * @member {Array.<module:model/GeneralMerchantsUrls>} urls
        */

    }]);

    return GeneralMerchantsDTO;
}();

exports.default = GeneralMerchantsDTO;
},{"../ApiClient":21,"./GeneralMerchantsCheckoutOptions":59,"./GeneralMerchantsLegalDetails":64,"./GeneralMerchantsUrls":67}],64:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The GeneralMerchantsLegalDetails model module.
* @module model/GeneralMerchantsLegalDetails
*/
GeneralMerchantsLegalDetails = function () {
    /**
    * Constructs a new <code>GeneralMerchantsLegalDetails</code>.
    * @alias module:model/GeneralMerchantsLegalDetails
    * @class
    */

    function GeneralMerchantsLegalDetails() {
        _classCallCheck(this, GeneralMerchantsLegalDetails);

        this.url = undefined;
        this.type = undefined;
        this.content_type = undefined;
        this.language = undefined;
    }

    /**
    * Constructs a <code>GeneralMerchantsLegalDetails</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/GeneralMerchantsLegalDetails} obj Optional instance to populate.
    * @return {module:model/GeneralMerchantsLegalDetails} The populated <code>GeneralMerchantsLegalDetails</code> instance.
    */


    _createClass(GeneralMerchantsLegalDetails, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new GeneralMerchantsLegalDetails();

                if (data.hasOwnProperty('url')) {
                    obj['url'] = _ApiClient2.default.convertToType(data['url'], 'String');
                }
                if (data.hasOwnProperty('type')) {
                    obj['type'] = _ApiClient2.default.convertToType(data['type'], 'String');
                }
                if (data.hasOwnProperty('content_type')) {
                    obj['content_type'] = _ApiClient2.default.convertToType(data['content_type'], 'String');
                }
                if (data.hasOwnProperty('language')) {
                    obj['language'] = _ApiClient2.default.convertToType(data['language'], 'String');
                }
            }
            return obj;
        }

        /**
        * Url
        * @member {String} url
        */

        /**
        * Type
        * @member {String} type
        */

        /**
        * Content type
        * @member {String} content_type
        */

        /**
        * Language
        * @member {String} language
        */

    }]);

    return GeneralMerchantsLegalDetails;
}();

exports.default = GeneralMerchantsLegalDetails;
},{"../ApiClient":21}],65:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _GeneralMerchantsProductModel = require('./GeneralMerchantsProductModel');

var _GeneralMerchantsProductModel2 = _interopRequireDefault(_GeneralMerchantsProductModel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The GeneralMerchantsList model module.
* @module model/GeneralMerchantsList
*/
GeneralMerchantsList = function () {
    /**
    * Constructs a new <code>GeneralMerchantsList</code>.
    * @alias module:model/GeneralMerchantsList
    * @class
    */

    function GeneralMerchantsList() {
        _classCallCheck(this, GeneralMerchantsList);

        this.count = undefined;
        this.data = undefined;
    }

    /**
    * Constructs a <code>GeneralMerchantsList</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/GeneralMerchantsList} obj Optional instance to populate.
    * @return {module:model/GeneralMerchantsList} The populated <code>GeneralMerchantsList</code> instance.
    */


    _createClass(GeneralMerchantsList, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new GeneralMerchantsList();

                if (data.hasOwnProperty('count')) {
                    obj['count'] = _ApiClient2.default.convertToType(data['count'], 'Number');
                }
                if (data.hasOwnProperty('data')) {
                    obj['data'] = _ApiClient2.default.convertToType(data['data'], [_GeneralMerchantsProductModel2.default]);
                }
            }
            return obj;
        }

        /**
        * Number of existing general merchants
        * @member {Number} count
        */

        /**
        * GET General/Merchants
        * @member {Array.<module:model/GeneralMerchantsProductModel>} data
        */

    }]);

    return GeneralMerchantsList;
}();

exports.default = GeneralMerchantsList;
},{"../ApiClient":21,"./GeneralMerchantsProductModel":66}],66:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _AssignedBy = require('./AssignedBy');

var _AssignedBy2 = _interopRequireDefault(_AssignedBy);

var _GeneralMerchantsCheckoutOptions = require('./GeneralMerchantsCheckoutOptions');

var _GeneralMerchantsCheckoutOptions2 = _interopRequireDefault(_GeneralMerchantsCheckoutOptions);

var _GeneralMerchantsLegalDetails = require('./GeneralMerchantsLegalDetails');

var _GeneralMerchantsLegalDetails2 = _interopRequireDefault(_GeneralMerchantsLegalDetails);

var _GeneralMerchantsUrls = require('./GeneralMerchantsUrls');

var _GeneralMerchantsUrls2 = _interopRequireDefault(_GeneralMerchantsUrls);

var _GeneralMerchantsUser = require('./GeneralMerchantsUser');

var _GeneralMerchantsUser2 = _interopRequireDefault(_GeneralMerchantsUser);

var _InvitedBy = require('./InvitedBy');

var _InvitedBy2 = _interopRequireDefault(_InvitedBy);

var _ParentModel = require('./ParentModel');

var _ParentModel2 = _interopRequireDefault(_ParentModel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The GeneralMerchantsProductModel model module.
* @module model/GeneralMerchantsProductModel
*/
GeneralMerchantsProductModel = function () {
    /**
    * Constructs a new <code>GeneralMerchantsProductModel</code>.
    * @alias module:model/GeneralMerchantsProductModel
    * @class
    */

    function GeneralMerchantsProductModel() {
        _classCallCheck(this, GeneralMerchantsProductModel);

        this.object = undefined;
        this.id = undefined;
        this.id_old = undefined;
        this.type = undefined;
        this.user = undefined;
        this.parent = undefined;
        this.assigned_by = undefined;
        this.invited_by = undefined;
        this.legal_details = undefined;
        this.checkout_options = undefined;
        this.urls = undefined;
    }

    /**
    * Constructs a <code>GeneralMerchantsProductModel</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/GeneralMerchantsProductModel} obj Optional instance to populate.
    * @return {module:model/GeneralMerchantsProductModel} The populated <code>GeneralMerchantsProductModel</code> instance.
    */


    _createClass(GeneralMerchantsProductModel, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new GeneralMerchantsProductModel();

                if (data.hasOwnProperty('object')) {
                    obj['object'] = _ApiClient2.default.convertToType(data['object'], 'String');
                }
                if (data.hasOwnProperty('id')) {
                    obj['id'] = _ApiClient2.default.convertToType(data['id'], 'String');
                }
                if (data.hasOwnProperty('id_old')) {
                    obj['id_old'] = _ApiClient2.default.convertToType(data['id_old'], 'String');
                }
                if (data.hasOwnProperty('type')) {
                    obj['type'] = _ApiClient2.default.convertToType(data['type'], 'String');
                }
                if (data.hasOwnProperty('user')) {
                    obj['user'] = _GeneralMerchantsUser2.default.constructFromObject(data['user']);
                }
                if (data.hasOwnProperty('parent')) {
                    obj['parent'] = _ParentModel2.default.constructFromObject(data['parent']);
                }
                if (data.hasOwnProperty('assigned_by')) {
                    obj['assigned_by'] = _ApiClient2.default.convertToType(data['assigned_by'], [_AssignedBy2.default]);
                }
                if (data.hasOwnProperty('invited_by')) {
                    obj['invited_by'] = _ApiClient2.default.convertToType(data['invited_by'], [_InvitedBy2.default]);
                }
                if (data.hasOwnProperty('legal_details')) {
                    obj['legal_details'] = _GeneralMerchantsLegalDetails2.default.constructFromObject(data['legal_details']);
                }
                if (data.hasOwnProperty('checkout_options')) {
                    obj['checkout_options'] = _GeneralMerchantsCheckoutOptions2.default.constructFromObject(data['checkout_options']);
                }
                if (data.hasOwnProperty('urls')) {
                    obj['urls'] = _GeneralMerchantsUrls2.default.constructFromObject(data['urls']);
                }
            }
            return obj;
        }

        /**
        * Object of general merchant
        * @member {String} object
        */

        /**
        * Id of general merchant
        * @member {String} id
        */

        /**
        * Old id of general merchant
        * @member {String} id_old
        */

        /**
        * Type of general merchant
        * @member {String} type
        */

        /**
        * General merchant user
        * @member {module:model/GeneralMerchantsUser} user
        */

        /**
        * Parent of general merchant user
        * @member {module:model/ParentModel} parent
        */

        /**
        * Assigned by
        * @member {Array.<module:model/AssignedBy>} assigned_by
        */

        /**
        * Invited by
        * @member {Array.<module:model/InvitedBy>} invited_by
        */

        /**
        * Legal details
        * @member {module:model/GeneralMerchantsLegalDetails} legal_details
        */

        /**
        * Checkout options
        * @member {module:model/GeneralMerchantsCheckoutOptions} checkout_options
        */

        /**
        * Urls
        * @member {module:model/GeneralMerchantsUrls} urls
        */

    }]);

    return GeneralMerchantsProductModel;
}();

exports.default = GeneralMerchantsProductModel;
},{"../ApiClient":21,"./AssignedBy":52,"./GeneralMerchantsCheckoutOptions":59,"./GeneralMerchantsLegalDetails":64,"./GeneralMerchantsUrls":67,"./GeneralMerchantsUser":68,"./InvitedBy":76,"./ParentModel":113}],67:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The GeneralMerchantsUrls model module.
* @module model/GeneralMerchantsUrls
*/
GeneralMerchantsUrls = function () {
    /**
    * Constructs a new <code>GeneralMerchantsUrls</code>.
    * @alias module:model/GeneralMerchantsUrls
    * @class
    */

    function GeneralMerchantsUrls() {
        _classCallCheck(this, GeneralMerchantsUrls);

        this.type = undefined;
        this.url = undefined;
    }

    /**
    * Constructs a <code>GeneralMerchantsUrls</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/GeneralMerchantsUrls} obj Optional instance to populate.
    * @return {module:model/GeneralMerchantsUrls} The populated <code>GeneralMerchantsUrls</code> instance.
    */


    _createClass(GeneralMerchantsUrls, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new GeneralMerchantsUrls();

                if (data.hasOwnProperty('type')) {
                    obj['type'] = _ApiClient2.default.convertToType(data['type'], 'String');
                }
                if (data.hasOwnProperty('url')) {
                    obj['url'] = _ApiClient2.default.convertToType(data['url'], 'String');
                }
            }
            return obj;
        }

        /**
        * Type of urls
        * @member {String} type
        */

        /**
        * Url
        * @member {String} url
        */

    }]);

    return GeneralMerchantsUrls;
}();

exports.default = GeneralMerchantsUrls;
},{"../ApiClient":21}],68:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _GeoAddress = require('./GeoAddress');

var _GeoAddress2 = _interopRequireDefault(_GeoAddress);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The GeneralMerchantsUser model module.
* @module model/GeneralMerchantsUser
*/
GeneralMerchantsUser = function () {
    /**
    * Constructs a new <code>GeneralMerchantsUser</code>.
    * @alias module:model/GeneralMerchantsUser
    * @class
    */

    function GeneralMerchantsUser() {
        _classCallCheck(this, GeneralMerchantsUser);

        this.object = undefined;
        this.id = undefined;
        this.name = undefined;
        this.companyname = undefined;
        this.address = undefined;
    }

    /**
    * Constructs a <code>GeneralMerchantsUser</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/GeneralMerchantsUser} obj Optional instance to populate.
    * @return {module:model/GeneralMerchantsUser} The populated <code>GeneralMerchantsUser</code> instance.
    */


    _createClass(GeneralMerchantsUser, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new GeneralMerchantsUser();

                if (data.hasOwnProperty('object')) {
                    obj['object'] = _ApiClient2.default.convertToType(data['object'], 'String');
                }
                if (data.hasOwnProperty('id')) {
                    obj['id'] = _ApiClient2.default.convertToType(data['id'], 'String');
                }
                if (data.hasOwnProperty('name')) {
                    obj['name'] = _ApiClient2.default.convertToType(data['name'], 'String');
                }
                if (data.hasOwnProperty('companyname')) {
                    obj['companyname'] = _ApiClient2.default.convertToType(data['companyname'], 'String');
                }
                if (data.hasOwnProperty('address')) {
                    obj['address'] = _ApiClient2.default.convertToType(data['address'], [_GeoAddress2.default]);
                }
            }
            return obj;
        }

        /**
        * Object of general merchant user
        * @member {String} object
        */

        /**
        * Id of general merchant user
        * @member {String} id
        */

        /**
        * Name of general merchant user
        * @member {String} name
        */

        /**
        * Company name of general merchant user
        * @member {String} companyname
        */

        /**
        * Address of general merchant user
        * @member {Array.<module:model/GeoAddress>} address
        */

    }]);

    return GeneralMerchantsUser;
}();

exports.default = GeneralMerchantsUser;
},{"../ApiClient":21,"./GeoAddress":74}],69:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _Address = require('./Address');

var _Address2 = _interopRequireDefault(_Address);

var _OpenHours = require('./OpenHours');

var _OpenHours2 = _interopRequireDefault(_OpenHours);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The GeneralStoresDTO model module.
* @module model/GeneralStoresDTO
*/
GeneralStoresDTO = function () {
    /**
    * Constructs a new <code>GeneralStoresDTO</code>.
    * @alias module:model/GeneralStoresDTO
    * @class
    */

    function GeneralStoresDTO() {
        _classCallCheck(this, GeneralStoresDTO);

        this.address = undefined;
        this.facebook_id = undefined;
        this.phone = undefined;
        this.url_website = undefined;
        this.photo_main = undefined;
        this.photo = undefined;
        this.open_hours = undefined;
    }

    /**
    * Constructs a <code>GeneralStoresDTO</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/GeneralStoresDTO} obj Optional instance to populate.
    * @return {module:model/GeneralStoresDTO} The populated <code>GeneralStoresDTO</code> instance.
    */


    _createClass(GeneralStoresDTO, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new GeneralStoresDTO();

                if (data.hasOwnProperty('address')) {
                    obj['address'] = _Address2.default.constructFromObject(data['address']);
                }
                if (data.hasOwnProperty('facebook_id')) {
                    obj['facebook_id'] = _ApiClient2.default.convertToType(data['facebook_id'], 'String');
                }
                if (data.hasOwnProperty('phone')) {
                    obj['phone'] = _ApiClient2.default.convertToType(data['phone'], 'String');
                }
                if (data.hasOwnProperty('url_website')) {
                    obj['url_website'] = _ApiClient2.default.convertToType(data['url_website'], 'String');
                }
                if (data.hasOwnProperty('photo_main')) {
                    obj['photo_main'] = _ApiClient2.default.convertToType(data['photo_main'], 'String');
                }
                if (data.hasOwnProperty('photo')) {
                    obj['photo'] = _ApiClient2.default.convertToType(data['photo'], ['String']);
                }
                if (data.hasOwnProperty('open_hours')) {
                    obj['open_hours'] = _ApiClient2.default.convertToType(data['open_hours'], [_OpenHours2.default]);
                }
            }
            return obj;
        }

        /**
        * New address
        * @member {module:model/Address} address
        */

        /**
        * New facebook id
        * @member {String} facebook_id
        */

        /**
        * New phone number
        * @member {String} phone
        */

        /**
        * New url to general store website
        * @member {String} url_website
        */

        /**
        * New main photo
        * @member {String} photo_main
        */

        /**
        * New photos
        * @member {Array.<String>} photo
        */

        /**
        * Open hours in every day
        * @member {Array.<module:model/OpenHours>} open_hours
        */

    }]);

    return GeneralStoresDTO;
}();

exports.default = GeneralStoresDTO;
},{"../ApiClient":21,"./Address":50,"./OpenHours":112}],70:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The GeneralStoresDTOReason model module.
* @module model/GeneralStoresDTOReason
*/
GeneralStoresDTOReason = function () {
    /**
    * Constructs a new <code>GeneralStoresDTOReason</code>.
    * @alias module:model/GeneralStoresDTOReason
    * @class
    */

    function GeneralStoresDTOReason() {
        _classCallCheck(this, GeneralStoresDTOReason);

        this.reason = undefined;
    }

    /**
    * Constructs a <code>GeneralStoresDTOReason</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/GeneralStoresDTOReason} obj Optional instance to populate.
    * @return {module:model/GeneralStoresDTOReason} The populated <code>GeneralStoresDTOReason</code> instance.
    */


    _createClass(GeneralStoresDTOReason, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new GeneralStoresDTOReason();

                if (data.hasOwnProperty('reason')) {
                    obj['reason'] = _ApiClient2.default.convertToType(data['reason'], 'String');
                }
            }
            return obj;
        }

        /**
        * Reason
        * @member {String} reason
        */

    }]);

    return GeneralStoresDTOReason;
}();

exports.default = GeneralStoresDTOReason;
},{"../ApiClient":21}],71:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The GeneralStoresDTOType model module.
* @module model/GeneralStoresDTOType
*/
GeneralStoresDTOType = function () {
    /**
    * Constructs a new <code>GeneralStoresDTOType</code>.
    * @alias module:model/GeneralStoresDTOType
    * @class
    */

    function GeneralStoresDTOType() {
        _classCallCheck(this, GeneralStoresDTOType);

        this.type = undefined;
    }

    /**
    * Constructs a <code>GeneralStoresDTOType</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/GeneralStoresDTOType} obj Optional instance to populate.
    * @return {module:model/GeneralStoresDTOType} The populated <code>GeneralStoresDTOType</code> instance.
    */


    _createClass(GeneralStoresDTOType, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new GeneralStoresDTOType();

                if (data.hasOwnProperty('type')) {
                    obj['type'] = _ApiClient2.default.convertToType(data['type'], 'String');
                }
            }
            return obj;
        }

        /**
        * Type
        * @member {String} type
        */

    }]);

    return GeneralStoresDTOType;
}();

exports.default = GeneralStoresDTOType;
},{"../ApiClient":21}],72:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _GeneralStoresProductModel = require('./GeneralStoresProductModel');

var _GeneralStoresProductModel2 = _interopRequireDefault(_GeneralStoresProductModel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The GeneralStoresList model module.
* @module model/GeneralStoresList
*/
GeneralStoresList = function () {
    /**
    * Constructs a new <code>GeneralStoresList</code>.
    * @alias module:model/GeneralStoresList
    * @class
    */

    function GeneralStoresList() {
        _classCallCheck(this, GeneralStoresList);

        this.count = undefined;
        this.data = undefined;
    }

    /**
    * Constructs a <code>GeneralStoresList</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/GeneralStoresList} obj Optional instance to populate.
    * @return {module:model/GeneralStoresList} The populated <code>GeneralStoresList</code> instance.
    */


    _createClass(GeneralStoresList, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new GeneralStoresList();

                if (data.hasOwnProperty('count')) {
                    obj['count'] = _ApiClient2.default.convertToType(data['count'], 'Number');
                }
                if (data.hasOwnProperty('data')) {
                    obj['data'] = _ApiClient2.default.convertToType(data['data'], [_GeneralStoresProductModel2.default]);
                }
            }
            return obj;
        }

        /**
        * Number of existing general stores
        * @member {Number} count
        */

        /**
        * GET General/Stores
        * @member {Array.<module:model/GeneralStoresProductModel>} data
        */

    }]);

    return GeneralStoresList;
}();

exports.default = GeneralStoresList;
},{"../ApiClient":21,"./GeneralStoresProductModel":73}],73:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _AddressComponents = require('./AddressComponents');

var _AddressComponents2 = _interopRequireDefault(_AddressComponents);

var _AssignedBy = require('./AssignedBy');

var _AssignedBy2 = _interopRequireDefault(_AssignedBy);

var _InvitedBy = require('./InvitedBy');

var _InvitedBy2 = _interopRequireDefault(_InvitedBy);

var _OpenHours = require('./OpenHours');

var _OpenHours2 = _interopRequireDefault(_OpenHours);

var _ProductInstanceUID = require('./ProductInstanceUID');

var _ProductInstanceUID2 = _interopRequireDefault(_ProductInstanceUID);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The GeneralStoresProductModel model module.
* @module model/GeneralStoresProductModel
*/
GeneralStoresProductModel = function () {
    /**
    * Constructs a new <code>GeneralStoresProductModel</code>.
    * @alias module:model/GeneralStoresProductModel
    * @class
    */

    function GeneralStoresProductModel() {
        _classCallCheck(this, GeneralStoresProductModel);

        this.object = undefined;
        this.id = undefined;
        this.id_old = undefined;
        this.merchant = undefined;
        this.facebook_id = undefined;
        this.source = undefined;
        this.key = undefined;
        this.hash = undefined;
        this.address_components = undefined;
        this.address_formatted = undefined;
        this.phone_number_formatted = undefined;
        this.geometry = undefined;
        this.name = undefined;
        this.name_raw = undefined;
        this.photo_main = undefined;
        this.photo = undefined;
        this.category_main = undefined;
        this.category = undefined;
        this.url_googleplus = undefined;
        this.url_website = undefined;
        this.open_hours = undefined;
        this.open_now = undefined;
        this.open_time = undefined;
        this.utc_offset = undefined;
        this.assigned_by = undefined;
        this.invited_by = undefined;
        this.has_beacon = undefined;
    }

    /**
    * Constructs a <code>GeneralStoresProductModel</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/GeneralStoresProductModel} obj Optional instance to populate.
    * @return {module:model/GeneralStoresProductModel} The populated <code>GeneralStoresProductModel</code> instance.
    */


    _createClass(GeneralStoresProductModel, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new GeneralStoresProductModel();

                if (data.hasOwnProperty('object')) {
                    obj['object'] = _ApiClient2.default.convertToType(data['object'], 'String');
                }
                if (data.hasOwnProperty('id')) {
                    obj['id'] = _ApiClient2.default.convertToType(data['id'], 'String');
                }
                if (data.hasOwnProperty('id_old')) {
                    obj['id_old'] = _ApiClient2.default.convertToType(data['id_old'], 'String');
                }
                if (data.hasOwnProperty('merchant')) {
                    obj['merchant'] = _ProductInstanceUID2.default.constructFromObject(data['merchant']);
                }
                if (data.hasOwnProperty('facebook_id')) {
                    obj['facebook_id'] = _ApiClient2.default.convertToType(data['facebook_id'], 'String');
                }
                if (data.hasOwnProperty('source')) {
                    obj['source'] = _ApiClient2.default.convertToType(data['source'], 'String');
                }
                if (data.hasOwnProperty('key')) {
                    obj['key'] = _ApiClient2.default.convertToType(data['key'], 'String');
                }
                if (data.hasOwnProperty('hash')) {
                    obj['hash'] = _ApiClient2.default.convertToType(data['hash'], 'String');
                }
                if (data.hasOwnProperty('address_components')) {
                    obj['address_components'] = _ApiClient2.default.convertToType(data['address_components'], [_AddressComponents2.default]);
                }
                if (data.hasOwnProperty('address_formatted')) {
                    obj['address_formatted'] = _ApiClient2.default.convertToType(data['address_formatted'], 'String');
                }
                if (data.hasOwnProperty('phone_number_formatted')) {
                    obj['phone_number_formatted'] = _ApiClient2.default.convertToType(data['phone_number_formatted'], 'String');
                }
                if (data.hasOwnProperty('geometry')) {
                    obj['geometry'] = _ApiClient2.default.convertToType(data['geometry'], 'String');
                }
                if (data.hasOwnProperty('name')) {
                    obj['name'] = _ApiClient2.default.convertToType(data['name'], 'String');
                }
                if (data.hasOwnProperty('name_raw')) {
                    obj['name_raw'] = _ApiClient2.default.convertToType(data['name_raw'], 'String');
                }
                if (data.hasOwnProperty('photo_main')) {
                    obj['photo_main'] = _ApiClient2.default.convertToType(data['photo_main'], 'String');
                }
                if (data.hasOwnProperty('photo')) {
                    obj['photo'] = _ApiClient2.default.convertToType(data['photo'], ['String']);
                }
                if (data.hasOwnProperty('category_main')) {
                    obj['category_main'] = _ApiClient2.default.convertToType(data['category_main'], 'String');
                }
                if (data.hasOwnProperty('category')) {
                    obj['category'] = _ApiClient2.default.convertToType(data['category'], 'String');
                }
                if (data.hasOwnProperty('url_googleplus')) {
                    obj['url_googleplus'] = _ApiClient2.default.convertToType(data['url_googleplus'], 'String');
                }
                if (data.hasOwnProperty('url_website')) {
                    obj['url_website'] = _ApiClient2.default.convertToType(data['url_website'], 'String');
                }
                if (data.hasOwnProperty('open_hours')) {
                    obj['open_hours'] = _ApiClient2.default.convertToType(data['open_hours'], [_OpenHours2.default]);
                }
                if (data.hasOwnProperty('open_now')) {
                    obj['open_now'] = _ApiClient2.default.convertToType(data['open_now'], 'Boolean');
                }
                if (data.hasOwnProperty('open_time')) {
                    obj['open_time'] = _ApiClient2.default.convertToType(data['open_time'], 'String');
                }
                if (data.hasOwnProperty('utc_offset')) {
                    obj['utc_offset'] = _ApiClient2.default.convertToType(data['utc_offset'], 'String');
                }
                if (data.hasOwnProperty('assigned_by')) {
                    obj['assigned_by'] = _ApiClient2.default.convertToType(data['assigned_by'], [_AssignedBy2.default]);
                }
                if (data.hasOwnProperty('invited_by')) {
                    obj['invited_by'] = _ApiClient2.default.convertToType(data['invited_by'], [_InvitedBy2.default]);
                }
                if (data.hasOwnProperty('has_beacon')) {
                    obj['has_beacon'] = _ApiClient2.default.convertToType(data['has_beacon'], 'Boolean');
                }
            }
            return obj;
        }

        /**
        * Object of general store
        * @member {String} object
        */

        /**
        * Id of general store
        * @member {String} id
        */

        /**
        * Old id of general store
        * @member {String} id_old
        */

        /**
        * General merchant of general store
        * @member {module:model/ProductInstanceUID} merchant
        */

        /**
        * Facebook id
        * @member {String} facebook_id
        */

        /**
        * Source
        * @member {String} source
        */

        /**
        * Key
        * @member {String} key
        */

        /**
        * Hash
        * @member {String} hash
        */

        /**
        * Address components
        * @member {Array.<module:model/AddressComponents>} address_components
        */

        /**
        * General store formatted address
        * @member {String} address_formatted
        */

        /**
        * General store formatted phone number
        * @member {String} phone_number_formatted
        */

        /**
        * General store geometry
        * @member {String} geometry
        */

        /**
        * General store name
        * @member {String} name
        */

        /**
        * General store raw name
        * @member {String} name_raw
        */

        /**
        * General store main photo
        * @member {String} photo_main
        */

        /**
        * General store photos
        * @member {Array.<String>} photo
        */

        /**
        * General store main category
        * @member {String} category_main
        */

        /**
        * General store category
        * @member {String} category
        */

        /**
        * Url to general store google plus
        * @member {String} url_googleplus
        */

        /**
        * Url to general store website
        * @member {String} url_website
        */

        /**
        * Open hours in every day
        * @member {Array.<module:model/OpenHours>} open_hours
        */

        /**
        * Open now
        * @member {Boolean} open_now
        */

        /**
        * Open time
        * @member {String} open_time
        */

        /**
        * Utc offset
        * @member {String} utc_offset
        */

        /**
        * Assigned by
        * @member {Array.<module:model/AssignedBy>} assigned_by
        */

        /**
        * Invited by
        * @member {Array.<module:model/InvitedBy>} invited_by
        */

        /**
        * Has beacon
        * @member {Boolean} has_beacon
        */

    }]);

    return GeneralStoresProductModel;
}();

exports.default = GeneralStoresProductModel;
},{"../ApiClient":21,"./AddressComponents":51,"./AssignedBy":52,"./InvitedBy":76,"./OpenHours":112,"./ProductInstanceUID":145}],74:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _AddressComponents = require('./AddressComponents');

var _AddressComponents2 = _interopRequireDefault(_AddressComponents);

var _GeoAddressGeometry = require('./GeoAddressGeometry');

var _GeoAddressGeometry2 = _interopRequireDefault(_GeoAddressGeometry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The GeoAddress model module.
* @module model/GeoAddress
*/
GeoAddress = function () {
    /**
    * Constructs a new <code>GeoAddress</code>.
    * @alias module:model/GeoAddress
    * @class
    */

    function GeoAddress() {
        _classCallCheck(this, GeoAddress);

        this.type = undefined;
        this.address_components = undefined;
        this.address_formatted = undefined;
        this.geometry = undefined;
    }

    /**
    * Constructs a <code>GeoAddress</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/GeoAddress} obj Optional instance to populate.
    * @return {module:model/GeoAddress} The populated <code>GeoAddress</code> instance.
    */


    _createClass(GeoAddress, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new GeoAddress();

                if (data.hasOwnProperty('type')) {
                    obj['type'] = _ApiClient2.default.convertToType(data['type'], 'String');
                }
                if (data.hasOwnProperty('address_components')) {
                    obj['address_components'] = _AddressComponents2.default.constructFromObject(data['address_components']);
                }
                if (data.hasOwnProperty('address_formatted')) {
                    obj['address_formatted'] = _ApiClient2.default.convertToType(data['address_formatted'], 'String');
                }
                if (data.hasOwnProperty('geometry')) {
                    obj['geometry'] = _GeoAddressGeometry2.default.constructFromObject(data['geometry']);
                }
            }
            return obj;
        }

        /**
        * Address type
        * @member {String} type
        */

        /**
        * Address components
        * @member {module:model/AddressComponents} address_components
        */

        /**
        * Address formatted
        * @member {String} address_formatted
        */

        /**
        * @member {module:model/GeoAddressGeometry} geometry
        */

    }]);

    return GeoAddress;
}();

exports.default = GeoAddress;
},{"../ApiClient":21,"./AddressComponents":51,"./GeoAddressGeometry":75}],75:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The GeoAddressGeometry model module.
* @module model/GeoAddressGeometry
*/
GeoAddressGeometry = function () {
    /**
    * Constructs a new <code>GeoAddressGeometry</code>.
    * Geometry
    * @alias module:model/GeoAddressGeometry
    * @class
    */

    function GeoAddressGeometry() {
        _classCallCheck(this, GeoAddressGeometry);

        this.lat = undefined;
        this.lon = undefined;
    }

    /**
    * Constructs a <code>GeoAddressGeometry</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/GeoAddressGeometry} obj Optional instance to populate.
    * @return {module:model/GeoAddressGeometry} The populated <code>GeoAddressGeometry</code> instance.
    */


    _createClass(GeoAddressGeometry, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new GeoAddressGeometry();

                if (data.hasOwnProperty('lat')) {
                    obj['lat'] = _ApiClient2.default.convertToType(data['lat'], 'String');
                }
                if (data.hasOwnProperty('lon')) {
                    obj['lon'] = _ApiClient2.default.convertToType(data['lon'], 'String');
                }
            }
            return obj;
        }

        /**
        * latitude
        * @member {String} lat
        */

        /**
        * longitude
        * @member {String} lon
        */

    }]);

    return GeoAddressGeometry;
}();

exports.default = GeoAddressGeometry;
},{"../ApiClient":21}],76:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The InvitedBy model module.
* @module model/InvitedBy
*/
InvitedBy = function () {
    /**
    * Constructs a new <code>InvitedBy</code>.
    * @alias module:model/InvitedBy
    * @class
    */

    function InvitedBy() {
        _classCallCheck(this, InvitedBy);

        this.object = undefined;
        this.id = undefined;
        this.invited = undefined;
    }

    /**
    * Constructs a <code>InvitedBy</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/InvitedBy} obj Optional instance to populate.
    * @return {module:model/InvitedBy} The populated <code>InvitedBy</code> instance.
    */


    _createClass(InvitedBy, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new InvitedBy();

                if (data.hasOwnProperty('object')) {
                    obj['object'] = _ApiClient2.default.convertToType(data['object'], 'String');
                }
                if (data.hasOwnProperty('id')) {
                    obj['id'] = _ApiClient2.default.convertToType(data['id'], 'String');
                }
                if (data.hasOwnProperty('invited')) {
                    obj['invited'] = _ApiClient2.default.convertToType(data['invited'], 'String');
                }
            }
            return obj;
        }

        /**
        * Object of invited by
        * @member {String} object
        */

        /**
        * Id of invited by
        * @member {String} id
        */

        /**
        * Invited
        * @member {String} invited
        */

    }]);

    return InvitedBy;
}();

exports.default = InvitedBy;
},{"../ApiClient":21}],77:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The ItemGroup model module.
* @module model/ItemGroup
*/
ItemGroup = function () {
    /**
    * Constructs a new <code>ItemGroup</code>.
    * @alias module:model/ItemGroup
    * @class
    */

    function ItemGroup() {
        _classCallCheck(this, ItemGroup);

        this.object = undefined;
        this.id = undefined;
        this.description = undefined;
        this.logo = undefined;
        this.enabled = undefined;
    }

    /**
    * Constructs a <code>ItemGroup</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/ItemGroup} obj Optional instance to populate.
    * @return {module:model/ItemGroup} The populated <code>ItemGroup</code> instance.
    */


    _createClass(ItemGroup, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new ItemGroup();

                if (data.hasOwnProperty('object')) {
                    obj['object'] = _ApiClient2.default.convertToType(data['object'], 'String');
                }
                if (data.hasOwnProperty('id')) {
                    obj['id'] = _ApiClient2.default.convertToType(data['id'], 'String');
                }
                if (data.hasOwnProperty('description')) {
                    obj['description'] = _ApiClient2.default.convertToType(data['description'], 'String');
                }
                if (data.hasOwnProperty('logo')) {
                    obj['logo'] = _ApiClient2.default.convertToType(data['logo'], 'String');
                }
                if (data.hasOwnProperty('enabled')) {
                    obj['enabled'] = _ApiClient2.default.convertToType(data['enabled'], 'Boolean');
                }
            }
            return obj;
        }

        /**
        * Object of item group
        * @member {String} object
        */

        /**
        * Id of item group
        * @member {String} id
        */

        /**
        * Description
        * @member {String} description
        */

        /**
        * Logo
        * @member {String} logo
        */

        /**
        * Enabled
        * @member {Boolean} enabled
        */

    }]);

    return ItemGroup;
}();

exports.default = ItemGroup;
},{"../ApiClient":21}],78:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _LoyaltyCardgroupsDTOMerchant = require('./LoyaltyCardgroupsDTOMerchant');

var _LoyaltyCardgroupsDTOMerchant2 = _interopRequireDefault(_LoyaltyCardgroupsDTOMerchant);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The LoyaltyCardgroupsDTO model module.
* @module model/LoyaltyCardgroupsDTO
*/
LoyaltyCardgroupsDTO = function () {
    /**
    * Constructs a new <code>LoyaltyCardgroupsDTO</code>.
    * @alias module:model/LoyaltyCardgroupsDTO
    * @class
    */

    function LoyaltyCardgroupsDTO() {
        _classCallCheck(this, LoyaltyCardgroupsDTO);

        this.display_name = undefined;
        this.display_name_raw = undefined;
        this.stock_warn_limit = undefined;
        this.picture = undefined;
        this.merchant = undefined;
    }

    /**
    * Constructs a <code>LoyaltyCardgroupsDTO</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/LoyaltyCardgroupsDTO} obj Optional instance to populate.
    * @return {module:model/LoyaltyCardgroupsDTO} The populated <code>LoyaltyCardgroupsDTO</code> instance.
    */


    _createClass(LoyaltyCardgroupsDTO, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new LoyaltyCardgroupsDTO();

                if (data.hasOwnProperty('display_name')) {
                    obj['display_name'] = _ApiClient2.default.convertToType(data['display_name'], 'String');
                }
                if (data.hasOwnProperty('display_name_raw')) {
                    obj['display_name_raw'] = _ApiClient2.default.convertToType(data['display_name_raw'], 'String');
                }
                if (data.hasOwnProperty('stock_warn_limit')) {
                    obj['stock_warn_limit'] = _ApiClient2.default.convertToType(data['stock_warn_limit'], 'String');
                }
                if (data.hasOwnProperty('picture')) {
                    obj['picture'] = _ApiClient2.default.convertToType(data['picture'], 'String');
                }
                if (data.hasOwnProperty('merchant')) {
                    obj['merchant'] = _LoyaltyCardgroupsDTOMerchant2.default.constructFromObject(data['merchant']);
                }
            }
            return obj;
        }

        /**
        * Display name
        * @member {String} display_name
        */

        /**
        * Display name raw
        * @member {String} display_name_raw
        */

        /**
        * Stock warn limit
        * @member {String} stock_warn_limit
        */

        /**
        * Picture
        * @member {String} picture
        */

        /**
        * LoyaltyCardgroupsDTO
        * @member {module:model/LoyaltyCardgroupsDTOMerchant} merchant
        */

    }]);

    return LoyaltyCardgroupsDTO;
}();

exports.default = LoyaltyCardgroupsDTO;
},{"../ApiClient":21,"./LoyaltyCardgroupsDTOMerchant":80}],79:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The LoyaltyCardgroupsDTOCheckPasscodeEnabled model module.
* @module model/LoyaltyCardgroupsDTOCheckPasscodeEnabled
*/
LoyaltyCardgroupsDTOCheckPasscodeEnabled = function () {
    /**
    * Constructs a new <code>LoyaltyCardgroupsDTOCheckPasscodeEnabled</code>.
    * @alias module:model/LoyaltyCardgroupsDTOCheckPasscodeEnabled
    * @class
    */

    function LoyaltyCardgroupsDTOCheckPasscodeEnabled() {
        _classCallCheck(this, LoyaltyCardgroupsDTOCheckPasscodeEnabled);

        this.action = undefined;
        this.cardnumber = undefined;
    }

    /**
    * Constructs a <code>LoyaltyCardgroupsDTOCheckPasscodeEnabled</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/LoyaltyCardgroupsDTOCheckPasscodeEnabled} obj Optional instance to populate.
    * @return {module:model/LoyaltyCardgroupsDTOCheckPasscodeEnabled} The populated <code>LoyaltyCardgroupsDTOCheckPasscodeEnabled</code> instance.
    */


    _createClass(LoyaltyCardgroupsDTOCheckPasscodeEnabled, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new LoyaltyCardgroupsDTOCheckPasscodeEnabled();

                if (data.hasOwnProperty('action')) {
                    obj['action'] = _ApiClient2.default.convertToType(data['action'], 'String');
                }
                if (data.hasOwnProperty('cardnumber')) {
                    obj['cardnumber'] = _ApiClient2.default.convertToType(data['cardnumber'], 'String');
                }
            }
            return obj;
        }

        /**
        * Action type
        * @member {String} action
        */

        /**
        * Secucard number
        * @member {String} cardnumber
        */

    }]);

    return LoyaltyCardgroupsDTOCheckPasscodeEnabled;
}();

exports.default = LoyaltyCardgroupsDTOCheckPasscodeEnabled;
},{"../ApiClient":21}],80:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The LoyaltyCardgroupsDTOMerchant model module.
* @module model/LoyaltyCardgroupsDTOMerchant
*/
LoyaltyCardgroupsDTOMerchant = function () {
    /**
    * Constructs a new <code>LoyaltyCardgroupsDTOMerchant</code>.
    * @alias module:model/LoyaltyCardgroupsDTOMerchant
    * @class
    */

    function LoyaltyCardgroupsDTOMerchant() {
        _classCallCheck(this, LoyaltyCardgroupsDTOMerchant);

        this.id = undefined;
    }

    /**
    * Constructs a <code>LoyaltyCardgroupsDTOMerchant</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/LoyaltyCardgroupsDTOMerchant} obj Optional instance to populate.
    * @return {module:model/LoyaltyCardgroupsDTOMerchant} The populated <code>LoyaltyCardgroupsDTOMerchant</code> instance.
    */


    _createClass(LoyaltyCardgroupsDTOMerchant, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new LoyaltyCardgroupsDTOMerchant();

                if (data.hasOwnProperty('id')) {
                    obj['id'] = _ApiClient2.default.convertToType(data['id'], 'String');
                }
            }
            return obj;
        }

        /**
        * Merchant id
        * @member {String} id
        */

    }]);

    return LoyaltyCardgroupsDTOMerchant;
}();

exports.default = LoyaltyCardgroupsDTOMerchant;
},{"../ApiClient":21}],81:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _LoyaltyCardgroupsProductModel = require('./LoyaltyCardgroupsProductModel');

var _LoyaltyCardgroupsProductModel2 = _interopRequireDefault(_LoyaltyCardgroupsProductModel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The LoyaltyCardgroupsList model module.
* @module model/LoyaltyCardgroupsList
*/
LoyaltyCardgroupsList = function () {
    /**
    * Constructs a new <code>LoyaltyCardgroupsList</code>.
    * @alias module:model/LoyaltyCardgroupsList
    * @class
    */

    function LoyaltyCardgroupsList() {
        _classCallCheck(this, LoyaltyCardgroupsList);

        this.count = undefined;
        this.data = undefined;
    }

    /**
    * Constructs a <code>LoyaltyCardgroupsList</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/LoyaltyCardgroupsList} obj Optional instance to populate.
    * @return {module:model/LoyaltyCardgroupsList} The populated <code>LoyaltyCardgroupsList</code> instance.
    */


    _createClass(LoyaltyCardgroupsList, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new LoyaltyCardgroupsList();

                if (data.hasOwnProperty('count')) {
                    obj['count'] = _ApiClient2.default.convertToType(data['count'], 'Number');
                }
                if (data.hasOwnProperty('data')) {
                    obj['data'] = _ApiClient2.default.convertToType(data['data'], [_LoyaltyCardgroupsProductModel2.default]);
                }
            }
            return obj;
        }

        /**
        * Number of existing loyalty card groups
        * @member {Number} count
        */

        /**
        * GET Loyalty/Cardgroups
        * @member {Array.<module:model/LoyaltyCardgroupsProductModel>} data
        */

    }]);

    return LoyaltyCardgroupsList;
}();

exports.default = LoyaltyCardgroupsList;
},{"../ApiClient":21,"./LoyaltyCardgroupsProductModel":82}],82:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _LoyaltyCardgroupsDTOMerchant = require('./LoyaltyCardgroupsDTOMerchant');

var _LoyaltyCardgroupsDTOMerchant2 = _interopRequireDefault(_LoyaltyCardgroupsDTOMerchant);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The LoyaltyCardgroupsProductModel model module.
* @module model/LoyaltyCardgroupsProductModel
*/
LoyaltyCardgroupsProductModel = function () {
    /**
    * Constructs a new <code>LoyaltyCardgroupsProductModel</code>.
    * @alias module:model/LoyaltyCardgroupsProductModel
    * @class
    */

    function LoyaltyCardgroupsProductModel() {
        _classCallCheck(this, LoyaltyCardgroupsProductModel);

        this.object = undefined;
        this.id = undefined;
        this.merchant = undefined;
        this.display_name = undefined;
        this.display_name_raw = undefined;
        this.stock_warn_limit = undefined;
        this.picture = undefined;
    }

    /**
    * Constructs a <code>LoyaltyCardgroupsProductModel</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/LoyaltyCardgroupsProductModel} obj Optional instance to populate.
    * @return {module:model/LoyaltyCardgroupsProductModel} The populated <code>LoyaltyCardgroupsProductModel</code> instance.
    */


    _createClass(LoyaltyCardgroupsProductModel, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new LoyaltyCardgroupsProductModel();

                if (data.hasOwnProperty('object')) {
                    obj['object'] = _ApiClient2.default.convertToType(data['object'], 'String');
                }
                if (data.hasOwnProperty('id')) {
                    obj['id'] = _ApiClient2.default.convertToType(data['id'], 'String');
                }
                if (data.hasOwnProperty('merchant')) {
                    obj['merchant'] = _LoyaltyCardgroupsDTOMerchant2.default.constructFromObject(data['merchant']);
                }
                if (data.hasOwnProperty('display_name')) {
                    obj['display_name'] = _ApiClient2.default.convertToType(data['display_name'], 'String');
                }
                if (data.hasOwnProperty('display_name_raw')) {
                    obj['display_name_raw'] = _ApiClient2.default.convertToType(data['display_name_raw'], 'String');
                }
                if (data.hasOwnProperty('stock_warn_limit')) {
                    obj['stock_warn_limit'] = _ApiClient2.default.convertToType(data['stock_warn_limit'], 'String');
                }
                if (data.hasOwnProperty('picture')) {
                    obj['picture'] = _ApiClient2.default.convertToType(data['picture'], 'String');
                }
            }
            return obj;
        }

        /**
        * Object of loyalty card group
        * @member {String} object
        */

        /**
        * Id of loyalty card group
        * @member {String} id
        */

        /**
        * Loyalty card group merchant
        * @member {module:model/LoyaltyCardgroupsDTOMerchant} merchant
        */

        /**
        * Loyalty card group display name
        * @member {String} display_name
        */

        /**
        * Loyalty card group display name raw
        * @member {String} display_name_raw
        */

        /**
        * Loyalty card group stock warn limit
        * @member {String} stock_warn_limit
        */

        /**
        * Loyalty card group picture
        * @member {String} picture
        */

    }]);

    return LoyaltyCardgroupsProductModel;
}();

exports.default = LoyaltyCardgroupsProductModel;
},{"../ApiClient":21,"./LoyaltyCardgroupsDTOMerchant":80}],83:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The LoyaltyCardsDTOAccount model module.
* @module model/LoyaltyCardsDTOAccount
*/
LoyaltyCardsDTOAccount = function () {
    /**
    * Constructs a new <code>LoyaltyCardsDTOAccount</code>.
    * @alias module:model/LoyaltyCardsDTOAccount
    * @class
    */

    function LoyaltyCardsDTOAccount() {
        _classCallCheck(this, LoyaltyCardsDTOAccount);

        this.object = undefined;
        this.id = undefined;
    }

    /**
    * Constructs a <code>LoyaltyCardsDTOAccount</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/LoyaltyCardsDTOAccount} obj Optional instance to populate.
    * @return {module:model/LoyaltyCardsDTOAccount} The populated <code>LoyaltyCardsDTOAccount</code> instance.
    */


    _createClass(LoyaltyCardsDTOAccount, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new LoyaltyCardsDTOAccount();

                if (data.hasOwnProperty('object')) {
                    obj['object'] = _ApiClient2.default.convertToType(data['object'], 'String');
                }
                if (data.hasOwnProperty('id')) {
                    obj['id'] = _ApiClient2.default.convertToType(data['id'], 'String');
                }
            }
            return obj;
        }

        /**
        * LoyaltyCardsDTOAccount
        * @member {String} object
        */

        /**
        * LoyaltyCardsDTOAccount
        * @member {String} id
        */

    }]);

    return LoyaltyCardsDTOAccount;
}();

exports.default = LoyaltyCardsDTOAccount;
},{"../ApiClient":21}],84:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _LoyaltyCardsProductModel = require('./LoyaltyCardsProductModel');

var _LoyaltyCardsProductModel2 = _interopRequireDefault(_LoyaltyCardsProductModel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The LoyaltyCardsList model module.
* @module model/LoyaltyCardsList
*/
LoyaltyCardsList = function () {
    /**
    * Constructs a new <code>LoyaltyCardsList</code>.
    * @alias module:model/LoyaltyCardsList
    * @class
    */

    function LoyaltyCardsList() {
        _classCallCheck(this, LoyaltyCardsList);

        this.count = undefined;
        this.data = undefined;
    }

    /**
    * Constructs a <code>LoyaltyCardsList</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/LoyaltyCardsList} obj Optional instance to populate.
    * @return {module:model/LoyaltyCardsList} The populated <code>LoyaltyCardsList</code> instance.
    */


    _createClass(LoyaltyCardsList, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new LoyaltyCardsList();

                if (data.hasOwnProperty('count')) {
                    obj['count'] = _ApiClient2.default.convertToType(data['count'], 'Number');
                }
                if (data.hasOwnProperty('data')) {
                    obj['data'] = _ApiClient2.default.convertToType(data['data'], [_LoyaltyCardsProductModel2.default]);
                }
            }
            return obj;
        }

        /**
        * Number of existing loyalty cards
        * @member {Number} count
        */

        /**
        * GET Loyalty/Cards
        * @member {Array.<module:model/LoyaltyCardsProductModel>} data
        */

    }]);

    return LoyaltyCardsList;
}();

exports.default = LoyaltyCardsList;
},{"../ApiClient":21,"./LoyaltyCardsProductModel":85}],85:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _LoyaltyCardsDTOAccount = require('./LoyaltyCardsDTOAccount');

var _LoyaltyCardsDTOAccount2 = _interopRequireDefault(_LoyaltyCardsDTOAccount);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The LoyaltyCardsProductModel model module.
* @module model/LoyaltyCardsProductModel
*/
LoyaltyCardsProductModel = function () {
    /**
    * Constructs a new <code>LoyaltyCardsProductModel</code>.
    * @alias module:model/LoyaltyCardsProductModel
    * @class
    */

    function LoyaltyCardsProductModel() {
        _classCallCheck(this, LoyaltyCardsProductModel);

        this.object = undefined;
        this.id = undefined;
        this.account = undefined;
        this.cardnumber = undefined;
        this.created = undefined;
    }

    /**
    * Constructs a <code>LoyaltyCardsProductModel</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/LoyaltyCardsProductModel} obj Optional instance to populate.
    * @return {module:model/LoyaltyCardsProductModel} The populated <code>LoyaltyCardsProductModel</code> instance.
    */


    _createClass(LoyaltyCardsProductModel, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new LoyaltyCardsProductModel();

                if (data.hasOwnProperty('object')) {
                    obj['object'] = _ApiClient2.default.convertToType(data['object'], 'String');
                }
                if (data.hasOwnProperty('id')) {
                    obj['id'] = _ApiClient2.default.convertToType(data['id'], 'String');
                }
                if (data.hasOwnProperty('account')) {
                    obj['account'] = _LoyaltyCardsDTOAccount2.default.constructFromObject(data['account']);
                }
                if (data.hasOwnProperty('cardnumber')) {
                    obj['cardnumber'] = _ApiClient2.default.convertToType(data['cardnumber'], 'String');
                }
                if (data.hasOwnProperty('created')) {
                    obj['created'] = _ApiClient2.default.convertToType(data['created'], 'Date');
                }
            }
            return obj;
        }

        /**
        * Object of loyalty card
        * @member {String} object
        */

        /**
        * Id of loyalty card
        * @member {String} id
        */

        /**
        * Loyalty card account
        * @member {module:model/LoyaltyCardsDTOAccount} account
        */

        /**
        * Loyalty card number
        * @member {String} cardnumber
        */

        /**
        * Creation date
        * @member {Date} created
        */

    }]);

    return LoyaltyCardsProductModel;
}();

exports.default = LoyaltyCardsProductModel;
},{"../ApiClient":21,"./LoyaltyCardsDTOAccount":83}],86:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _Address = require('./Address');

var _Address2 = _interopRequireDefault(_Address);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The LoyaltyCustomersContactDTO model module.
* @module model/LoyaltyCustomersContactDTO
*/
LoyaltyCustomersContactDTO = function () {
    /**
    * Constructs a new <code>LoyaltyCustomersContactDTO</code>.
    * @alias module:model/LoyaltyCustomersContactDTO
    * @class
    */

    function LoyaltyCustomersContactDTO() {
        _classCallCheck(this, LoyaltyCustomersContactDTO);

        this.forename = undefined;
        this.surname = undefined;
        this.name = undefined;
        this.phone = undefined;
        this.address = undefined;
    }

    /**
    * Constructs a <code>LoyaltyCustomersContactDTO</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/LoyaltyCustomersContactDTO} obj Optional instance to populate.
    * @return {module:model/LoyaltyCustomersContactDTO} The populated <code>LoyaltyCustomersContactDTO</code> instance.
    */


    _createClass(LoyaltyCustomersContactDTO, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new LoyaltyCustomersContactDTO();

                if (data.hasOwnProperty('forename')) {
                    obj['forename'] = _ApiClient2.default.convertToType(data['forename'], 'String');
                }
                if (data.hasOwnProperty('surname')) {
                    obj['surname'] = _ApiClient2.default.convertToType(data['surname'], 'String');
                }
                if (data.hasOwnProperty('name')) {
                    obj['name'] = _ApiClient2.default.convertToType(data['name'], 'String');
                }
                if (data.hasOwnProperty('phone')) {
                    obj['phone'] = _ApiClient2.default.convertToType(data['phone'], 'String');
                }
                if (data.hasOwnProperty('address')) {
                    obj['address'] = _Address2.default.constructFromObject(data['address']);
                }
            }
            return obj;
        }

        /**
        * Forename
        * @member {String} forename
        */

        /**
        * Surname
        * @member {String} surname
        */

        /**
        * Name
        * @member {String} name
        */

        /**
        * Phone
        * @member {String} phone
        */

        /**
        * Address
        * @member {module:model/Address} address
        */

    }]);

    return LoyaltyCustomersContactDTO;
}();

exports.default = LoyaltyCustomersContactDTO;
},{"../ApiClient":21,"./Address":50}],87:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _Contact = require('./Contact');

var _Contact2 = _interopRequireDefault(_Contact);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The LoyaltyCustomersDTO model module.
* @module model/LoyaltyCustomersDTO
*/
LoyaltyCustomersDTO = function () {
    /**
    * Constructs a new <code>LoyaltyCustomersDTO</code>.
    * @alias module:model/LoyaltyCustomersDTO
    * @class
    */

    function LoyaltyCustomersDTO() {
        _classCallCheck(this, LoyaltyCustomersDTO);

        this.merchant = undefined;
        this.merchant_contact = undefined;
        this.age = undefined;
        this.days_until_birthday = undefined;
        this.customernumber = undefined;
        this.note = undefined;
        this.additional_data = undefined;
    }

    /**
    * Constructs a <code>LoyaltyCustomersDTO</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/LoyaltyCustomersDTO} obj Optional instance to populate.
    * @return {module:model/LoyaltyCustomersDTO} The populated <code>LoyaltyCustomersDTO</code> instance.
    */


    _createClass(LoyaltyCustomersDTO, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new LoyaltyCustomersDTO();

                if (data.hasOwnProperty('merchant')) {
                    obj['merchant'] = _ApiClient2.default.convertToType(data['merchant'], 'String');
                }
                if (data.hasOwnProperty('merchant_contact')) {
                    obj['merchant_contact'] = _Contact2.default.constructFromObject(data['merchant_contact']);
                }
                if (data.hasOwnProperty('age')) {
                    obj['age'] = _ApiClient2.default.convertToType(data['age'], 'Number');
                }
                if (data.hasOwnProperty('days_until_birthday')) {
                    obj['days_until_birthday'] = _ApiClient2.default.convertToType(data['days_until_birthday'], 'Number');
                }
                if (data.hasOwnProperty('customernumber')) {
                    obj['customernumber'] = _ApiClient2.default.convertToType(data['customernumber'], 'String');
                }
                if (data.hasOwnProperty('note')) {
                    obj['note'] = _ApiClient2.default.convertToType(data['note'], 'String');
                }
                if (data.hasOwnProperty('additional_data')) {
                    obj['additional_data'] = _ApiClient2.default.convertToType(data['additional_data'], Object);
                }
            }
            return obj;
        }

        /**
        * merchant
        * @member {String} merchant
        */

        /**
        * Contact
        * @member {module:model/Contact} merchant_contact
        */

        /**
        * Age
        * @member {Number} age
        */

        /**
        * Number of days until birthday
        * @member {Number} days_until_birthday
        */

        /**
        * Customer number
        * @member {String} customernumber
        */

        /**
        * note
        * @member {String} note
        */

        /**
        * Consent for communication
        * @member {Object} additional_data
        */

    }]);

    return LoyaltyCustomersDTO;
}();

exports.default = LoyaltyCustomersDTO;
},{"../ApiClient":21,"./Contact":54}],88:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _LoyaltyCustomersProductModel = require('./LoyaltyCustomersProductModel');

var _LoyaltyCustomersProductModel2 = _interopRequireDefault(_LoyaltyCustomersProductModel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The LoyaltyCustomersList model module.
* @module model/LoyaltyCustomersList
*/
LoyaltyCustomersList = function () {
    /**
    * Constructs a new <code>LoyaltyCustomersList</code>.
    * @alias module:model/LoyaltyCustomersList
    * @class
    */

    function LoyaltyCustomersList() {
        _classCallCheck(this, LoyaltyCustomersList);

        this.count = undefined;
        this.data = undefined;
    }

    /**
    * Constructs a <code>LoyaltyCustomersList</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/LoyaltyCustomersList} obj Optional instance to populate.
    * @return {module:model/LoyaltyCustomersList} The populated <code>LoyaltyCustomersList</code> instance.
    */


    _createClass(LoyaltyCustomersList, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new LoyaltyCustomersList();

                if (data.hasOwnProperty('count')) {
                    obj['count'] = _ApiClient2.default.convertToType(data['count'], 'Number');
                }
                if (data.hasOwnProperty('data')) {
                    obj['data'] = _ApiClient2.default.convertToType(data['data'], [_LoyaltyCustomersProductModel2.default]);
                }
            }
            return obj;
        }

        /**
        * Number of existing loyalty customers
        * @member {Number} count
        */

        /**
        * GET Loyalty/Customers
        * @member {Array.<module:model/LoyaltyCustomersProductModel>} data
        */

    }]);

    return LoyaltyCustomersList;
}();

exports.default = LoyaltyCustomersList;
},{"../ApiClient":21,"./LoyaltyCustomersProductModel":90}],89:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _BankAccountDescriptor = require('./BankAccountDescriptor');

var _BankAccountDescriptor2 = _interopRequireDefault(_BankAccountDescriptor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The LoyaltyCustomersPaymentContainerModel model module.
* @module model/LoyaltyCustomersPaymentContainerModel
*/
LoyaltyCustomersPaymentContainerModel = function () {
    /**
    * Constructs a new <code>LoyaltyCustomersPaymentContainerModel</code>.
    * @alias module:model/LoyaltyCustomersPaymentContainerModel
    * @class
    */

    function LoyaltyCustomersPaymentContainerModel() {
        _classCallCheck(this, LoyaltyCustomersPaymentContainerModel);

        this.object = undefined;
        this.id = undefined;
        this.type = undefined;
        this.payment_information = undefined;
        this.last_usage = undefined;
    }

    /**
    * Constructs a <code>LoyaltyCustomersPaymentContainerModel</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/LoyaltyCustomersPaymentContainerModel} obj Optional instance to populate.
    * @return {module:model/LoyaltyCustomersPaymentContainerModel} The populated <code>LoyaltyCustomersPaymentContainerModel</code> instance.
    */


    _createClass(LoyaltyCustomersPaymentContainerModel, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new LoyaltyCustomersPaymentContainerModel();

                if (data.hasOwnProperty('object')) {
                    obj['object'] = _ApiClient2.default.convertToType(data['object'], 'String');
                }
                if (data.hasOwnProperty('id')) {
                    obj['id'] = _ApiClient2.default.convertToType(data['id'], 'String');
                }
                if (data.hasOwnProperty('type')) {
                    obj['type'] = _ApiClient2.default.convertToType(data['type'], 'String');
                }
                if (data.hasOwnProperty('payment_information')) {
                    obj['payment_information'] = _BankAccountDescriptor2.default.constructFromObject(data['payment_information']);
                }
                if (data.hasOwnProperty('last_usage')) {
                    obj['last_usage'] = _ApiClient2.default.convertToType(data['last_usage'], 'Date');
                }
            }
            return obj;
        }

        /**
        * LoyaltyCustomersPaymentContainerModel
        * @member {String} object
        */

        /**
        * LoyaltyCustomersPaymentContainerModel
        * @member {String} id
        */

        /**
        * LoyaltyCustomersPaymentContainerModel
        * @member {String} type
        */

        /**
        * Payment instrument data
        * @member {module:model/BankAccountDescriptor} payment_information
        */

        /**
        * Last Usage date
        * @member {Date} last_usage
        */

    }]);

    return LoyaltyCustomersPaymentContainerModel;
}();

exports.default = LoyaltyCustomersPaymentContainerModel;
},{"../ApiClient":21,"./BankAccountDescriptor":53}],90:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _Contact = require('./Contact');

var _Contact2 = _interopRequireDefault(_Contact);

var _LoyaltyCustomersPaymentContainerModel = require('./LoyaltyCustomersPaymentContainerModel');

var _LoyaltyCustomersPaymentContainerModel2 = _interopRequireDefault(_LoyaltyCustomersPaymentContainerModel);

var _ProductInstanceUID = require('./ProductInstanceUID');

var _ProductInstanceUID2 = _interopRequireDefault(_ProductInstanceUID);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The LoyaltyCustomersProductModel model module.
* @module model/LoyaltyCustomersProductModel
*/
LoyaltyCustomersProductModel = function () {
    /**
    * Constructs a new <code>LoyaltyCustomersProductModel</code>.
    * @alias module:model/LoyaltyCustomersProductModel
    * @class
    */

    function LoyaltyCustomersProductModel() {
        _classCallCheck(this, LoyaltyCustomersProductModel);

        this.object = undefined;
        this.id = undefined;
        this.merchant = undefined;
        this.contact = undefined;
        this.merchant_contact = undefined;
        this.account_contact = undefined;
        this.payment_container = undefined;
        this.age = undefined;
        this.days_until_birthday = undefined;
        this.customernumber = undefined;
        this.note = undefined;
        this.created = undefined;
    }

    /**
    * Constructs a <code>LoyaltyCustomersProductModel</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/LoyaltyCustomersProductModel} obj Optional instance to populate.
    * @return {module:model/LoyaltyCustomersProductModel} The populated <code>LoyaltyCustomersProductModel</code> instance.
    */


    _createClass(LoyaltyCustomersProductModel, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new LoyaltyCustomersProductModel();

                if (data.hasOwnProperty('object')) {
                    obj['object'] = _ApiClient2.default.convertToType(data['object'], 'String');
                }
                if (data.hasOwnProperty('id')) {
                    obj['id'] = _ApiClient2.default.convertToType(data['id'], 'String');
                }
                if (data.hasOwnProperty('merchant')) {
                    obj['merchant'] = _ProductInstanceUID2.default.constructFromObject(data['merchant']);
                }
                if (data.hasOwnProperty('contact')) {
                    obj['contact'] = _Contact2.default.constructFromObject(data['contact']);
                }
                if (data.hasOwnProperty('merchant_contact')) {
                    obj['merchant_contact'] = _Contact2.default.constructFromObject(data['merchant_contact']);
                }
                if (data.hasOwnProperty('account_contact')) {
                    obj['account_contact'] = _Contact2.default.constructFromObject(data['account_contact']);
                }
                if (data.hasOwnProperty('payment_container')) {
                    obj['payment_container'] = _ApiClient2.default.convertToType(data['payment_container'], [_LoyaltyCustomersPaymentContainerModel2.default]);
                }
                if (data.hasOwnProperty('age')) {
                    obj['age'] = _ApiClient2.default.convertToType(data['age'], 'Number');
                }
                if (data.hasOwnProperty('days_until_birthday')) {
                    obj['days_until_birthday'] = _ApiClient2.default.convertToType(data['days_until_birthday'], 'Number');
                }
                if (data.hasOwnProperty('customernumber')) {
                    obj['customernumber'] = _ApiClient2.default.convertToType(data['customernumber'], 'String');
                }
                if (data.hasOwnProperty('note')) {
                    obj['note'] = _ApiClient2.default.convertToType(data['note'], 'String');
                }
                if (data.hasOwnProperty('created')) {
                    obj['created'] = _ApiClient2.default.convertToType(data['created'], 'Date');
                }
            }
            return obj;
        }

        /**
        * Object of loyalty customer
        * @member {String} object
        */

        /**
        * Id of loyalty customer
        * @member {String} id
        */

        /**
        * merchant
        * @member {module:model/ProductInstanceUID} merchant
        */

        /**
        * Contact
        * @member {module:model/Contact} contact
        */

        /**
        * merchant contact
        * @member {module:model/Contact} merchant_contact
        */

        /**
        * merchant contact
        * @member {module:model/Contact} account_contact
        */

        /**
        * payment container
        * @member {Array.<module:model/LoyaltyCustomersPaymentContainerModel>} payment_container
        */

        /**
        * Age
        * @member {Number} age
        */

        /**
        * Number of days until birthday
        * @member {Number} days_until_birthday
        */

        /**
        * Customer number
        * @member {String} customernumber
        */

        /**
        * Customer number
        * @member {String} note
        */

        /**
        * Creation date
        * @member {Date} created
        */

    }]);

    return LoyaltyCustomersProductModel;
}();

exports.default = LoyaltyCustomersProductModel;
},{"../ApiClient":21,"./Contact":54,"./LoyaltyCustomersPaymentContainerModel":89,"./ProductInstanceUID":145}],91:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The LoyaltyCustomersRemoved model module.
* @module model/LoyaltyCustomersRemoved
*/
LoyaltyCustomersRemoved = function () {
    /**
    * Constructs a new <code>LoyaltyCustomersRemoved</code>.
    * @alias module:model/LoyaltyCustomersRemoved
    * @class
    */

    function LoyaltyCustomersRemoved() {
        _classCallCheck(this, LoyaltyCustomersRemoved);

        this.deleted = undefined;
    }

    /**
    * Constructs a <code>LoyaltyCustomersRemoved</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/LoyaltyCustomersRemoved} obj Optional instance to populate.
    * @return {module:model/LoyaltyCustomersRemoved} The populated <code>LoyaltyCustomersRemoved</code> instance.
    */


    _createClass(LoyaltyCustomersRemoved, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new LoyaltyCustomersRemoved();

                if (data.hasOwnProperty('deleted')) {
                    obj['deleted'] = _ApiClient2.default.convertToType(data['deleted'], 'Boolean');
                }
            }
            return obj;
        }

        /**
        * Result is true or false
        * @member {Boolean} deleted
        */

    }]);

    return LoyaltyCustomersRemoved;
}();

exports.default = LoyaltyCustomersRemoved;
},{"../ApiClient":21}],92:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The LoyaltyDTOMerchant model module.
* @module model/LoyaltyDTOMerchant
*/
LoyaltyDTOMerchant = function () {
    /**
    * Constructs a new <code>LoyaltyDTOMerchant</code>.
    * @alias module:model/LoyaltyDTOMerchant
    * @class
    */

    function LoyaltyDTOMerchant() {
        _classCallCheck(this, LoyaltyDTOMerchant);

        this.object = undefined;
        this.id = undefined;
    }

    /**
    * Constructs a <code>LoyaltyDTOMerchant</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/LoyaltyDTOMerchant} obj Optional instance to populate.
    * @return {module:model/LoyaltyDTOMerchant} The populated <code>LoyaltyDTOMerchant</code> instance.
    */


    _createClass(LoyaltyDTOMerchant, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new LoyaltyDTOMerchant();

                if (data.hasOwnProperty('object')) {
                    obj['object'] = _ApiClient2.default.convertToType(data['object'], 'String');
                }
                if (data.hasOwnProperty('id')) {
                    obj['id'] = _ApiClient2.default.convertToType(data['id'], 'String');
                }
            }
            return obj;
        }

        /**
        * LoyaltyDTOMerchant
        * @member {String} object
        */

        /**
        * LoyaltyDTOMerchant
        * @member {String} id
        */

    }]);

    return LoyaltyDTOMerchant;
}();

exports.default = LoyaltyDTOMerchant;
},{"../ApiClient":21}],93:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _LoyaltyStoregroupsDTOStoresAddressComponents = require('./LoyaltyStoregroupsDTOStoresAddressComponents');

var _LoyaltyStoregroupsDTOStoresAddressComponents2 = _interopRequireDefault(_LoyaltyStoregroupsDTOStoresAddressComponents);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The LoyaltyDTOStore model module.
* @module model/LoyaltyDTOStore
*/
LoyaltyDTOStore = function () {
    /**
    * Constructs a new <code>LoyaltyDTOStore</code>.
    * @alias module:model/LoyaltyDTOStore
    * @class
    */

    function LoyaltyDTOStore() {
        _classCallCheck(this, LoyaltyDTOStore);

        this.object = undefined;
        this.id = undefined;
        this.address_components = undefined;
        this.address_formatted = undefined;
        this.geometry = undefined;
        this.name = undefined;
        this.name_raw = undefined;
    }

    /**
    * Constructs a <code>LoyaltyDTOStore</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/LoyaltyDTOStore} obj Optional instance to populate.
    * @return {module:model/LoyaltyDTOStore} The populated <code>LoyaltyDTOStore</code> instance.
    */


    _createClass(LoyaltyDTOStore, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new LoyaltyDTOStore();

                if (data.hasOwnProperty('object')) {
                    obj['object'] = _ApiClient2.default.convertToType(data['object'], 'String');
                }
                if (data.hasOwnProperty('id')) {
                    obj['id'] = _ApiClient2.default.convertToType(data['id'], 'String');
                }
                if (data.hasOwnProperty('address_components')) {
                    obj['address_components'] = _ApiClient2.default.convertToType(data['address_components'], [_LoyaltyStoregroupsDTOStoresAddressComponents2.default]);
                }
                if (data.hasOwnProperty('address_formatted')) {
                    obj['address_formatted'] = _ApiClient2.default.convertToType(data['address_formatted'], 'String');
                }
                if (data.hasOwnProperty('geometry')) {
                    obj['geometry'] = _ApiClient2.default.convertToType(data['geometry'], 'String');
                }
                if (data.hasOwnProperty('name')) {
                    obj['name'] = _ApiClient2.default.convertToType(data['name'], 'String');
                }
                if (data.hasOwnProperty('name_raw')) {
                    obj['name_raw'] = _ApiClient2.default.convertToType(data['name_raw'], 'String');
                }
            }
            return obj;
        }

        /**
        * LoyaltyDTOStore
        * @member {String} object
        */

        /**
        * LoyaltyDTOStore
        * @member {String} id
        */

        /**
        * LoyaltyDTOStore
        * @member {Array.<module:model/LoyaltyStoregroupsDTOStoresAddressComponents>} address_components
        */

        /**
        * Address formatted
        * @member {String} address_formatted
        */

        /**
        * Geometry
        * @member {String} geometry
        */

        /**
        * Name
        * @member {String} name
        */

        /**
        * Raw name
        * @member {String} name_raw
        */

    }]);

    return LoyaltyDTOStore;
}();

exports.default = LoyaltyDTOStore;
},{"../ApiClient":21,"./LoyaltyStoregroupsDTOStoresAddressComponents":109}],94:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The LoyaltyMerchantcardsDTO model module.
* @module model/LoyaltyMerchantcardsDTO
*/
LoyaltyMerchantcardsDTO = function () {
    /**
    * Constructs a new <code>LoyaltyMerchantcardsDTO</code>.
    * @alias module:model/LoyaltyMerchantcardsDTO
    * @class
    */

    function LoyaltyMerchantcardsDTO() {
        _classCallCheck(this, LoyaltyMerchantcardsDTO);

        this.merchant = undefined;
        this.card = undefined;
        this.payment_container = undefined;
        this.created_by_merchant = undefined;
        this.used_by_merchant = undefined;
    }

    /**
    * Constructs a <code>LoyaltyMerchantcardsDTO</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/LoyaltyMerchantcardsDTO} obj Optional instance to populate.
    * @return {module:model/LoyaltyMerchantcardsDTO} The populated <code>LoyaltyMerchantcardsDTO</code> instance.
    */


    _createClass(LoyaltyMerchantcardsDTO, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new LoyaltyMerchantcardsDTO();

                if (data.hasOwnProperty('merchant')) {
                    obj['merchant'] = _ApiClient2.default.convertToType(data['merchant'], 'String');
                }
                if (data.hasOwnProperty('card')) {
                    obj['card'] = _ApiClient2.default.convertToType(data['card'], 'String');
                }
                if (data.hasOwnProperty('payment_container')) {
                    obj['payment_container'] = _ApiClient2.default.convertToType(data['payment_container'], 'String');
                }
                if (data.hasOwnProperty('created_by_merchant')) {
                    obj['created_by_merchant'] = _ApiClient2.default.convertToType(data['created_by_merchant'], 'Boolean');
                }
                if (data.hasOwnProperty('used_by_merchant')) {
                    obj['used_by_merchant'] = _ApiClient2.default.convertToType(data['used_by_merchant'], 'Boolean');
                }
            }
            return obj;
        }

        /**
        * General merchant id
        * @member {String} merchant
        */

        /**
        * Loyalty card id
        * @member {String} card
        */

        /**
        * Loyalty payment container id
        * @member {String} payment_container
        */

        /**
        * Created by general merchant or not
        * @member {Boolean} created_by_merchant
        */

        /**
        * Used by general merchant or not
        * @member {Boolean} used_by_merchant
        */

    }]);

    return LoyaltyMerchantcardsDTO;
}();

exports.default = LoyaltyMerchantcardsDTO;
},{"../ApiClient":21}],95:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The LoyaltyMerchantcardsDTOCardsAmount model module.
* @module model/LoyaltyMerchantcardsDTOCardsAmount
*/
LoyaltyMerchantcardsDTOCardsAmount = function () {
    /**
    * Constructs a new <code>LoyaltyMerchantcardsDTOCardsAmount</code>.
    * @alias module:model/LoyaltyMerchantcardsDTOCardsAmount
    * @class
    */

    function LoyaltyMerchantcardsDTOCardsAmount() {
        _classCallCheck(this, LoyaltyMerchantcardsDTOCardsAmount);

        this.cards_amount = undefined;
    }

    /**
    * Constructs a <code>LoyaltyMerchantcardsDTOCardsAmount</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/LoyaltyMerchantcardsDTOCardsAmount} obj Optional instance to populate.
    * @return {module:model/LoyaltyMerchantcardsDTOCardsAmount} The populated <code>LoyaltyMerchantcardsDTOCardsAmount</code> instance.
    */


    _createClass(LoyaltyMerchantcardsDTOCardsAmount, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new LoyaltyMerchantcardsDTOCardsAmount();

                if (data.hasOwnProperty('cards_amount')) {
                    obj['cards_amount'] = _ApiClient2.default.convertToType(data['cards_amount'], 'Number');
                }
            }
            return obj;
        }

        /**
        * Cards amount
        * @member {Number} cards_amount
        */

    }]);

    return LoyaltyMerchantcardsDTOCardsAmount;
}();

exports.default = LoyaltyMerchantcardsDTOCardsAmount;
},{"../ApiClient":21}],96:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The LoyaltyMerchantcardsDTOCheckPasscode model module.
* @module model/LoyaltyMerchantcardsDTOCheckPasscode
*/
LoyaltyMerchantcardsDTOCheckPasscode = function () {
    /**
    * Constructs a new <code>LoyaltyMerchantcardsDTOCheckPasscode</code>.
    * @alias module:model/LoyaltyMerchantcardsDTOCheckPasscode
    * @class
    */

    function LoyaltyMerchantcardsDTOCheckPasscode() {
        _classCallCheck(this, LoyaltyMerchantcardsDTOCheckPasscode);

        this.cardnumber = undefined;
        this.pin = undefined;
    }

    /**
    * Constructs a <code>LoyaltyMerchantcardsDTOCheckPasscode</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/LoyaltyMerchantcardsDTOCheckPasscode} obj Optional instance to populate.
    * @return {module:model/LoyaltyMerchantcardsDTOCheckPasscode} The populated <code>LoyaltyMerchantcardsDTOCheckPasscode</code> instance.
    */


    _createClass(LoyaltyMerchantcardsDTOCheckPasscode, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new LoyaltyMerchantcardsDTOCheckPasscode();

                if (data.hasOwnProperty('cardnumber')) {
                    obj['cardnumber'] = _ApiClient2.default.convertToType(data['cardnumber'], 'Number');
                }
                if (data.hasOwnProperty('pin')) {
                    obj['pin'] = _ApiClient2.default.convertToType(data['pin'], 'Number');
                }
            }
            return obj;
        }

        /**
        * Loyalty Card number
        * @member {Number} cardnumber
        */

        /**
        * Loyalty Card pin
        * @member {Number} pin
        */

    }]);

    return LoyaltyMerchantcardsDTOCheckPasscode;
}();

exports.default = LoyaltyMerchantcardsDTOCheckPasscode;
},{"../ApiClient":21}],97:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The LoyaltyMerchantcardsDTOCsc model module.
* @module model/LoyaltyMerchantcardsDTOCsc
*/
LoyaltyMerchantcardsDTOCsc = function () {
    /**
    * Constructs a new <code>LoyaltyMerchantcardsDTOCsc</code>.
    * @alias module:model/LoyaltyMerchantcardsDTOCsc
    * @class
    */

    function LoyaltyMerchantcardsDTOCsc() {
        _classCallCheck(this, LoyaltyMerchantcardsDTOCsc);

        this.cardnumber = undefined;
        this.csc = undefined;
    }

    /**
    * Constructs a <code>LoyaltyMerchantcardsDTOCsc</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/LoyaltyMerchantcardsDTOCsc} obj Optional instance to populate.
    * @return {module:model/LoyaltyMerchantcardsDTOCsc} The populated <code>LoyaltyMerchantcardsDTOCsc</code> instance.
    */


    _createClass(LoyaltyMerchantcardsDTOCsc, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new LoyaltyMerchantcardsDTOCsc();

                if (data.hasOwnProperty('cardnumber')) {
                    obj['cardnumber'] = _ApiClient2.default.convertToType(data['cardnumber'], 'Number');
                }
                if (data.hasOwnProperty('csc')) {
                    obj['csc'] = _ApiClient2.default.convertToType(data['csc'], 'Number');
                }
            }
            return obj;
        }

        /**
        * Card number
        * @member {Number} cardnumber
        */

        /**
        * Card security code
        * @member {Number} csc
        */

    }]);

    return LoyaltyMerchantcardsDTOCsc;
}();

exports.default = LoyaltyMerchantcardsDTOCsc;
},{"../ApiClient":21}],98:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The LoyaltyMerchantcardsDTOLock model module.
* @module model/LoyaltyMerchantcardsDTOLock
*/
LoyaltyMerchantcardsDTOLock = function () {
    /**
    * Constructs a new <code>LoyaltyMerchantcardsDTOLock</code>.
    * @alias module:model/LoyaltyMerchantcardsDTOLock
    * @class
    */

    function LoyaltyMerchantcardsDTOLock() {
        _classCallCheck(this, LoyaltyMerchantcardsDTOLock);

        this.lock_status = undefined;
        this.reason = undefined;
        this.note = undefined;
    }

    /**
    * Constructs a <code>LoyaltyMerchantcardsDTOLock</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/LoyaltyMerchantcardsDTOLock} obj Optional instance to populate.
    * @return {module:model/LoyaltyMerchantcardsDTOLock} The populated <code>LoyaltyMerchantcardsDTOLock</code> instance.
    */


    _createClass(LoyaltyMerchantcardsDTOLock, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new LoyaltyMerchantcardsDTOLock();

                if (data.hasOwnProperty('lock_status')) {
                    obj['lock_status'] = _ApiClient2.default.convertToType(data['lock_status'], 'String');
                }
                if (data.hasOwnProperty('reason')) {
                    obj['reason'] = _ApiClient2.default.convertToType(data['reason'], 'String');
                }
                if (data.hasOwnProperty('note')) {
                    obj['note'] = _ApiClient2.default.convertToType(data['note'], 'String');
                }
            }
            return obj;
        }

        /**
        * Lock status
        * @member {String} lock_status
        */

        /**
        * Lock reason
        * @member {String} reason
        */

        /**
        * Lock note
        * @member {String} note
        */

    }]);

    return LoyaltyMerchantcardsDTOLock;
}();

exports.default = LoyaltyMerchantcardsDTOLock;
},{"../ApiClient":21}],99:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _LoyaltyMerchantcardsDTOValidateMerchantCard = require('./LoyaltyMerchantcardsDTOValidateMerchantCard');

var _LoyaltyMerchantcardsDTOValidateMerchantCard2 = _interopRequireDefault(_LoyaltyMerchantcardsDTOValidateMerchantCard);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The LoyaltyMerchantcardsDTONewPasscode model module.
* @module model/LoyaltyMerchantcardsDTONewPasscode
*/
LoyaltyMerchantcardsDTONewPasscode = function () {
    /**
    * Constructs a new <code>LoyaltyMerchantcardsDTONewPasscode</code>.
    * @alias module:model/LoyaltyMerchantcardsDTONewPasscode
    * @class
    * @implements module:model/LoyaltyMerchantcardsDTOValidateMerchantCard
    */

    function LoyaltyMerchantcardsDTONewPasscode() {
        _classCallCheck(this, LoyaltyMerchantcardsDTONewPasscode);

        this.passcode = undefined;
        this.merchant = undefined;
        this.cardnumber = undefined;


        _LoyaltyMerchantcardsDTOValidateMerchantCard2.default.call(this);
    }

    /**
    * Constructs a <code>LoyaltyMerchantcardsDTONewPasscode</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/LoyaltyMerchantcardsDTONewPasscode} obj Optional instance to populate.
    * @return {module:model/LoyaltyMerchantcardsDTONewPasscode} The populated <code>LoyaltyMerchantcardsDTONewPasscode</code> instance.
    */


    _createClass(LoyaltyMerchantcardsDTONewPasscode, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new LoyaltyMerchantcardsDTONewPasscode();

                _LoyaltyMerchantcardsDTOValidateMerchantCard2.default.constructFromObject(data, obj);

                if (data.hasOwnProperty('passcode')) {
                    obj['passcode'] = _ApiClient2.default.convertToType(data['passcode'], 'Number');
                }
            }
            return obj;
        }

        /**
        * Loyalty Card passcode
        * @member {Number} passcode
        */


        // Implement LoyaltyMerchantcardsDTOValidateMerchantCard interface:
        /**
        * General Merchant id
        * @member {String} merchant
        */

        /**
            * Loyalty Card number
            * @member {Number} cardnumber
            */

    }]);

    return LoyaltyMerchantcardsDTONewPasscode;
}();

exports.default = LoyaltyMerchantcardsDTONewPasscode;
},{"../ApiClient":21,"./LoyaltyMerchantcardsDTOValidateMerchantCard":103}],100:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _PaymentInformation = require('./PaymentInformation');

var _PaymentInformation2 = _interopRequireDefault(_PaymentInformation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The LoyaltyMerchantcardsDTOPaymentContainer model module.
* @module model/LoyaltyMerchantcardsDTOPaymentContainer
*/
LoyaltyMerchantcardsDTOPaymentContainer = function () {
    /**
    * Constructs a new <code>LoyaltyMerchantcardsDTOPaymentContainer</code>.
    * @alias module:model/LoyaltyMerchantcardsDTOPaymentContainer
    * @class
    */

    function LoyaltyMerchantcardsDTOPaymentContainer() {
        _classCallCheck(this, LoyaltyMerchantcardsDTOPaymentContainer);

        this.object = undefined;
        this.id = undefined;
        this.type = undefined;
        this.payment_information = undefined;
    }

    /**
    * Constructs a <code>LoyaltyMerchantcardsDTOPaymentContainer</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/LoyaltyMerchantcardsDTOPaymentContainer} obj Optional instance to populate.
    * @return {module:model/LoyaltyMerchantcardsDTOPaymentContainer} The populated <code>LoyaltyMerchantcardsDTOPaymentContainer</code> instance.
    */


    _createClass(LoyaltyMerchantcardsDTOPaymentContainer, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new LoyaltyMerchantcardsDTOPaymentContainer();

                if (data.hasOwnProperty('object')) {
                    obj['object'] = _ApiClient2.default.convertToType(data['object'], 'String');
                }
                if (data.hasOwnProperty('id')) {
                    obj['id'] = _ApiClient2.default.convertToType(data['id'], 'String');
                }
                if (data.hasOwnProperty('type')) {
                    obj['type'] = _ApiClient2.default.convertToType(data['type'], 'String');
                }
                if (data.hasOwnProperty('payment_information')) {
                    obj['payment_information'] = _PaymentInformation2.default.constructFromObject(data['payment_information']);
                }
            }
            return obj;
        }

        /**
        * Object of payment container
        * @member {String} object
        */

        /**
        * Id of payment container
        * @member {String} id
        */

        /**
        * Type of payment container
        * @member {String} type
        */

        /**
        * Payment information
        * @member {module:model/PaymentInformation} payment_information
        */

    }]);

    return LoyaltyMerchantcardsDTOPaymentContainer;
}();

exports.default = LoyaltyMerchantcardsDTOPaymentContainer;
},{"../ApiClient":21,"./PaymentInformation":130}],101:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The LoyaltyMerchantcardsDTOResetPasscode model module.
* @module model/LoyaltyMerchantcardsDTOResetPasscode
*/
LoyaltyMerchantcardsDTOResetPasscode = function () {
    /**
    * Constructs a new <code>LoyaltyMerchantcardsDTOResetPasscode</code>.
    * @alias module:model/LoyaltyMerchantcardsDTOResetPasscode
    * @class
    */

    function LoyaltyMerchantcardsDTOResetPasscode() {
        _classCallCheck(this, LoyaltyMerchantcardsDTOResetPasscode);

        this.cardnumber = undefined;
        this.passcode = undefined;
    }

    /**
    * Constructs a <code>LoyaltyMerchantcardsDTOResetPasscode</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/LoyaltyMerchantcardsDTOResetPasscode} obj Optional instance to populate.
    * @return {module:model/LoyaltyMerchantcardsDTOResetPasscode} The populated <code>LoyaltyMerchantcardsDTOResetPasscode</code> instance.
    */


    _createClass(LoyaltyMerchantcardsDTOResetPasscode, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new LoyaltyMerchantcardsDTOResetPasscode();

                if (data.hasOwnProperty('cardnumber')) {
                    obj['cardnumber'] = _ApiClient2.default.convertToType(data['cardnumber'], 'Number');
                }
                if (data.hasOwnProperty('passcode')) {
                    obj['passcode'] = _ApiClient2.default.convertToType(data['passcode'], 'Number');
                }
            }
            return obj;
        }

        /**
        * Loyalty Card number
        * @member {Number} cardnumber
        */

        /**
        * Loyalty Card passcode
        * @member {Number} passcode
        */

    }]);

    return LoyaltyMerchantcardsDTOResetPasscode;
}();

exports.default = LoyaltyMerchantcardsDTOResetPasscode;
},{"../ApiClient":21}],102:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The LoyaltyMerchantcardsDTOTransaction model module.
* @module model/LoyaltyMerchantcardsDTOTransaction
*/
LoyaltyMerchantcardsDTOTransaction = function () {
    /**
    * Constructs a new <code>LoyaltyMerchantcardsDTOTransaction</code>.
    * @alias module:model/LoyaltyMerchantcardsDTOTransaction
    * @class
    */

    function LoyaltyMerchantcardsDTOTransaction() {
        _classCallCheck(this, LoyaltyMerchantcardsDTOTransaction);

        this.action = undefined;
        this.terminal_id = undefined;
        this.amount = undefined;
        this.tid = undefined;
        this.store = undefined;
        this.cardnumber = undefined;
        this.bonus_amount = undefined;
        this.amount_split_allowed = undefined;
        this.merchant_id = undefined;
    }

    /**
    * Constructs a <code>LoyaltyMerchantcardsDTOTransaction</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/LoyaltyMerchantcardsDTOTransaction} obj Optional instance to populate.
    * @return {module:model/LoyaltyMerchantcardsDTOTransaction} The populated <code>LoyaltyMerchantcardsDTOTransaction</code> instance.
    */


    _createClass(LoyaltyMerchantcardsDTOTransaction, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new LoyaltyMerchantcardsDTOTransaction();

                if (data.hasOwnProperty('action')) {
                    obj['action'] = _ApiClient2.default.convertToType(data['action'], 'String');
                }
                if (data.hasOwnProperty('terminal_id')) {
                    obj['terminal_id'] = _ApiClient2.default.convertToType(data['terminal_id'], 'String');
                }
                if (data.hasOwnProperty('amount')) {
                    obj['amount'] = _ApiClient2.default.convertToType(data['amount'], 'Number');
                }
                if (data.hasOwnProperty('tid')) {
                    obj['tid'] = _ApiClient2.default.convertToType(data['tid'], 'String');
                }
                if (data.hasOwnProperty('store')) {
                    obj['store'] = _ApiClient2.default.convertToType(data['store'], 'String');
                }
                if (data.hasOwnProperty('cardnumber')) {
                    obj['cardnumber'] = _ApiClient2.default.convertToType(data['cardnumber'], 'Number');
                }
                if (data.hasOwnProperty('bonus_amount')) {
                    obj['bonus_amount'] = _ApiClient2.default.convertToType(data['bonus_amount'], 'Number');
                }
                if (data.hasOwnProperty('amount_split_allowed')) {
                    obj['amount_split_allowed'] = _ApiClient2.default.convertToType(data['amount_split_allowed'], 'String');
                }
                if (data.hasOwnProperty('merchant_id')) {
                    obj['merchant_id'] = _ApiClient2.default.convertToType(data['merchant_id'], 'String');
                }
            }
            return obj;
        }

        /**
        * Action
        * @member {String} action
        */

        /**
        * Terminal id
        * @member {String} terminal_id
        */

        /**
        * Amount
        * @member {Number} amount
        */

        /**
        * Tid
        * @member {String} tid
        */

        /**
        * Store id
        * @member {String} store
        */

        /**
        * Card number
        * @member {Number} cardnumber
        */

        /**
        * Bonus amount
        * @member {Number} bonus_amount
        */

        /**
        * Amount split allowed
        * @member {String} amount_split_allowed
        */

        /**
        * Merchant id
        * @member {String} merchant_id
        */

    }]);

    return LoyaltyMerchantcardsDTOTransaction;
}();

exports.default = LoyaltyMerchantcardsDTOTransaction;
},{"../ApiClient":21}],103:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The LoyaltyMerchantcardsDTOValidateMerchantCard model module.
* @module model/LoyaltyMerchantcardsDTOValidateMerchantCard
*/
LoyaltyMerchantcardsDTOValidateMerchantCard = function () {
    /**
    * Constructs a new <code>LoyaltyMerchantcardsDTOValidateMerchantCard</code>.
    * @alias module:model/LoyaltyMerchantcardsDTOValidateMerchantCard
    * @class
    */

    function LoyaltyMerchantcardsDTOValidateMerchantCard() {
        _classCallCheck(this, LoyaltyMerchantcardsDTOValidateMerchantCard);

        this.merchant = undefined;
        this.cardnumber = undefined;
    }

    /**
    * Constructs a <code>LoyaltyMerchantcardsDTOValidateMerchantCard</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/LoyaltyMerchantcardsDTOValidateMerchantCard} obj Optional instance to populate.
    * @return {module:model/LoyaltyMerchantcardsDTOValidateMerchantCard} The populated <code>LoyaltyMerchantcardsDTOValidateMerchantCard</code> instance.
    */


    _createClass(LoyaltyMerchantcardsDTOValidateMerchantCard, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new LoyaltyMerchantcardsDTOValidateMerchantCard();

                if (data.hasOwnProperty('merchant')) {
                    obj['merchant'] = _ApiClient2.default.convertToType(data['merchant'], 'String');
                }
                if (data.hasOwnProperty('cardnumber')) {
                    obj['cardnumber'] = _ApiClient2.default.convertToType(data['cardnumber'], 'Number');
                }
            }
            return obj;
        }

        /**
        * General Merchant id
        * @member {String} merchant
        */

        /**
        * Loyalty Card number
        * @member {Number} cardnumber
        */

    }]);

    return LoyaltyMerchantcardsDTOValidateMerchantCard;
}();

exports.default = LoyaltyMerchantcardsDTOValidateMerchantCard;
},{"../ApiClient":21}],104:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _LoyaltyMerchantcardsProductModel = require('./LoyaltyMerchantcardsProductModel');

var _LoyaltyMerchantcardsProductModel2 = _interopRequireDefault(_LoyaltyMerchantcardsProductModel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The LoyaltyMerchantcardsList model module.
* @module model/LoyaltyMerchantcardsList
*/
LoyaltyMerchantcardsList = function () {
    /**
    * Constructs a new <code>LoyaltyMerchantcardsList</code>.
    * @alias module:model/LoyaltyMerchantcardsList
    * @class
    */

    function LoyaltyMerchantcardsList() {
        _classCallCheck(this, LoyaltyMerchantcardsList);

        this.count = undefined;
        this.data = undefined;
    }

    /**
    * Constructs a <code>LoyaltyMerchantcardsList</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/LoyaltyMerchantcardsList} obj Optional instance to populate.
    * @return {module:model/LoyaltyMerchantcardsList} The populated <code>LoyaltyMerchantcardsList</code> instance.
    */


    _createClass(LoyaltyMerchantcardsList, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new LoyaltyMerchantcardsList();

                if (data.hasOwnProperty('count')) {
                    obj['count'] = _ApiClient2.default.convertToType(data['count'], 'Number');
                }
                if (data.hasOwnProperty('data')) {
                    obj['data'] = _ApiClient2.default.convertToType(data['data'], [_LoyaltyMerchantcardsProductModel2.default]);
                }
            }
            return obj;
        }

        /**
        * Number of existing loyalty merchant cards
        * @member {Number} count
        */

        /**
        * GET Loyalty/MerchantCards
        * @member {Array.<module:model/LoyaltyMerchantcardsProductModel>} data
        */

    }]);

    return LoyaltyMerchantcardsList;
}();

exports.default = LoyaltyMerchantcardsList;
},{"../ApiClient":21,"./LoyaltyMerchantcardsProductModel":105}],105:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _LoyaltyCardgroupsProductModel = require('./LoyaltyCardgroupsProductModel');

var _LoyaltyCardgroupsProductModel2 = _interopRequireDefault(_LoyaltyCardgroupsProductModel);

var _LoyaltyCardsProductModel = require('./LoyaltyCardsProductModel');

var _LoyaltyCardsProductModel2 = _interopRequireDefault(_LoyaltyCardsProductModel);

var _LoyaltyCustomersProductModel = require('./LoyaltyCustomersProductModel');

var _LoyaltyCustomersProductModel2 = _interopRequireDefault(_LoyaltyCustomersProductModel);

var _LoyaltyMerchantcardsDTOPaymentContainer = require('./LoyaltyMerchantcardsDTOPaymentContainer');

var _LoyaltyMerchantcardsDTOPaymentContainer2 = _interopRequireDefault(_LoyaltyMerchantcardsDTOPaymentContainer);

var _ProductInstanceUID = require('./ProductInstanceUID');

var _ProductInstanceUID2 = _interopRequireDefault(_ProductInstanceUID);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The LoyaltyMerchantcardsProductModel model module.
* @module model/LoyaltyMerchantcardsProductModel
*/
LoyaltyMerchantcardsProductModel = function () {
    /**
    * Constructs a new <code>LoyaltyMerchantcardsProductModel</code>.
    * @alias module:model/LoyaltyMerchantcardsProductModel
    * @class
    */

    function LoyaltyMerchantcardsProductModel() {
        _classCallCheck(this, LoyaltyMerchantcardsProductModel);

        this.object = undefined;
        this.id = undefined;
        this.card = undefined;
        this.merchant = undefined;
        this.created_for_merchant = undefined;
        this.created_for_store = undefined;
        this.customer = undefined;
        this.cardgroup = undefined;
        this.payment_container = undefined;
        this.balance = undefined;
        this.points = undefined;
        this.bonus_balance = undefined;
        this.cash_balance = undefined;
        this.stock_status = undefined;
        this.lock_status = undefined;
        this.last_usage = undefined;
        this.last_charge = undefined;
        this.is_base_card = undefined;
        this.passcode = undefined;
    }

    /**
    * Constructs a <code>LoyaltyMerchantcardsProductModel</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/LoyaltyMerchantcardsProductModel} obj Optional instance to populate.
    * @return {module:model/LoyaltyMerchantcardsProductModel} The populated <code>LoyaltyMerchantcardsProductModel</code> instance.
    */


    _createClass(LoyaltyMerchantcardsProductModel, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new LoyaltyMerchantcardsProductModel();

                if (data.hasOwnProperty('object')) {
                    obj['object'] = _ApiClient2.default.convertToType(data['object'], 'String');
                }
                if (data.hasOwnProperty('id')) {
                    obj['id'] = _ApiClient2.default.convertToType(data['id'], 'String');
                }
                if (data.hasOwnProperty('card')) {
                    obj['card'] = _LoyaltyCardsProductModel2.default.constructFromObject(data['card']);
                }
                if (data.hasOwnProperty('merchant')) {
                    obj['merchant'] = _ProductInstanceUID2.default.constructFromObject(data['merchant']);
                }
                if (data.hasOwnProperty('created_for_merchant')) {
                    obj['created_for_merchant'] = _ProductInstanceUID2.default.constructFromObject(data['created_for_merchant']);
                }
                if (data.hasOwnProperty('created_for_store')) {
                    obj['created_for_store'] = _ProductInstanceUID2.default.constructFromObject(data['created_for_store']);
                }
                if (data.hasOwnProperty('customer')) {
                    obj['customer'] = _LoyaltyCustomersProductModel2.default.constructFromObject(data['customer']);
                }
                if (data.hasOwnProperty('cardgroup')) {
                    obj['cardgroup'] = _LoyaltyCardgroupsProductModel2.default.constructFromObject(data['cardgroup']);
                }
                if (data.hasOwnProperty('payment_container')) {
                    obj['payment_container'] = _LoyaltyMerchantcardsDTOPaymentContainer2.default.constructFromObject(data['payment_container']);
                }
                if (data.hasOwnProperty('balance')) {
                    obj['balance'] = _ApiClient2.default.convertToType(data['balance'], 'Number');
                }
                if (data.hasOwnProperty('points')) {
                    obj['points'] = _ApiClient2.default.convertToType(data['points'], 'Number');
                }
                if (data.hasOwnProperty('bonus_balance')) {
                    obj['bonus_balance'] = _ApiClient2.default.convertToType(data['bonus_balance'], 'Number');
                }
                if (data.hasOwnProperty('cash_balance')) {
                    obj['cash_balance'] = _ApiClient2.default.convertToType(data['cash_balance'], 'Number');
                }
                if (data.hasOwnProperty('stock_status')) {
                    obj['stock_status'] = _ApiClient2.default.convertToType(data['stock_status'], 'String');
                }
                if (data.hasOwnProperty('lock_status')) {
                    obj['lock_status'] = _ApiClient2.default.convertToType(data['lock_status'], 'String');
                }
                if (data.hasOwnProperty('last_usage')) {
                    obj['last_usage'] = _ApiClient2.default.convertToType(data['last_usage'], 'Date');
                }
                if (data.hasOwnProperty('last_charge')) {
                    obj['last_charge'] = _ApiClient2.default.convertToType(data['last_charge'], 'Date');
                }
                if (data.hasOwnProperty('is_base_card')) {
                    obj['is_base_card'] = _ApiClient2.default.convertToType(data['is_base_card'], 'Boolean');
                }
                if (data.hasOwnProperty('passcode')) {
                    obj['passcode'] = _ApiClient2.default.convertToType(data['passcode'], 'Number');
                }
            }
            return obj;
        }

        /**
        * Object of loyalty merchant card
        * @member {String} object
        */

        /**
        * Id of loyalty merchant card
        * @member {String} id
        */

        /**
        * Id of loyalty store group
        * @member {module:model/LoyaltyCardsProductModel} card
        */

        /**
        * Current merchant id
        * @member {module:model/ProductInstanceUID} merchant
        */

        /**
        * Merchant id, that loyalty merchant card object was created for
        * @member {module:model/ProductInstanceUID} created_for_merchant
        */

        /**
        * Store id, that loyalty merchant card object was created for
        * @member {module:model/ProductInstanceUID} created_for_store
        */

        /**
        * Loyalty merchant card customer
        * @member {module:model/LoyaltyCustomersProductModel} customer
        */

        /**
        * Loyalty merchant card card group
        * @member {module:model/LoyaltyCardgroupsProductModel} cardgroup
        */

        /**
        * Loyalty merchant card payment container
        * @member {module:model/LoyaltyMerchantcardsDTOPaymentContainer} payment_container
        */

        /**
        * Loyalty merchant card balance
        * @member {Number} balance
        */

        /**
        * Loyalty merchant card points
        * @member {Number} points
        */

        /**
        * Loyalty merchant card bonus balance
        * @member {Number} bonus_balance
        */

        /**
        * Loyalty merchant card cash balance
        * @member {Number} cash_balance
        */

        /**
        * Loyalty merchant card stock status
        * @member {String} stock_status
        */

        /**
        * Loyalty merchant card lock status
        * @member {String} lock_status
        */

        /**
        * Loyalty merchant card last usage
        * @member {Date} last_usage
        */

        /**
        * Loyalty merchant card last charge
        * @member {Date} last_charge
        */

        /**
        * Information whether loyalty merchant card is base card
        * @member {Boolean} is_base_card
        */

        /**
        * Loyalty merchant card passcode
        * @member {Number} passcode
        */

    }]);

    return LoyaltyMerchantcardsProductModel;
}();

exports.default = LoyaltyMerchantcardsProductModel;
},{"../ApiClient":21,"./LoyaltyCardgroupsProductModel":82,"./LoyaltyCardsProductModel":85,"./LoyaltyCustomersProductModel":90,"./LoyaltyMerchantcardsDTOPaymentContainer":100,"./ProductInstanceUID":145}],106:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _LoyaltyCardgroupsProductModel = require('./LoyaltyCardgroupsProductModel');

var _LoyaltyCardgroupsProductModel2 = _interopRequireDefault(_LoyaltyCardgroupsProductModel);

var _LoyaltyCardsProductModel = require('./LoyaltyCardsProductModel');

var _LoyaltyCardsProductModel2 = _interopRequireDefault(_LoyaltyCardsProductModel);

var _LoyaltyCustomersProductModel = require('./LoyaltyCustomersProductModel');

var _LoyaltyCustomersProductModel2 = _interopRequireDefault(_LoyaltyCustomersProductModel);

var _LoyaltyMerchantcardsDTOPaymentContainer = require('./LoyaltyMerchantcardsDTOPaymentContainer');

var _LoyaltyMerchantcardsDTOPaymentContainer2 = _interopRequireDefault(_LoyaltyMerchantcardsDTOPaymentContainer);

var _LoyaltyMerchantcardsProductModel = require('./LoyaltyMerchantcardsProductModel');

var _LoyaltyMerchantcardsProductModel2 = _interopRequireDefault(_LoyaltyMerchantcardsProductModel);

var _ProductInstanceUID = require('./ProductInstanceUID');

var _ProductInstanceUID2 = _interopRequireDefault(_ProductInstanceUID);

var _ReceiptType = require('./ReceiptType');

var _ReceiptType2 = _interopRequireDefault(_ReceiptType);

var _ReceiptTypeValue = require('./ReceiptTypeValue');

var _ReceiptTypeValue2 = _interopRequireDefault(_ReceiptTypeValue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The LoyaltyMerchantcardsProductWithReceiptModel model module.
* @module model/LoyaltyMerchantcardsProductWithReceiptModel
*/
LoyaltyMerchantcardsProductWithReceiptModel = function () {
    /**
    * Constructs a new <code>LoyaltyMerchantcardsProductWithReceiptModel</code>.
    * @alias module:model/LoyaltyMerchantcardsProductWithReceiptModel
    * @class
    * @implements module:model/LoyaltyMerchantcardsProductModel
    */

    function LoyaltyMerchantcardsProductWithReceiptModel() {
        _classCallCheck(this, LoyaltyMerchantcardsProductWithReceiptModel);

        this.receipt_header = undefined;
        this.receipt = undefined;
        this.object = undefined;
        this.id = undefined;
        this.card = undefined;
        this.merchant = undefined;
        this.created_for_merchant = undefined;
        this.created_for_store = undefined;
        this.customer = undefined;
        this.cardgroup = undefined;
        this.payment_container = undefined;
        this.balance = undefined;
        this.points = undefined;
        this.bonus_balance = undefined;
        this.cash_balance = undefined;
        this.stock_status = undefined;
        this.lock_status = undefined;
        this.last_usage = undefined;
        this.last_charge = undefined;
        this.is_base_card = undefined;
        this.passcode = undefined;


        _LoyaltyMerchantcardsProductModel2.default.call(this);
    }

    /**
    * Constructs a <code>LoyaltyMerchantcardsProductWithReceiptModel</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/LoyaltyMerchantcardsProductWithReceiptModel} obj Optional instance to populate.
    * @return {module:model/LoyaltyMerchantcardsProductWithReceiptModel} The populated <code>LoyaltyMerchantcardsProductWithReceiptModel</code> instance.
    */


    _createClass(LoyaltyMerchantcardsProductWithReceiptModel, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new LoyaltyMerchantcardsProductWithReceiptModel();

                _LoyaltyMerchantcardsProductModel2.default.constructFromObject(data, obj);

                if (data.hasOwnProperty('receipt_header')) {
                    obj['receipt_header'] = _ApiClient2.default.convertToType(data['receipt_header'], [_ReceiptType2.default]);
                }
                if (data.hasOwnProperty('receipt')) {
                    obj['receipt'] = _ApiClient2.default.convertToType(data['receipt'], [_ReceiptTypeValue2.default]);
                }
            }
            return obj;
        }

        /**
        * Receipt header
        * @member {Array.<module:model/ReceiptType>} receipt_header
        */

        /**
        * Receipt
        * @member {Array.<module:model/ReceiptTypeValue>} receipt
        */


        // Implement LoyaltyMerchantcardsProductModel interface:
        /**
        * Object of loyalty merchant card
        * @member {String} object
        */

        /**
            * Id of loyalty merchant card
            * @member {String} id
            */

        /**
            * Id of loyalty store group
            * @member {module:model/LoyaltyCardsProductModel} card
            */

        /**
            * Current merchant id
            * @member {module:model/ProductInstanceUID} merchant
            */

        /**
            * Merchant id, that loyalty merchant card object was created for
            * @member {module:model/ProductInstanceUID} created_for_merchant
            */

        /**
            * Store id, that loyalty merchant card object was created for
            * @member {module:model/ProductInstanceUID} created_for_store
            */

        /**
            * Loyalty merchant card customer
            * @member {module:model/LoyaltyCustomersProductModel} customer
            */

        /**
            * Loyalty merchant card card group
            * @member {module:model/LoyaltyCardgroupsProductModel} cardgroup
            */

        /**
            * Loyalty merchant card payment container
            * @member {module:model/LoyaltyMerchantcardsDTOPaymentContainer} payment_container
            */

        /**
            * Loyalty merchant card balance
            * @member {Number} balance
            */

        /**
            * Loyalty merchant card points
            * @member {Number} points
            */

        /**
            * Loyalty merchant card bonus balance
            * @member {Number} bonus_balance
            */

        /**
            * Loyalty merchant card cash balance
            * @member {Number} cash_balance
            */

        /**
            * Loyalty merchant card stock status
            * @member {String} stock_status
            */

        /**
            * Loyalty merchant card lock status
            * @member {String} lock_status
            */

        /**
            * Loyalty merchant card last usage
            * @member {Date} last_usage
            */

        /**
            * Loyalty merchant card last charge
            * @member {Date} last_charge
            */

        /**
            * Information whether loyalty merchant card is base card
            * @member {Boolean} is_base_card
            */

        /**
            * Loyalty merchant card passcode
            * @member {Number} passcode
            */

    }]);

    return LoyaltyMerchantcardsProductWithReceiptModel;
}();

exports.default = LoyaltyMerchantcardsProductWithReceiptModel;
},{"../ApiClient":21,"./LoyaltyCardgroupsProductModel":82,"./LoyaltyCardsProductModel":85,"./LoyaltyCustomersProductModel":90,"./LoyaltyMerchantcardsDTOPaymentContainer":100,"./LoyaltyMerchantcardsProductModel":105,"./ProductInstanceUID":145,"./ReceiptType":146,"./ReceiptTypeValue":147}],107:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The LoyaltyMerchantcardsValidateMerchantCard model module.
* @module model/LoyaltyMerchantcardsValidateMerchantCard
*/
LoyaltyMerchantcardsValidateMerchantCard = function () {
    /**
    * Constructs a new <code>LoyaltyMerchantcardsValidateMerchantCard</code>.
    * @alias module:model/LoyaltyMerchantcardsValidateMerchantCard
    * @class
    */

    function LoyaltyMerchantcardsValidateMerchantCard() {
        _classCallCheck(this, LoyaltyMerchantcardsValidateMerchantCard);

        this.isValid = undefined;
        this.hasPasscode = undefined;
        this.isLocked = undefined;
    }

    /**
    * Constructs a <code>LoyaltyMerchantcardsValidateMerchantCard</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/LoyaltyMerchantcardsValidateMerchantCard} obj Optional instance to populate.
    * @return {module:model/LoyaltyMerchantcardsValidateMerchantCard} The populated <code>LoyaltyMerchantcardsValidateMerchantCard</code> instance.
    */


    _createClass(LoyaltyMerchantcardsValidateMerchantCard, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new LoyaltyMerchantcardsValidateMerchantCard();

                if (data.hasOwnProperty('isValid')) {
                    obj['isValid'] = _ApiClient2.default.convertToType(data['isValid'], 'Boolean');
                }
                if (data.hasOwnProperty('hasPasscode')) {
                    obj['hasPasscode'] = _ApiClient2.default.convertToType(data['hasPasscode'], 'Boolean');
                }
                if (data.hasOwnProperty('isLocked')) {
                    obj['isLocked'] = _ApiClient2.default.convertToType(data['isLocked'], 'Boolean');
                }
            }
            return obj;
        }

        /**
        * Result has true or false value
        * @member {Boolean} isValid
        */

        /**
        * Result has true or false value
        * @member {Boolean} hasPasscode
        */

        /**
        * Result has true or false value
        * @member {Boolean} isLocked
        */

    }]);

    return LoyaltyMerchantcardsValidateMerchantCard;
}();

exports.default = LoyaltyMerchantcardsValidateMerchantCard;
},{"../ApiClient":21}],108:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The LoyaltyStoregroupsDTO model module.
* @module model/LoyaltyStoregroupsDTO
*/
LoyaltyStoregroupsDTO = function () {
    /**
    * Constructs a new <code>LoyaltyStoregroupsDTO</code>.
    * @alias module:model/LoyaltyStoregroupsDTO
    * @class
    */

    function LoyaltyStoregroupsDTO() {
        _classCallCheck(this, LoyaltyStoregroupsDTO);

        this.name = undefined;
        this.merchant = undefined;
        this.stores = undefined;
    }

    /**
    * Constructs a <code>LoyaltyStoregroupsDTO</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/LoyaltyStoregroupsDTO} obj Optional instance to populate.
    * @return {module:model/LoyaltyStoregroupsDTO} The populated <code>LoyaltyStoregroupsDTO</code> instance.
    */


    _createClass(LoyaltyStoregroupsDTO, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new LoyaltyStoregroupsDTO();

                if (data.hasOwnProperty('name')) {
                    obj['name'] = _ApiClient2.default.convertToType(data['name'], 'String');
                }
                if (data.hasOwnProperty('merchant')) {
                    obj['merchant'] = _ApiClient2.default.convertToType(data['merchant'], 'String');
                }
                if (data.hasOwnProperty('stores')) {
                    obj['stores'] = _ApiClient2.default.convertToType(data['stores'], ['String']);
                }
            }
            return obj;
        }

        /**
        * Loyalty store group name
        * @member {String} name
        */

        /**
        * Loyalty store group merchant id
        * @member {String} merchant
        */

        /**
        * List of loyalty stores ids
        * @member {Array.<String>} stores
        */

    }]);

    return LoyaltyStoregroupsDTO;
}();

exports.default = LoyaltyStoregroupsDTO;
},{"../ApiClient":21}],109:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The LoyaltyStoregroupsDTOStoresAddressComponents model module.
* @module model/LoyaltyStoregroupsDTOStoresAddressComponents
*/
LoyaltyStoregroupsDTOStoresAddressComponents = function () {
    /**
    * Constructs a new <code>LoyaltyStoregroupsDTOStoresAddressComponents</code>.
    * @alias module:model/LoyaltyStoregroupsDTOStoresAddressComponents
    * @class
    */

    function LoyaltyStoregroupsDTOStoresAddressComponents() {
        _classCallCheck(this, LoyaltyStoregroupsDTOStoresAddressComponents);

        this.long_name = undefined;
        this.short_name = undefined;
        this.types = undefined;
    }

    /**
    * Constructs a <code>LoyaltyStoregroupsDTOStoresAddressComponents</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/LoyaltyStoregroupsDTOStoresAddressComponents} obj Optional instance to populate.
    * @return {module:model/LoyaltyStoregroupsDTOStoresAddressComponents} The populated <code>LoyaltyStoregroupsDTOStoresAddressComponents</code> instance.
    */


    _createClass(LoyaltyStoregroupsDTOStoresAddressComponents, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new LoyaltyStoregroupsDTOStoresAddressComponents();

                if (data.hasOwnProperty('long_name')) {
                    obj['long_name'] = _ApiClient2.default.convertToType(data['long_name'], 'String');
                }
                if (data.hasOwnProperty('short_name')) {
                    obj['short_name'] = _ApiClient2.default.convertToType(data['short_name'], 'String');
                }
                if (data.hasOwnProperty('types')) {
                    obj['types'] = _ApiClient2.default.convertToType(data['types'], 'String');
                }
            }
            return obj;
        }

        /**
        * Long name
        * @member {String} long_name
        */

        /**
        * Short name
        * @member {String} short_name
        */

        /**
        * Types
        * @member {String} types
        */

    }]);

    return LoyaltyStoregroupsDTOStoresAddressComponents;
}();

exports.default = LoyaltyStoregroupsDTOStoresAddressComponents;
},{"../ApiClient":21}],110:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _LoyaltyStoregroupsProductModel = require('./LoyaltyStoregroupsProductModel');

var _LoyaltyStoregroupsProductModel2 = _interopRequireDefault(_LoyaltyStoregroupsProductModel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The LoyaltyStoregroupsList model module.
* @module model/LoyaltyStoregroupsList
*/
LoyaltyStoregroupsList = function () {
    /**
    * Constructs a new <code>LoyaltyStoregroupsList</code>.
    * @alias module:model/LoyaltyStoregroupsList
    * @class
    */

    function LoyaltyStoregroupsList() {
        _classCallCheck(this, LoyaltyStoregroupsList);

        this.count = undefined;
        this.data = undefined;
    }

    /**
    * Constructs a <code>LoyaltyStoregroupsList</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/LoyaltyStoregroupsList} obj Optional instance to populate.
    * @return {module:model/LoyaltyStoregroupsList} The populated <code>LoyaltyStoregroupsList</code> instance.
    */


    _createClass(LoyaltyStoregroupsList, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new LoyaltyStoregroupsList();

                if (data.hasOwnProperty('count')) {
                    obj['count'] = _ApiClient2.default.convertToType(data['count'], 'Number');
                }
                if (data.hasOwnProperty('data')) {
                    obj['data'] = _ApiClient2.default.convertToType(data['data'], [_LoyaltyStoregroupsProductModel2.default]);
                }
            }
            return obj;
        }

        /**
        * Number of existing loyalty store groups
        * @member {Number} count
        */

        /**
        * GET Loyalty/StoreGroups
        * @member {Array.<module:model/LoyaltyStoregroupsProductModel>} data
        */

    }]);

    return LoyaltyStoregroupsList;
}();

exports.default = LoyaltyStoregroupsList;
},{"../ApiClient":21,"./LoyaltyStoregroupsProductModel":111}],111:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _LoyaltyDTOMerchant = require('./LoyaltyDTOMerchant');

var _LoyaltyDTOMerchant2 = _interopRequireDefault(_LoyaltyDTOMerchant);

var _LoyaltyDTOStore = require('./LoyaltyDTOStore');

var _LoyaltyDTOStore2 = _interopRequireDefault(_LoyaltyDTOStore);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The LoyaltyStoregroupsProductModel model module.
* @module model/LoyaltyStoregroupsProductModel
*/
LoyaltyStoregroupsProductModel = function () {
    /**
    * Constructs a new <code>LoyaltyStoregroupsProductModel</code>.
    * @alias module:model/LoyaltyStoregroupsProductModel
    * @class
    */

    function LoyaltyStoregroupsProductModel() {
        _classCallCheck(this, LoyaltyStoregroupsProductModel);

        this.object = undefined;
        this.id = undefined;
        this.merchant = undefined;
        this.stores = undefined;
        this.created = undefined;
        this.updated = undefined;
    }

    /**
    * Constructs a <code>LoyaltyStoregroupsProductModel</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/LoyaltyStoregroupsProductModel} obj Optional instance to populate.
    * @return {module:model/LoyaltyStoregroupsProductModel} The populated <code>LoyaltyStoregroupsProductModel</code> instance.
    */


    _createClass(LoyaltyStoregroupsProductModel, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new LoyaltyStoregroupsProductModel();

                if (data.hasOwnProperty('object')) {
                    obj['object'] = _ApiClient2.default.convertToType(data['object'], 'String');
                }
                if (data.hasOwnProperty('id')) {
                    obj['id'] = _ApiClient2.default.convertToType(data['id'], 'String');
                }
                if (data.hasOwnProperty('merchant')) {
                    obj['merchant'] = _LoyaltyDTOMerchant2.default.constructFromObject(data['merchant']);
                }
                if (data.hasOwnProperty('stores')) {
                    obj['stores'] = _ApiClient2.default.convertToType(data['stores'], [_LoyaltyDTOStore2.default]);
                }
                if (data.hasOwnProperty('created')) {
                    obj['created'] = _ApiClient2.default.convertToType(data['created'], 'Date');
                }
                if (data.hasOwnProperty('updated')) {
                    obj['updated'] = _ApiClient2.default.convertToType(data['updated'], 'Date');
                }
            }
            return obj;
        }

        /**
        * Object of loyalty store group
        * @member {String} object
        */

        /**
        * Id of loyalty store group
        * @member {String} id
        */

        /**
        * Merchant data for loyalty
        * @member {module:model/LoyaltyDTOMerchant} merchant
        */

        /**
        * LoyaltyStoregroupsProductModel
        * @member {Array.<module:model/LoyaltyDTOStore>} stores
        */

        /**
        * Creation date
        * @member {Date} created
        */

        /**
        * Update date
        * @member {Date} updated
        */

    }]);

    return LoyaltyStoregroupsProductModel;
}();

exports.default = LoyaltyStoregroupsProductModel;
},{"../ApiClient":21,"./LoyaltyDTOMerchant":92,"./LoyaltyDTOStore":93}],112:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _DayTime = require('./DayTime');

var _DayTime2 = _interopRequireDefault(_DayTime);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The OpenHours model module.
* @module model/OpenHours
*/
OpenHours = function () {
    /**
    * Constructs a new <code>OpenHours</code>.
    * Open hours
    * @alias module:model/OpenHours
    * @class
    */

    function OpenHours() {
        _classCallCheck(this, OpenHours);

        this.open = undefined;
        this.close = undefined;
    }

    /**
    * Constructs a <code>OpenHours</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/OpenHours} obj Optional instance to populate.
    * @return {module:model/OpenHours} The populated <code>OpenHours</code> instance.
    */


    _createClass(OpenHours, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new OpenHours();

                if (data.hasOwnProperty('open')) {
                    obj['open'] = _DayTime2.default.constructFromObject(data['open']);
                }
                if (data.hasOwnProperty('close')) {
                    obj['close'] = _DayTime2.default.constructFromObject(data['close']);
                }
            }
            return obj;
        }

        /**
        * Open
        * @member {module:model/DayTime} open
        */

        /**
        * Close
        * @member {module:model/DayTime} close
        */

    }]);

    return OpenHours;
}();

exports.default = OpenHours;
},{"../ApiClient":21,"./DayTime":55}],113:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The ParentModel model module.
* @module model/ParentModel
*/
ParentModel = function () {
    /**
    * Constructs a new <code>ParentModel</code>.
    * @alias module:model/ParentModel
    * @class
    */

    function ParentModel() {
        _classCallCheck(this, ParentModel);

        this.object = undefined;
        this.id = undefined;
        this.type = undefined;
    }

    /**
    * Constructs a <code>ParentModel</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/ParentModel} obj Optional instance to populate.
    * @return {module:model/ParentModel} The populated <code>ParentModel</code> instance.
    */


    _createClass(ParentModel, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new ParentModel();

                if (data.hasOwnProperty('object')) {
                    obj['object'] = _ApiClient2.default.convertToType(data['object'], 'String');
                }
                if (data.hasOwnProperty('id')) {
                    obj['id'] = _ApiClient2.default.convertToType(data['id'], 'String');
                }
                if (data.hasOwnProperty('type')) {
                    obj['type'] = _ApiClient2.default.convertToType(data['type'], 'String');
                }
            }
            return obj;
        }

        /**
        * Object of parent
        * @member {String} object
        */

        /**
        * Id of parent
        * @member {String} id
        */

        /**
        * Type of parent
        * @member {String} type
        */

    }]);

    return ParentModel;
}();

exports.default = ParentModel;
},{"../ApiClient":21}],114:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The PaymentContainerMandate model module.
* @module model/PaymentContainerMandate
*/
PaymentContainerMandate = function () {
    /**
    * Constructs a new <code>PaymentContainerMandate</code>.
    * @alias module:model/PaymentContainerMandate
    * @class
    */

    function PaymentContainerMandate() {
        _classCallCheck(this, PaymentContainerMandate);

        this.sepa_mandate_id = undefined;
        this.iban = undefined;
        this.bic = undefined;
        this.type = undefined;
        this.status = undefined;
        this.identification = undefined;
    }

    /**
    * Constructs a <code>PaymentContainerMandate</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/PaymentContainerMandate} obj Optional instance to populate.
    * @return {module:model/PaymentContainerMandate} The populated <code>PaymentContainerMandate</code> instance.
    */


    _createClass(PaymentContainerMandate, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new PaymentContainerMandate();

                if (data.hasOwnProperty('sepa_mandate_id')) {
                    obj['sepa_mandate_id'] = _ApiClient2.default.convertToType(data['sepa_mandate_id'], 'String');
                }
                if (data.hasOwnProperty('iban')) {
                    obj['iban'] = _ApiClient2.default.convertToType(data['iban'], 'String');
                }
                if (data.hasOwnProperty('bic')) {
                    obj['bic'] = _ApiClient2.default.convertToType(data['bic'], 'String');
                }
                if (data.hasOwnProperty('type')) {
                    obj['type'] = _ApiClient2.default.convertToType(data['type'], 'String');
                }
                if (data.hasOwnProperty('status')) {
                    obj['status'] = _ApiClient2.default.convertToType(data['status'], 'String');
                }
                if (data.hasOwnProperty('identification')) {
                    obj['identification'] = _ApiClient2.default.convertToType(data['identification'], 'String');
                }
            }
            return obj;
        }

        /**
        * Sepa mandate id
        * @member {String} sepa_mandate_id
        */

        /**
        * IBAN
        * @member {String} iban
        */

        /**
        * BIC
        * @member {String} bic
        */

        /**
        * Type
        * @member {String} type
        */

        /**
        * Status
        * @member {String} status
        */

        /**
        * Identification
        * @member {String} identification
        */

    }]);

    return PaymentContainerMandate;
}();

exports.default = PaymentContainerMandate;
},{"../ApiClient":21}],115:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _PaymentContainersDTOCustomer = require('./PaymentContainersDTOCustomer');

var _PaymentContainersDTOCustomer2 = _interopRequireDefault(_PaymentContainersDTOCustomer);

var _PaymentContainersDTOPrivate = require('./PaymentContainersDTOPrivate');

var _PaymentContainersDTOPrivate2 = _interopRequireDefault(_PaymentContainersDTOPrivate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The PaymentContainersDTO model module.
* @module model/PaymentContainersDTO
*/
PaymentContainersDTO = function () {
    /**
    * Constructs a new <code>PaymentContainersDTO</code>.
    * @alias module:model/PaymentContainersDTO
    * @class
    */

    function PaymentContainersDTO() {
        _classCallCheck(this, PaymentContainersDTO);

        this.customer = undefined;
        this.type = undefined;
        this.private = undefined;
    }

    /**
    * Constructs a <code>PaymentContainersDTO</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/PaymentContainersDTO} obj Optional instance to populate.
    * @return {module:model/PaymentContainersDTO} The populated <code>PaymentContainersDTO</code> instance.
    */


    _createClass(PaymentContainersDTO, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new PaymentContainersDTO();

                if (data.hasOwnProperty('customer')) {
                    obj['customer'] = _PaymentContainersDTOCustomer2.default.constructFromObject(data['customer']);
                }
                if (data.hasOwnProperty('type')) {
                    obj['type'] = _ApiClient2.default.convertToType(data['type'], 'String');
                }
                if (data.hasOwnProperty('private')) {
                    obj['private'] = _PaymentContainersDTOPrivate2.default.constructFromObject(data['private']);
                }
            }
            return obj;
        }

        /**
        * @member {module:model/PaymentContainersDTOCustomer} customer
        */

        /**
        * Type of Payment Containers
        * @member {String} type
        */

        /**
        * @member {module:model/PaymentContainersDTOPrivate} private
        */

    }]);

    return PaymentContainersDTO;
}();

exports.default = PaymentContainersDTO;
},{"../ApiClient":21,"./PaymentContainersDTOCustomer":116,"./PaymentContainersDTOPrivate":117}],116:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The PaymentContainersDTOCustomer model module.
* @module model/PaymentContainersDTOCustomer
*/
PaymentContainersDTOCustomer = function () {
    /**
    * Constructs a new <code>PaymentContainersDTOCustomer</code>.
    * The customer of this payment container
    * @alias module:model/PaymentContainersDTOCustomer
    * @class
    */

    function PaymentContainersDTOCustomer() {
        _classCallCheck(this, PaymentContainersDTOCustomer);

        this.id = undefined;
    }

    /**
    * Constructs a <code>PaymentContainersDTOCustomer</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/PaymentContainersDTOCustomer} obj Optional instance to populate.
    * @return {module:model/PaymentContainersDTOCustomer} The populated <code>PaymentContainersDTOCustomer</code> instance.
    */


    _createClass(PaymentContainersDTOCustomer, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new PaymentContainersDTOCustomer();

                if (data.hasOwnProperty('id')) {
                    obj['id'] = _ApiClient2.default.convertToType(data['id'], 'String');
                }
            }
            return obj;
        }

        /**
        * Customer identifier
        * @member {String} id
        */

    }]);

    return PaymentContainersDTOCustomer;
}();

exports.default = PaymentContainersDTOCustomer;
},{"../ApiClient":21}],117:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The PaymentContainersDTOPrivate model module.
* @module model/PaymentContainersDTOPrivate
*/
PaymentContainersDTOPrivate = function () {
    /**
    * Constructs a new <code>PaymentContainersDTOPrivate</code>.
    * 
    * @alias module:model/PaymentContainersDTOPrivate
    * @class
    */

    function PaymentContainersDTOPrivate() {
        _classCallCheck(this, PaymentContainersDTOPrivate);

        this.owner = undefined;
        this.iban = undefined;
        this.bic = undefined;
    }

    /**
    * Constructs a <code>PaymentContainersDTOPrivate</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/PaymentContainersDTOPrivate} obj Optional instance to populate.
    * @return {module:model/PaymentContainersDTOPrivate} The populated <code>PaymentContainersDTOPrivate</code> instance.
    */


    _createClass(PaymentContainersDTOPrivate, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new PaymentContainersDTOPrivate();

                if (data.hasOwnProperty('owner')) {
                    obj['owner'] = _ApiClient2.default.convertToType(data['owner'], 'String');
                }
                if (data.hasOwnProperty('iban')) {
                    obj['iban'] = _ApiClient2.default.convertToType(data['iban'], 'String');
                }
                if (data.hasOwnProperty('bic')) {
                    obj['bic'] = _ApiClient2.default.convertToType(data['bic'], 'String');
                }
            }
            return obj;
        }

        /**
        * PaymentContainersDTO
        * @member {String} owner
        */

        /**
        * PaymentContainersDTO
        * @member {String} iban
        */

        /**
        * PaymentContainersDTO
        * @member {String} bic
        */

    }]);

    return PaymentContainersDTOPrivate;
}();

exports.default = PaymentContainersDTOPrivate;
},{"../ApiClient":21}],118:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _PaymentContainersProductModel = require('./PaymentContainersProductModel');

var _PaymentContainersProductModel2 = _interopRequireDefault(_PaymentContainersProductModel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The PaymentContainersList model module.
* @module model/PaymentContainersList
*/
PaymentContainersList = function () {
    /**
    * Constructs a new <code>PaymentContainersList</code>.
    * @alias module:model/PaymentContainersList
    * @class
    */

    function PaymentContainersList() {
        _classCallCheck(this, PaymentContainersList);

        this.count = undefined;
        this.data = undefined;
    }

    /**
    * Constructs a <code>PaymentContainersList</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/PaymentContainersList} obj Optional instance to populate.
    * @return {module:model/PaymentContainersList} The populated <code>PaymentContainersList</code> instance.
    */


    _createClass(PaymentContainersList, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new PaymentContainersList();

                if (data.hasOwnProperty('count')) {
                    obj['count'] = _ApiClient2.default.convertToType(data['count'], 'Number');
                }
                if (data.hasOwnProperty('data')) {
                    obj['data'] = _ApiClient2.default.convertToType(data['data'], [_PaymentContainersProductModel2.default]);
                }
            }
            return obj;
        }

        /**
        * Number of existing payment containers
        * @member {Number} count
        */

        /**
        * GET Payment/Containers
        * @member {Array.<module:model/PaymentContainersProductModel>} data
        */

    }]);

    return PaymentContainersList;
}();

exports.default = PaymentContainersList;
},{"../ApiClient":21,"./PaymentContainersProductModel":119}],119:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _BankAccountDescriptor = require('./BankAccountDescriptor');

var _BankAccountDescriptor2 = _interopRequireDefault(_BankAccountDescriptor);

var _PaymentContainerMandate = require('./PaymentContainerMandate');

var _PaymentContainerMandate2 = _interopRequireDefault(_PaymentContainerMandate);

var _PaymentContractsProductModel = require('./PaymentContractsProductModel');

var _PaymentContractsProductModel2 = _interopRequireDefault(_PaymentContractsProductModel);

var _PaymentCustomersProductModel = require('./PaymentCustomersProductModel');

var _PaymentCustomersProductModel2 = _interopRequireDefault(_PaymentCustomersProductModel);

var _ProductInstanceUID = require('./ProductInstanceUID');

var _ProductInstanceUID2 = _interopRequireDefault(_ProductInstanceUID);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The PaymentContainersProductModel model module.
* @module model/PaymentContainersProductModel
*/
PaymentContainersProductModel = function () {
    /**
    * Constructs a new <code>PaymentContainersProductModel</code>.
    * @alias module:model/PaymentContainersProductModel
    * @class
    */

    function PaymentContainersProductModel() {
        _classCallCheck(this, PaymentContainersProductModel);

        this.object = undefined;
        this.id = undefined;
        this.contract = undefined;
        this.customer = undefined;
        this.assign = undefined;
        this.type = undefined;
        this.public = undefined;
        this.private = undefined;
        this.created = undefined;
        this.updated = undefined;
        this.mandate = undefined;
    }

    /**
    * Constructs a <code>PaymentContainersProductModel</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/PaymentContainersProductModel} obj Optional instance to populate.
    * @return {module:model/PaymentContainersProductModel} The populated <code>PaymentContainersProductModel</code> instance.
    */


    _createClass(PaymentContainersProductModel, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new PaymentContainersProductModel();

                if (data.hasOwnProperty('object')) {
                    obj['object'] = _ApiClient2.default.convertToType(data['object'], 'String');
                }
                if (data.hasOwnProperty('id')) {
                    obj['id'] = _ApiClient2.default.convertToType(data['id'], 'String');
                }
                if (data.hasOwnProperty('contract')) {
                    obj['contract'] = _PaymentContractsProductModel2.default.constructFromObject(data['contract']);
                }
                if (data.hasOwnProperty('customer')) {
                    obj['customer'] = _PaymentCustomersProductModel2.default.constructFromObject(data['customer']);
                }
                if (data.hasOwnProperty('assign')) {
                    obj['assign'] = _ProductInstanceUID2.default.constructFromObject(data['assign']);
                }
                if (data.hasOwnProperty('type')) {
                    obj['type'] = _ApiClient2.default.convertToType(data['type'], 'String');
                }
                if (data.hasOwnProperty('public')) {
                    obj['public'] = _BankAccountDescriptor2.default.constructFromObject(data['public']);
                }
                if (data.hasOwnProperty('private')) {
                    obj['private'] = _BankAccountDescriptor2.default.constructFromObject(data['private']);
                }
                if (data.hasOwnProperty('created')) {
                    obj['created'] = _ApiClient2.default.convertToType(data['created'], 'Date');
                }
                if (data.hasOwnProperty('updated')) {
                    obj['updated'] = _ApiClient2.default.convertToType(data['updated'], 'Date');
                }
                if (data.hasOwnProperty('mandate')) {
                    obj['mandate'] = _PaymentContainerMandate2.default.constructFromObject(data['mandate']);
                }
            }
            return obj;
        }

        /**
        * Object of payment container
        * @member {String} object
        */

        /**
        * Id of payment container
        * @member {String} id
        */

        /**
        * Payment container contract
        * @member {module:model/PaymentContractsProductModel} contract
        */

        /**
        * Payment container customer
        * @member {module:model/PaymentCustomersProductModel} customer
        */

        /**
        * Assign to
        * @member {module:model/ProductInstanceUID} assign
        */

        /**
        * Type of payment container
        * @member {String} type
        */

        /**
        * Public payment instrument data
        * @member {module:model/BankAccountDescriptor} public
        */

        /**
        * Private payment instrument data
        * @member {module:model/BankAccountDescriptor} private
        */

        /**
        * Creation date
        * @member {Date} created
        */

        /**
        * Last update date
        * @member {Date} updated
        */

        /**
        * Payment container mandate
        * @member {module:model/PaymentContainerMandate} mandate
        */

    }]);

    return PaymentContainersProductModel;
}();

exports.default = PaymentContainersProductModel;
},{"../ApiClient":21,"./BankAccountDescriptor":53,"./PaymentContainerMandate":114,"./PaymentContractsProductModel":125,"./PaymentCustomersProductModel":129,"./ProductInstanceUID":145}],120:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The PaymentContractsDTO model module.
* @module model/PaymentContractsDTO
*/
PaymentContractsDTO = function () {
    /**
    * Constructs a new <code>PaymentContractsDTO</code>.
    * @alias module:model/PaymentContractsDTO
    * @class
    */

    function PaymentContractsDTO() {
        _classCallCheck(this, PaymentContractsDTO);

        this.merchant = undefined;
        this.internal_reference = undefined;
        this.contract_id = undefined;
        this.demo = undefined;
        this.debit_product_id = undefined;
        this.prepay_product_id = undefined;
        this.invoice_product_id = undefined;
        this.creditcard_product_id = undefined;
        this.url_push = undefined;
        this.allow_transactions = undefined;
        this.allow_cloning = undefined;
        this.unique_order_id = undefined;
        this.scoring = undefined;
        this.sepa_mandate_inform = undefined;
    }

    /**
    * Constructs a <code>PaymentContractsDTO</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/PaymentContractsDTO} obj Optional instance to populate.
    * @return {module:model/PaymentContractsDTO} The populated <code>PaymentContractsDTO</code> instance.
    */


    _createClass(PaymentContractsDTO, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new PaymentContractsDTO();

                if (data.hasOwnProperty('merchant')) {
                    obj['merchant'] = _ApiClient2.default.convertToType(data['merchant'], 'String');
                }
                if (data.hasOwnProperty('internal_reference')) {
                    obj['internal_reference'] = _ApiClient2.default.convertToType(data['internal_reference'], 'String');
                }
                if (data.hasOwnProperty('contract_id')) {
                    obj['contract_id'] = _ApiClient2.default.convertToType(data['contract_id'], 'String');
                }
                if (data.hasOwnProperty('demo')) {
                    obj['demo'] = _ApiClient2.default.convertToType(data['demo'], 'String');
                }
                if (data.hasOwnProperty('debit_product_id')) {
                    obj['debit_product_id'] = _ApiClient2.default.convertToType(data['debit_product_id'], 'String');
                }
                if (data.hasOwnProperty('prepay_product_id')) {
                    obj['prepay_product_id'] = _ApiClient2.default.convertToType(data['prepay_product_id'], 'String');
                }
                if (data.hasOwnProperty('invoice_product_id')) {
                    obj['invoice_product_id'] = _ApiClient2.default.convertToType(data['invoice_product_id'], 'String');
                }
                if (data.hasOwnProperty('creditcard_product_id')) {
                    obj['creditcard_product_id'] = _ApiClient2.default.convertToType(data['creditcard_product_id'], 'String');
                }
                if (data.hasOwnProperty('url_push')) {
                    obj['url_push'] = _ApiClient2.default.convertToType(data['url_push'], 'String');
                }
                if (data.hasOwnProperty('allow_transactions')) {
                    obj['allow_transactions'] = _ApiClient2.default.convertToType(data['allow_transactions'], 'Boolean');
                }
                if (data.hasOwnProperty('allow_cloning')) {
                    obj['allow_cloning'] = _ApiClient2.default.convertToType(data['allow_cloning'], 'Boolean');
                }
                if (data.hasOwnProperty('unique_order_id')) {
                    obj['unique_order_id'] = _ApiClient2.default.convertToType(data['unique_order_id'], 'Boolean');
                }
                if (data.hasOwnProperty('scoring')) {
                    obj['scoring'] = _ApiClient2.default.convertToType(data['scoring'], 'Boolean');
                }
                if (data.hasOwnProperty('sepa_mandate_inform')) {
                    obj['sepa_mandate_inform'] = _ApiClient2.default.convertToType(data['sepa_mandate_inform'], 'String');
                }
            }
            return obj;
        }

        /**
        * Contracts Merchant
        * @member {String} merchant
        */

        /**
        * The internal user id
        * @member {String} internal_reference
        */

        /**
        * Contracts id
        * @member {String} contract_id
        */

        /**
        * Is this a demo contract
        * @member {String} demo
        */

        /**
        * Contract debit product id
        * @member {String} debit_product_id
        */

        /**
        * Contracts prepay product id
        * @member {String} prepay_product_id
        */

        /**
        * Contracts invoice product id
        * @member {String} invoice_product_id
        */

        /**
        * Contracts credit card product id
        * @member {String} creditcard_product_id
        */

        /**
        * An URL where your service listen for push notifications of the secuconnect service
        * @member {String} url_push
        */

        /**
        * Should allow transactions?
        * @member {Boolean} allow_transactions
        */

        /**
        * Should allow cloning?
        * @member {Boolean} allow_cloning
        */

        /**
        * Bool, default FALSE. If TRUE, an error message will be thrown if you try to create a new payment transaction with the same order_id of an previous transaction.
        * @member {Boolean} unique_order_id
        */

        /**
        * Bool, default TRUE. If FALSE, the customer scoring is disabled for your payment contract
        * @member {Boolean} scoring
        */

        /**
        * Enum [on_transaction, on_container, never], default “never” Option to send automatically an information to the customer when a new SEPA-mandate was created.
        * @member {String} sepa_mandate_inform
        */

    }]);

    return PaymentContractsDTO;
}();

exports.default = PaymentContractsDTO;
},{"../ApiClient":21}],121:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _PaymentInformation = require('./PaymentInformation');

var _PaymentInformation2 = _interopRequireDefault(_PaymentInformation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The PaymentContractsDTOClone model module.
* @module model/PaymentContractsDTOClone
*/
PaymentContractsDTOClone = function () {
    /**
    * Constructs a new <code>PaymentContractsDTOClone</code>.
    * @alias module:model/PaymentContractsDTOClone
    * @class
    */

    function PaymentContractsDTOClone() {
        _classCallCheck(this, PaymentContractsDTOClone);

        this.project = undefined;
        this.payment_data = undefined;
        this.payin_account = false;
        this.allow_transactions = undefined;
        this.url_push = undefined;
        this.debit_product_id = undefined;
        this.prepay_product_id = undefined;
        this.invoice_product_id = undefined;
        this.creditcard_product_id = undefined;
    }

    /**
    * Constructs a <code>PaymentContractsDTOClone</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/PaymentContractsDTOClone} obj Optional instance to populate.
    * @return {module:model/PaymentContractsDTOClone} The populated <code>PaymentContractsDTOClone</code> instance.
    */


    _createClass(PaymentContractsDTOClone, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new PaymentContractsDTOClone();

                if (data.hasOwnProperty('project')) {
                    obj['project'] = _ApiClient2.default.convertToType(data['project'], 'String');
                }
                if (data.hasOwnProperty('payment_data')) {
                    obj['payment_data'] = _PaymentInformation2.default.constructFromObject(data['payment_data']);
                }
                if (data.hasOwnProperty('payin_account')) {
                    obj['payin_account'] = _ApiClient2.default.convertToType(data['payin_account'], 'Boolean');
                }
                if (data.hasOwnProperty('allow_transactions')) {
                    obj['allow_transactions'] = _ApiClient2.default.convertToType(data['allow_transactions'], 'Boolean');
                }
                if (data.hasOwnProperty('url_push')) {
                    obj['url_push'] = _ApiClient2.default.convertToType(data['url_push'], 'String');
                }
                if (data.hasOwnProperty('debit_product_id')) {
                    obj['debit_product_id'] = _ApiClient2.default.convertToType(data['debit_product_id'], 'String');
                }
                if (data.hasOwnProperty('prepay_product_id')) {
                    obj['prepay_product_id'] = _ApiClient2.default.convertToType(data['prepay_product_id'], 'String');
                }
                if (data.hasOwnProperty('invoice_product_id')) {
                    obj['invoice_product_id'] = _ApiClient2.default.convertToType(data['invoice_product_id'], 'String');
                }
                if (data.hasOwnProperty('creditcard_product_id')) {
                    obj['creditcard_product_id'] = _ApiClient2.default.convertToType(data['creditcard_product_id'], 'String');
                }
            }
            return obj;
        }

        /**
        * Name of the project (must be unique)
        * @member {String} project
        */

        /**
        * Merchants bank account for the payout
        * @member {module:model/PaymentInformation} payment_data
        */

        /**
        * Pay in account
        * @member {Boolean} payin_account
        * @default false
        */

        /**
        * DEPRECATED: Should allow transactions for this sub-contract?
        * @member {Boolean} allow_transactions
        */

        /**
        * The default URL where your service listen for push notifications of the secuconnect service
        * @member {String} url_push
        */

        /**
        * DEPRECATED: Contract debit product id
        * @member {String} debit_product_id
        */

        /**
        * DEPRECATED: Contracts prepay product id
        * @member {String} prepay_product_id
        */

        /**
        * DEPRECATED: Contracts invoice product id
        * @member {String} invoice_product_id
        */

        /**
        * DEPRECATED: Contracts credit card product id
        * @member {String} creditcard_product_id
        */

    }]);

    return PaymentContractsDTOClone;
}();

exports.default = PaymentContractsDTOClone;
},{"../ApiClient":21,"./PaymentInformation":130}],122:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The PaymentContractsDTOIFrameOpts model module.
* @module model/PaymentContractsDTOIFrameOpts
*/
PaymentContractsDTOIFrameOpts = function () {
    /**
    * Constructs a new <code>PaymentContractsDTOIFrameOpts</code>.
    * @alias module:model/PaymentContractsDTOIFrameOpts
    * @class
    */

    function PaymentContractsDTOIFrameOpts() {
        _classCallCheck(this, PaymentContractsDTOIFrameOpts);

        this.show_basket = undefined;
        this.basket_title = undefined;
        this.submit_button_title = undefined;
        this.logo_base64 = undefined;
        this.cession = 'personal';
    }

    /**
    * Constructs a <code>PaymentContractsDTOIFrameOpts</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/PaymentContractsDTOIFrameOpts} obj Optional instance to populate.
    * @return {module:model/PaymentContractsDTOIFrameOpts} The populated <code>PaymentContractsDTOIFrameOpts</code> instance.
    */


    _createClass(PaymentContractsDTOIFrameOpts, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new PaymentContractsDTOIFrameOpts();

                if (data.hasOwnProperty('show_basket')) {
                    obj['show_basket'] = _ApiClient2.default.convertToType(data['show_basket'], 'Boolean');
                }
                if (data.hasOwnProperty('basket_title')) {
                    obj['basket_title'] = _ApiClient2.default.convertToType(data['basket_title'], 'String');
                }
                if (data.hasOwnProperty('submit_button_title')) {
                    obj['submit_button_title'] = _ApiClient2.default.convertToType(data['submit_button_title'], 'String');
                }
                if (data.hasOwnProperty('logo_base64')) {
                    obj['logo_base64'] = _ApiClient2.default.convertToType(data['logo_base64'], 'String');
                }
                if (data.hasOwnProperty('cession')) {
                    obj['cession'] = _ApiClient2.default.convertToType(data['cession'], 'String');
                }
            }
            return obj;
        }

        /**
        * Display the basket items to the customer during the checkout
        * @member {Boolean} show_basket
        */

        /**
        * Default headline of the checkout page
        * @member {String} basket_title
        */

        /**
        * Default naming of the Submit-Button
        * @member {String} submit_button_title
        */

        /**
        * Logo base64-enconded
        * @member {String} logo_base64
        */

        /**
        * Cession ('formal', 'personal')
        * @member {String} cession
        * @default 'personal'
        */

    }]);

    return PaymentContractsDTOIFrameOpts;
}();

exports.default = PaymentContractsDTOIFrameOpts;
},{"../ApiClient":21}],123:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _Contact = require('./Contact');

var _Contact2 = _interopRequireDefault(_Contact);

var _PaymentContractsDTOIFrameOpts = require('./PaymentContractsDTOIFrameOpts');

var _PaymentContractsDTOIFrameOpts2 = _interopRequireDefault(_PaymentContractsDTOIFrameOpts);

var _PaymentInformation = require('./PaymentInformation');

var _PaymentInformation2 = _interopRequireDefault(_PaymentInformation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The PaymentContractsDTORequestId model module.
* @module model/PaymentContractsDTORequestId
*/
PaymentContractsDTORequestId = function () {
    /**
    * Constructs a new <code>PaymentContractsDTORequestId</code>.
    * @alias module:model/PaymentContractsDTORequestId
    * @class
    */

    function PaymentContractsDTORequestId() {
        _classCallCheck(this, PaymentContractsDTORequestId);

        this.contact = undefined;
        this.project = undefined;
        this.payout_account = undefined;
        this.iframe_opts = undefined;
        this.payin_account = false;
    }

    /**
    * Constructs a <code>PaymentContractsDTORequestId</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/PaymentContractsDTORequestId} obj Optional instance to populate.
    * @return {module:model/PaymentContractsDTORequestId} The populated <code>PaymentContractsDTORequestId</code> instance.
    */


    _createClass(PaymentContractsDTORequestId, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new PaymentContractsDTORequestId();

                if (data.hasOwnProperty('contact')) {
                    obj['contact'] = _Contact2.default.constructFromObject(data['contact']);
                }
                if (data.hasOwnProperty('project')) {
                    obj['project'] = _ApiClient2.default.convertToType(data['project'], 'String');
                }
                if (data.hasOwnProperty('payout_account')) {
                    obj['payout_account'] = _PaymentInformation2.default.constructFromObject(data['payout_account']);
                }
                if (data.hasOwnProperty('iframe_opts')) {
                    obj['iframe_opts'] = _PaymentContractsDTOIFrameOpts2.default.constructFromObject(data['iframe_opts']);
                }
                if (data.hasOwnProperty('payin_account')) {
                    obj['payin_account'] = _ApiClient2.default.convertToType(data['payin_account'], 'Boolean');
                }
            }
            return obj;
        }

        /**
        * Contact
        * @member {module:model/Contact} contact
        */

        /**
        * Name of the project (must be unique)
        * @member {String} project
        */

        /**
        * Merchants bank account for the payout
        * @member {module:model/PaymentInformation} payout_account
        */

        /**
        * IFrame opts
        * @member {module:model/PaymentContractsDTOIFrameOpts} iframe_opts
        */

        /**
        * Pay in account
        * @member {Boolean} payin_account
        * @default false
        */

    }]);

    return PaymentContractsDTORequestId;
}();

exports.default = PaymentContractsDTORequestId;
},{"../ApiClient":21,"./Contact":54,"./PaymentContractsDTOIFrameOpts":122,"./PaymentInformation":130}],124:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _PaymentContractsProductModel = require('./PaymentContractsProductModel');

var _PaymentContractsProductModel2 = _interopRequireDefault(_PaymentContractsProductModel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The PaymentContractsList model module.
* @module model/PaymentContractsList
*/
PaymentContractsList = function () {
    /**
    * Constructs a new <code>PaymentContractsList</code>.
    * @alias module:model/PaymentContractsList
    * @class
    */

    function PaymentContractsList() {
        _classCallCheck(this, PaymentContractsList);

        this.count = undefined;
        this.data = undefined;
    }

    /**
    * Constructs a <code>PaymentContractsList</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/PaymentContractsList} obj Optional instance to populate.
    * @return {module:model/PaymentContractsList} The populated <code>PaymentContractsList</code> instance.
    */


    _createClass(PaymentContractsList, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new PaymentContractsList();

                if (data.hasOwnProperty('count')) {
                    obj['count'] = _ApiClient2.default.convertToType(data['count'], 'Number');
                }
                if (data.hasOwnProperty('data')) {
                    obj['data'] = _ApiClient2.default.convertToType(data['data'], [_PaymentContractsProductModel2.default]);
                }
            }
            return obj;
        }

        /**
        * Number of existing payment contracts
        * @member {Number} count
        */

        /**
        * GET Payment/Contracts
        * @member {Array.<module:model/PaymentContractsProductModel>} data
        */

    }]);

    return PaymentContractsList;
}();

exports.default = PaymentContractsList;
},{"../ApiClient":21,"./PaymentContractsProductModel":125}],125:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _ProductInstanceUID = require('./ProductInstanceUID');

var _ProductInstanceUID2 = _interopRequireDefault(_ProductInstanceUID);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The PaymentContractsProductModel model module.
* @module model/PaymentContractsProductModel
*/
PaymentContractsProductModel = function () {
    /**
    * Constructs a new <code>PaymentContractsProductModel</code>.
    * @alias module:model/PaymentContractsProductModel
    * @class
    */

    function PaymentContractsProductModel() {
        _classCallCheck(this, PaymentContractsProductModel);

        this.object = undefined;
        this.id = undefined;
        this.parent = undefined;
        this.demo = undefined;
        this.allow_cloning = undefined;
        this.sepa_mandate_inform = 'never';
        this.created = undefined;
        this.updated = undefined;
    }

    /**
    * Constructs a <code>PaymentContractsProductModel</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/PaymentContractsProductModel} obj Optional instance to populate.
    * @return {module:model/PaymentContractsProductModel} The populated <code>PaymentContractsProductModel</code> instance.
    */


    _createClass(PaymentContractsProductModel, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new PaymentContractsProductModel();

                if (data.hasOwnProperty('object')) {
                    obj['object'] = _ApiClient2.default.convertToType(data['object'], 'String');
                }
                if (data.hasOwnProperty('id')) {
                    obj['id'] = _ApiClient2.default.convertToType(data['id'], 'String');
                }
                if (data.hasOwnProperty('parent')) {
                    obj['parent'] = _ProductInstanceUID2.default.constructFromObject(data['parent']);
                }
                if (data.hasOwnProperty('demo')) {
                    obj['demo'] = _ApiClient2.default.convertToType(data['demo'], 'Boolean');
                }
                if (data.hasOwnProperty('allow_cloning')) {
                    obj['allow_cloning'] = _ApiClient2.default.convertToType(data['allow_cloning'], 'Boolean');
                }
                if (data.hasOwnProperty('sepa_mandate_inform')) {
                    obj['sepa_mandate_inform'] = _ApiClient2.default.convertToType(data['sepa_mandate_inform'], 'String');
                }
                if (data.hasOwnProperty('created')) {
                    obj['created'] = _ApiClient2.default.convertToType(data['created'], 'Date');
                }
                if (data.hasOwnProperty('updated')) {
                    obj['updated'] = _ApiClient2.default.convertToType(data['updated'], 'Date');
                }
            }
            return obj;
        }

        /**
        * Object of payment contract
        * @member {String} object
        */

        /**
        * Id of payment contract
        * @member {String} id
        */

        /**
        * Payment contract
        * @member {module:model/ProductInstanceUID} parent
        */

        /**
        * Is this a demo contract
        * @member {Boolean} demo
        */

        /**
        * Allow to create sub-contracts
        * @member {Boolean} allow_cloning
        */

        /**
        * Inform the customer about the created sepa mandate
        * @member {String} sepa_mandate_inform
        * @default 'never'
        */

        /**
        * Created at date
        * @member {Date} created
        */

        /**
        * Updated at date
        * @member {Date} updated
        */

    }]);

    return PaymentContractsProductModel;
}();

exports.default = PaymentContractsProductModel;
},{"../ApiClient":21,"./ProductInstanceUID":145}],126:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _PaymentContractsProductModel = require('./PaymentContractsProductModel');

var _PaymentContractsProductModel2 = _interopRequireDefault(_PaymentContractsProductModel);

var _PaymentInformation = require('./PaymentInformation');

var _PaymentInformation2 = _interopRequireDefault(_PaymentInformation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The PaymentContractsRequestIdResult model module.
* @module model/PaymentContractsRequestIdResult
*/
PaymentContractsRequestIdResult = function () {
    /**
    * Constructs a new <code>PaymentContractsRequestIdResult</code>.
    * @alias module:model/PaymentContractsRequestIdResult
    * @class
    */

    function PaymentContractsRequestIdResult() {
        _classCallCheck(this, PaymentContractsRequestIdResult);

        this.contract = undefined;
        this.apikey = undefined;
        this.payin_account = undefined;
    }

    /**
    * Constructs a <code>PaymentContractsRequestIdResult</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/PaymentContractsRequestIdResult} obj Optional instance to populate.
    * @return {module:model/PaymentContractsRequestIdResult} The populated <code>PaymentContractsRequestIdResult</code> instance.
    */


    _createClass(PaymentContractsRequestIdResult, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new PaymentContractsRequestIdResult();

                if (data.hasOwnProperty('contract')) {
                    obj['contract'] = _PaymentContractsProductModel2.default.constructFromObject(data['contract']);
                }
                if (data.hasOwnProperty('apikey')) {
                    obj['apikey'] = _ApiClient2.default.convertToType(data['apikey'], 'String');
                }
                if (data.hasOwnProperty('payin_account')) {
                    obj['payin_account'] = _PaymentInformation2.default.constructFromObject(data['payin_account']);
                }
            }
            return obj;
        }

        /**
        * The payment contract object
        * @member {module:model/PaymentContractsProductModel} contract
        */

        /**
        * Returns the apikey of the created merchant
        * @member {String} apikey
        */

        /**
        * The bank account you can use for pay in.
        * @member {module:model/PaymentInformation} payin_account
        */

    }]);

    return PaymentContractsRequestIdResult;
}();

exports.default = PaymentContractsRequestIdResult;
},{"../ApiClient":21,"./PaymentContractsProductModel":125,"./PaymentInformation":130}],127:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _Contact = require('./Contact');

var _Contact2 = _interopRequireDefault(_Contact);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The PaymentCustomersDTO model module.
* @module model/PaymentCustomersDTO
*/
PaymentCustomersDTO = function () {
    /**
    * Constructs a new <code>PaymentCustomersDTO</code>.
    * @alias module:model/PaymentCustomersDTO
    * @class
    */

    function PaymentCustomersDTO() {
        _classCallCheck(this, PaymentCustomersDTO);

        this.contact = undefined;
    }

    /**
    * Constructs a <code>PaymentCustomersDTO</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/PaymentCustomersDTO} obj Optional instance to populate.
    * @return {module:model/PaymentCustomersDTO} The populated <code>PaymentCustomersDTO</code> instance.
    */


    _createClass(PaymentCustomersDTO, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new PaymentCustomersDTO();

                if (data.hasOwnProperty('contact')) {
                    obj['contact'] = _Contact2.default.constructFromObject(data['contact']);
                }
            }
            return obj;
        }

        /**
        * PaymentCustomersDTO
        * @member {module:model/Contact} contact
        */

    }]);

    return PaymentCustomersDTO;
}();

exports.default = PaymentCustomersDTO;
},{"../ApiClient":21,"./Contact":54}],128:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _PaymentCustomersProductModel = require('./PaymentCustomersProductModel');

var _PaymentCustomersProductModel2 = _interopRequireDefault(_PaymentCustomersProductModel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The PaymentCustomersList model module.
* @module model/PaymentCustomersList
*/
PaymentCustomersList = function () {
    /**
    * Constructs a new <code>PaymentCustomersList</code>.
    * @alias module:model/PaymentCustomersList
    * @class
    */

    function PaymentCustomersList() {
        _classCallCheck(this, PaymentCustomersList);

        this.count = undefined;
        this.data = undefined;
    }

    /**
    * Constructs a <code>PaymentCustomersList</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/PaymentCustomersList} obj Optional instance to populate.
    * @return {module:model/PaymentCustomersList} The populated <code>PaymentCustomersList</code> instance.
    */


    _createClass(PaymentCustomersList, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new PaymentCustomersList();

                if (data.hasOwnProperty('count')) {
                    obj['count'] = _ApiClient2.default.convertToType(data['count'], 'Number');
                }
                if (data.hasOwnProperty('data')) {
                    obj['data'] = _ApiClient2.default.convertToType(data['data'], [_PaymentCustomersProductModel2.default]);
                }
            }
            return obj;
        }

        /**
        * Number of existing payment customers
        * @member {Number} count
        */

        /**
        * GET Payment/Customers
        * @member {Array.<module:model/PaymentCustomersProductModel>} data
        */

    }]);

    return PaymentCustomersList;
}();

exports.default = PaymentCustomersList;
},{"../ApiClient":21,"./PaymentCustomersProductModel":129}],129:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _Contact = require('./Contact');

var _Contact2 = _interopRequireDefault(_Contact);

var _ProductInstanceUID = require('./ProductInstanceUID');

var _ProductInstanceUID2 = _interopRequireDefault(_ProductInstanceUID);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The PaymentCustomersProductModel model module.
* @module model/PaymentCustomersProductModel
*/
PaymentCustomersProductModel = function () {
    /**
    * Constructs a new <code>PaymentCustomersProductModel</code>.
    * @alias module:model/PaymentCustomersProductModel
    * @class
    */

    function PaymentCustomersProductModel() {
        _classCallCheck(this, PaymentCustomersProductModel);

        this.object = undefined;
        this.id = undefined;
        this.contract = undefined;
        this.contact = undefined;
        this.created = undefined;
        this.updated = undefined;
    }

    /**
    * Constructs a <code>PaymentCustomersProductModel</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/PaymentCustomersProductModel} obj Optional instance to populate.
    * @return {module:model/PaymentCustomersProductModel} The populated <code>PaymentCustomersProductModel</code> instance.
    */


    _createClass(PaymentCustomersProductModel, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new PaymentCustomersProductModel();

                if (data.hasOwnProperty('object')) {
                    obj['object'] = _ApiClient2.default.convertToType(data['object'], 'String');
                }
                if (data.hasOwnProperty('id')) {
                    obj['id'] = _ApiClient2.default.convertToType(data['id'], 'String');
                }
                if (data.hasOwnProperty('contract')) {
                    obj['contract'] = _ProductInstanceUID2.default.constructFromObject(data['contract']);
                }
                if (data.hasOwnProperty('contact')) {
                    obj['contact'] = _Contact2.default.constructFromObject(data['contact']);
                }
                if (data.hasOwnProperty('created')) {
                    obj['created'] = _ApiClient2.default.convertToType(data['created'], 'Date');
                }
                if (data.hasOwnProperty('updated')) {
                    obj['updated'] = _ApiClient2.default.convertToType(data['updated'], 'Date');
                }
            }
            return obj;
        }

        /**
        * Object of payment customer
        * @member {String} object
        */

        /**
        * Id of payment customer
        * @member {String} id
        */

        /**
        * Payment contract
        * @member {module:model/ProductInstanceUID} contract
        */

        /**
        * Customer contact info
        * @member {module:model/Contact} contact
        */

        /**
        * Created at date
        * @member {Date} created
        */

        /**
        * Updated at date
        * @member {Date} updated
        */

    }]);

    return PaymentCustomersProductModel;
}();

exports.default = PaymentCustomersProductModel;
},{"../ApiClient":21,"./Contact":54,"./ProductInstanceUID":145}],130:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The PaymentInformation model module.
* @module model/PaymentInformation
*/
PaymentInformation = function () {
    /**
    * Constructs a new <code>PaymentInformation</code>.
    * Payment information
    * @alias module:model/PaymentInformation
    * @class
    */

    function PaymentInformation() {
        _classCallCheck(this, PaymentInformation);

        this.owner = undefined;
        this.iban = undefined;
        this.bic = undefined;
    }

    /**
    * Constructs a <code>PaymentInformation</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/PaymentInformation} obj Optional instance to populate.
    * @return {module:model/PaymentInformation} The populated <code>PaymentInformation</code> instance.
    */


    _createClass(PaymentInformation, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new PaymentInformation();

                if (data.hasOwnProperty('owner')) {
                    obj['owner'] = _ApiClient2.default.convertToType(data['owner'], 'String');
                }
                if (data.hasOwnProperty('iban')) {
                    obj['iban'] = _ApiClient2.default.convertToType(data['iban'], 'String');
                }
                if (data.hasOwnProperty('bic')) {
                    obj['bic'] = _ApiClient2.default.convertToType(data['bic'], 'String');
                }
            }
            return obj;
        }

        /**
        * Owner
        * @member {String} owner
        */

        /**
        * IBAN
        * @member {String} iban
        */

        /**
        * BIC
        * @member {String} bic
        */

    }]);

    return PaymentInformation;
}();

exports.default = PaymentInformation;
},{"../ApiClient":21}],131:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _PaymentTransactionsProductModel = require('./PaymentTransactionsProductModel');

var _PaymentTransactionsProductModel2 = _interopRequireDefault(_PaymentTransactionsProductModel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The PaymentTransactionsCancelList model module.
* @module model/PaymentTransactionsCancelList
*/
PaymentTransactionsCancelList = function () {
    /**
    * Constructs a new <code>PaymentTransactionsCancelList</code>.
    * @alias module:model/PaymentTransactionsCancelList
    * @class
    */

    function PaymentTransactionsCancelList() {
        _classCallCheck(this, PaymentTransactionsCancelList);

        this.count = undefined;
        this.data = undefined;
    }

    /**
    * Constructs a <code>PaymentTransactionsCancelList</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/PaymentTransactionsCancelList} obj Optional instance to populate.
    * @return {module:model/PaymentTransactionsCancelList} The populated <code>PaymentTransactionsCancelList</code> instance.
    */


    _createClass(PaymentTransactionsCancelList, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new PaymentTransactionsCancelList();

                if (data.hasOwnProperty('count')) {
                    obj['count'] = _ApiClient2.default.convertToType(data['count'], 'Number');
                }
                if (data.hasOwnProperty('data')) {
                    obj['data'] = _ApiClient2.default.convertToType(data['data'], [_PaymentTransactionsProductModel2.default]);
                }
            }
            return obj;
        }

        /**
        * Count of returned payment contracts
        * @member {Number} count
        */

        /**
        * POST Payment/Transactions/{paymentTransactionId}/cancel
        * @member {Array.<module:model/PaymentTransactionsProductModel>} data
        */

    }]);

    return PaymentTransactionsCancelList;
}();

exports.default = PaymentTransactionsCancelList;
},{"../ApiClient":21,"./PaymentTransactionsProductModel":133}],132:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _PaymentTransactionsProductModel = require('./PaymentTransactionsProductModel');

var _PaymentTransactionsProductModel2 = _interopRequireDefault(_PaymentTransactionsProductModel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The PaymentTransactionsList model module.
* @module model/PaymentTransactionsList
*/
PaymentTransactionsList = function () {
    /**
    * Constructs a new <code>PaymentTransactionsList</code>.
    * @alias module:model/PaymentTransactionsList
    * @class
    */

    function PaymentTransactionsList() {
        _classCallCheck(this, PaymentTransactionsList);

        this.count = undefined;
        this.data = undefined;
    }

    /**
    * Constructs a <code>PaymentTransactionsList</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/PaymentTransactionsList} obj Optional instance to populate.
    * @return {module:model/PaymentTransactionsList} The populated <code>PaymentTransactionsList</code> instance.
    */


    _createClass(PaymentTransactionsList, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new PaymentTransactionsList();

                if (data.hasOwnProperty('count')) {
                    obj['count'] = _ApiClient2.default.convertToType(data['count'], 'Number');
                }
                if (data.hasOwnProperty('data')) {
                    obj['data'] = _ApiClient2.default.convertToType(data['data'], [_PaymentTransactionsProductModel2.default]);
                }
            }
            return obj;
        }

        /**
        * Number of existing payment transactions
        * @member {Number} count
        */

        /**
        * GET Payment/Transactions
        * @member {Array.<module:model/PaymentTransactionsProductModel>} data
        */

    }]);

    return PaymentTransactionsList;
}();

exports.default = PaymentTransactionsList;
},{"../ApiClient":21,"./PaymentTransactionsProductModel":133}],133:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _PaymentTransactionsProductModelCustomer = require('./PaymentTransactionsProductModelCustomer');

var _PaymentTransactionsProductModelCustomer2 = _interopRequireDefault(_PaymentTransactionsProductModelCustomer);

var _PaymentTransactionsProductModelDetails = require('./PaymentTransactionsProductModelDetails');

var _PaymentTransactionsProductModelDetails2 = _interopRequireDefault(_PaymentTransactionsProductModelDetails);

var _PaymentTransactionsProductModelMerchant = require('./PaymentTransactionsProductModelMerchant');

var _PaymentTransactionsProductModelMerchant2 = _interopRequireDefault(_PaymentTransactionsProductModelMerchant);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The PaymentTransactionsProductModel model module.
* @module model/PaymentTransactionsProductModel
*/
PaymentTransactionsProductModel = function () {
    /**
    * Constructs a new <code>PaymentTransactionsProductModel</code>.
    * @alias module:model/PaymentTransactionsProductModel
    * @class
    */

    function PaymentTransactionsProductModel() {
        _classCallCheck(this, PaymentTransactionsProductModel);

        this.object = undefined;
        this.id = undefined;
        this.merchant = undefined;
        this.trans_id = undefined;
        this.product_id = undefined;
        this.product = undefined;
        this.product_raw = undefined;
        this.zahlungsmittel_id = undefined;
        this.contract_id = undefined;
        this.amount = undefined;
        this.currency = undefined;
        this.created = undefined;
        this.updated = undefined;
        this.status = undefined;
        this.status_text = undefined;
        this.details = undefined;
        this.customer = undefined;
    }

    /**
    * Constructs a <code>PaymentTransactionsProductModel</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/PaymentTransactionsProductModel} obj Optional instance to populate.
    * @return {module:model/PaymentTransactionsProductModel} The populated <code>PaymentTransactionsProductModel</code> instance.
    */


    _createClass(PaymentTransactionsProductModel, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new PaymentTransactionsProductModel();

                if (data.hasOwnProperty('object')) {
                    obj['object'] = _ApiClient2.default.convertToType(data['object'], 'String');
                }
                if (data.hasOwnProperty('id')) {
                    obj['id'] = _ApiClient2.default.convertToType(data['id'], 'String');
                }
                if (data.hasOwnProperty('merchant')) {
                    obj['merchant'] = _PaymentTransactionsProductModelMerchant2.default.constructFromObject(data['merchant']);
                }
                if (data.hasOwnProperty('trans_id')) {
                    obj['trans_id'] = _ApiClient2.default.convertToType(data['trans_id'], 'Number');
                }
                if (data.hasOwnProperty('product_id')) {
                    obj['product_id'] = _ApiClient2.default.convertToType(data['product_id'], 'Number');
                }
                if (data.hasOwnProperty('product')) {
                    obj['product'] = _ApiClient2.default.convertToType(data['product'], 'String');
                }
                if (data.hasOwnProperty('product_raw')) {
                    obj['product_raw'] = _ApiClient2.default.convertToType(data['product_raw'], 'String');
                }
                if (data.hasOwnProperty('zahlungsmittel_id')) {
                    obj['zahlungsmittel_id'] = _ApiClient2.default.convertToType(data['zahlungsmittel_id'], 'Number');
                }
                if (data.hasOwnProperty('contract_id')) {
                    obj['contract_id'] = _ApiClient2.default.convertToType(data['contract_id'], 'Number');
                }
                if (data.hasOwnProperty('amount')) {
                    obj['amount'] = _ApiClient2.default.convertToType(data['amount'], 'Number');
                }
                if (data.hasOwnProperty('currency')) {
                    obj['currency'] = _ApiClient2.default.convertToType(data['currency'], 'String');
                }
                if (data.hasOwnProperty('created')) {
                    obj['created'] = _ApiClient2.default.convertToType(data['created'], 'Date');
                }
                if (data.hasOwnProperty('updated')) {
                    obj['updated'] = _ApiClient2.default.convertToType(data['updated'], 'Date');
                }
                if (data.hasOwnProperty('status')) {
                    obj['status'] = _ApiClient2.default.convertToType(data['status'], 'Number');
                }
                if (data.hasOwnProperty('status_text')) {
                    obj['status_text'] = _ApiClient2.default.convertToType(data['status_text'], 'String');
                }
                if (data.hasOwnProperty('details')) {
                    obj['details'] = _PaymentTransactionsProductModelDetails2.default.constructFromObject(data['details']);
                }
                if (data.hasOwnProperty('customer')) {
                    obj['customer'] = _PaymentTransactionsProductModelCustomer2.default.constructFromObject(data['customer']);
                }
            }
            return obj;
        }

        /**
        * Object of payment transaction
        * @member {String} object
        */

        /**
        * Id of payment transaction
        * @member {String} id
        */

        /**
        * @member {module:model/PaymentTransactionsProductModelMerchant} merchant
        */

        /**
        * Transaction identifier
        * @member {Number} trans_id
        */

        /**
        * Product identifier
        * @member {Number} product_id
        */

        /**
        * Product type
        * @member {String} product
        */

        /**
        * the name of the payment product
        * @member {String} product_raw
        */

        /**
        * The internal id of the stored payment instrument.
        * @member {Number} zahlungsmittel_id
        */

        /**
        * Contract identifier
        * @member {Number} contract_id
        */

        /**
        * Total amount of payment in cents (or the smallest cash unit of the relevant currency)
        * @member {Number} amount
        */

        /**
        * ISO 4217 code of currency, eg EUR for Euro.
        * @member {String} currency
        */

        /**
        * Created at date
        * @member {Date} created
        */

        /**
        * Updated at date
        * @member {Date} updated
        */

        /**
        * WTF??
        * @member {Number} status
        */

        /**
        * Transaction status
        * @member {String} status_text
        */

        /**
        * @member {module:model/PaymentTransactionsProductModelDetails} details
        */

        /**
        * @member {module:model/PaymentTransactionsProductModelCustomer} customer
        */

    }]);

    return PaymentTransactionsProductModel;
}();

exports.default = PaymentTransactionsProductModel;
},{"../ApiClient":21,"./PaymentTransactionsProductModelCustomer":134,"./PaymentTransactionsProductModelDetails":135,"./PaymentTransactionsProductModelMerchant":136}],134:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The PaymentTransactionsProductModelCustomer model module.
* @module model/PaymentTransactionsProductModelCustomer
*/
PaymentTransactionsProductModelCustomer = function () {
    /**
    * Constructs a new <code>PaymentTransactionsProductModelCustomer</code>.
    * PaymentTransactionsProductModel
    * @alias module:model/PaymentTransactionsProductModelCustomer
    * @class
    */

    function PaymentTransactionsProductModelCustomer() {
        _classCallCheck(this, PaymentTransactionsProductModelCustomer);

        this.object = undefined;
        this.id = undefined;
        this.companyname = undefined;
        this.salutation = undefined;
        this.title = undefined;
        this.forename = undefined;
        this.surname = undefined;
    }

    /**
    * Constructs a <code>PaymentTransactionsProductModelCustomer</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/PaymentTransactionsProductModelCustomer} obj Optional instance to populate.
    * @return {module:model/PaymentTransactionsProductModelCustomer} The populated <code>PaymentTransactionsProductModelCustomer</code> instance.
    */


    _createClass(PaymentTransactionsProductModelCustomer, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new PaymentTransactionsProductModelCustomer();

                if (data.hasOwnProperty('object')) {
                    obj['object'] = _ApiClient2.default.convertToType(data['object'], 'String');
                }
                if (data.hasOwnProperty('id')) {
                    obj['id'] = _ApiClient2.default.convertToType(data['id'], 'String');
                }
                if (data.hasOwnProperty('companyname')) {
                    obj['companyname'] = _ApiClient2.default.convertToType(data['companyname'], 'String');
                }
                if (data.hasOwnProperty('salutation')) {
                    obj['salutation'] = _ApiClient2.default.convertToType(data['salutation'], 'String');
                }
                if (data.hasOwnProperty('title')) {
                    obj['title'] = _ApiClient2.default.convertToType(data['title'], 'String');
                }
                if (data.hasOwnProperty('forename')) {
                    obj['forename'] = _ApiClient2.default.convertToType(data['forename'], 'String');
                }
                if (data.hasOwnProperty('surname')) {
                    obj['surname'] = _ApiClient2.default.convertToType(data['surname'], 'String');
                }
            }
            return obj;
        }

        /**
        * Customer type name
        * @member {String} object
        */

        /**
        * Id of customer
        * @member {String} id
        */

        /**
        * Customer company name
        * @member {String} companyname
        */

        /**
        * Customer salutation
        * @member {String} salutation
        */

        /**
        * Customer title
        * @member {String} title
        */

        /**
        * Customer forename
        * @member {String} forename
        */

        /**
        * Customer surname
        * @member {String} surname
        */

    }]);

    return PaymentTransactionsProductModelCustomer;
}();

exports.default = PaymentTransactionsProductModelCustomer;
},{"../ApiClient":21}],135:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The PaymentTransactionsProductModelDetails model module.
* @module model/PaymentTransactionsProductModelDetails
*/
PaymentTransactionsProductModelDetails = function () {
    /**
    * Constructs a new <code>PaymentTransactionsProductModelDetails</code>.
    * Transaction details
    * @alias module:model/PaymentTransactionsProductModelDetails
    * @class
    */

    function PaymentTransactionsProductModelDetails() {
        _classCallCheck(this, PaymentTransactionsProductModelDetails);

        this.amount = undefined;
        this.cleared = undefined;
        this.status = undefined;
        this.status_text = undefined;
        this.status_simple = undefined;
        this.status_text_simple = undefined;
        this.description = undefined;
        this.description_raw = undefined;
    }

    /**
    * Constructs a <code>PaymentTransactionsProductModelDetails</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/PaymentTransactionsProductModelDetails} obj Optional instance to populate.
    * @return {module:model/PaymentTransactionsProductModelDetails} The populated <code>PaymentTransactionsProductModelDetails</code> instance.
    */


    _createClass(PaymentTransactionsProductModelDetails, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new PaymentTransactionsProductModelDetails();

                if (data.hasOwnProperty('amount')) {
                    obj['amount'] = _ApiClient2.default.convertToType(data['amount'], 'Number');
                }
                if (data.hasOwnProperty('cleared')) {
                    obj['cleared'] = _ApiClient2.default.convertToType(data['cleared'], 'String');
                }
                if (data.hasOwnProperty('status')) {
                    obj['status'] = _ApiClient2.default.convertToType(data['status'], 'Number');
                }
                if (data.hasOwnProperty('status_text')) {
                    obj['status_text'] = _ApiClient2.default.convertToType(data['status_text'], 'String');
                }
                if (data.hasOwnProperty('status_simple')) {
                    obj['status_simple'] = _ApiClient2.default.convertToType(data['status_simple'], 'Number');
                }
                if (data.hasOwnProperty('status_text_simple')) {
                    obj['status_text_simple'] = _ApiClient2.default.convertToType(data['status_text_simple'], 'String');
                }
                if (data.hasOwnProperty('description')) {
                    obj['description'] = _ApiClient2.default.convertToType(data['description'], 'String');
                }
                if (data.hasOwnProperty('description_raw')) {
                    obj['description_raw'] = _ApiClient2.default.convertToType(data['description_raw'], 'String');
                }
            }
            return obj;
        }

        /**
        * Total amount of payment in cents (or the smallest cash unit of the relevant currency)
        * @member {Number} amount
        */

        /**
        * Clearing status
        * @member {String} cleared
        */

        /**
        * Transaction status ID
        * @member {Number} status
        */

        /**
        * Transaction status description
        * @member {String} status_text
        */

        /**
        * Transaction simple-status ID
        * @member {Number} status_simple
        */

        /**
        * Transaction simple-status description
        * @member {String} status_text_simple
        */

        /**
        * Transaction description
        * @member {String} description
        */

        /**
        * Transaction description (plain text)
        * @member {String} description_raw
        */

    }]);

    return PaymentTransactionsProductModelDetails;
}();

exports.default = PaymentTransactionsProductModelDetails;
},{"../ApiClient":21}],136:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The PaymentTransactionsProductModelMerchant model module.
* @module model/PaymentTransactionsProductModelMerchant
*/
PaymentTransactionsProductModelMerchant = function () {
    /**
    * Constructs a new <code>PaymentTransactionsProductModelMerchant</code>.
    * Merchant information
    * @alias module:model/PaymentTransactionsProductModelMerchant
    * @class
    */

    function PaymentTransactionsProductModelMerchant() {
        _classCallCheck(this, PaymentTransactionsProductModelMerchant);

        this.object = undefined;
        this.id = undefined;
        this.type = undefined;
    }

    /**
    * Constructs a <code>PaymentTransactionsProductModelMerchant</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/PaymentTransactionsProductModelMerchant} obj Optional instance to populate.
    * @return {module:model/PaymentTransactionsProductModelMerchant} The populated <code>PaymentTransactionsProductModelMerchant</code> instance.
    */


    _createClass(PaymentTransactionsProductModelMerchant, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new PaymentTransactionsProductModelMerchant();

                if (data.hasOwnProperty('object')) {
                    obj['object'] = _ApiClient2.default.convertToType(data['object'], 'String');
                }
                if (data.hasOwnProperty('id')) {
                    obj['id'] = _ApiClient2.default.convertToType(data['id'], 'String');
                }
                if (data.hasOwnProperty('type')) {
                    obj['type'] = _ApiClient2.default.convertToType(data['type'], 'String');
                }
            }
            return obj;
        }

        /**
        * Type of product
        * @member {String} object
        */

        /**
        * Identifier of product
        * @member {String} id
        */

        /**
        * Type of merchant
        * @member {String} type
        */

    }]);

    return PaymentTransactionsProductModelMerchant;
}();

exports.default = PaymentTransactionsProductModelMerchant;
},{"../ApiClient":21}],137:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The PaymentTransactionsShippingUrl model module.
* @module model/PaymentTransactionsShippingUrl
*/
PaymentTransactionsShippingUrl = function () {
    /**
    * Constructs a new <code>PaymentTransactionsShippingUrl</code>.
    * @alias module:model/PaymentTransactionsShippingUrl
    * @class
    */

    function PaymentTransactionsShippingUrl() {
        _classCallCheck(this, PaymentTransactionsShippingUrl);

        this.url = undefined;
    }

    /**
    * Constructs a <code>PaymentTransactionsShippingUrl</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/PaymentTransactionsShippingUrl} obj Optional instance to populate.
    * @return {module:model/PaymentTransactionsShippingUrl} The populated <code>PaymentTransactionsShippingUrl</code> instance.
    */


    _createClass(PaymentTransactionsShippingUrl, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new PaymentTransactionsShippingUrl();

                if (data.hasOwnProperty('url')) {
                    obj['url'] = _ApiClient2.default.convertToType(data['url'], 'String');
                }
            }
            return obj;
        }

        /**
        * The url of the shipping information form
        * @member {String} url
        */

    }]);

    return PaymentTransactionsShippingUrl;
}();

exports.default = PaymentTransactionsShippingUrl;
},{"../ApiClient":21}],138:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _PrepaidItemsProductModel = require('./PrepaidItemsProductModel');

var _PrepaidItemsProductModel2 = _interopRequireDefault(_PrepaidItemsProductModel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The PrepaidItemsList model module.
* @module model/PrepaidItemsList
*/
PrepaidItemsList = function () {
    /**
    * Constructs a new <code>PrepaidItemsList</code>.
    * @alias module:model/PrepaidItemsList
    * @class
    */

    function PrepaidItemsList() {
        _classCallCheck(this, PrepaidItemsList);

        this.count = undefined;
        this.data = undefined;
    }

    /**
    * Constructs a <code>PrepaidItemsList</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/PrepaidItemsList} obj Optional instance to populate.
    * @return {module:model/PrepaidItemsList} The populated <code>PrepaidItemsList</code> instance.
    */


    _createClass(PrepaidItemsList, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new PrepaidItemsList();

                if (data.hasOwnProperty('count')) {
                    obj['count'] = _ApiClient2.default.convertToType(data['count'], 'Number');
                }
                if (data.hasOwnProperty('data')) {
                    obj['data'] = _ApiClient2.default.convertToType(data['data'], [_PrepaidItemsProductModel2.default]);
                }
            }
            return obj;
        }

        /**
        * Number of existing prepaid items
        * @member {Number} count
        */

        /**
        * GET Prepaid/Items
        * @member {Array.<module:model/PrepaidItemsProductModel>} data
        */

    }]);

    return PrepaidItemsList;
}();

exports.default = PrepaidItemsList;
},{"../ApiClient":21,"./PrepaidItemsProductModel":139}],139:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _ItemGroup = require('./ItemGroup');

var _ItemGroup2 = _interopRequireDefault(_ItemGroup);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The PrepaidItemsProductModel model module.
* @module model/PrepaidItemsProductModel
*/
PrepaidItemsProductModel = function () {
    /**
    * Constructs a new <code>PrepaidItemsProductModel</code>.
    * @alias module:model/PrepaidItemsProductModel
    * @class
    */

    function PrepaidItemsProductModel() {
        _classCallCheck(this, PrepaidItemsProductModel);

        this.object = undefined;
        this.id = undefined;
        this.retail_price = undefined;
        this.currency = undefined;
        this.description = undefined;
        this.logo = undefined;
        this.commission = undefined;
        this.vtc_id = undefined;
        this.ean_intern = undefined;
        this.itemgroup = undefined;
        this.stock_limit_max = undefined;
        this.stock_limit_min = undefined;
        this.taxable = undefined;
        this.type = undefined;
    }

    /**
    * Constructs a <code>PrepaidItemsProductModel</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/PrepaidItemsProductModel} obj Optional instance to populate.
    * @return {module:model/PrepaidItemsProductModel} The populated <code>PrepaidItemsProductModel</code> instance.
    */


    _createClass(PrepaidItemsProductModel, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new PrepaidItemsProductModel();

                if (data.hasOwnProperty('object')) {
                    obj['object'] = _ApiClient2.default.convertToType(data['object'], 'String');
                }
                if (data.hasOwnProperty('id')) {
                    obj['id'] = _ApiClient2.default.convertToType(data['id'], 'String');
                }
                if (data.hasOwnProperty('retail_price')) {
                    obj['retail_price'] = _ApiClient2.default.convertToType(data['retail_price'], 'Number');
                }
                if (data.hasOwnProperty('currency')) {
                    obj['currency'] = _ApiClient2.default.convertToType(data['currency'], 'String');
                }
                if (data.hasOwnProperty('description')) {
                    obj['description'] = _ApiClient2.default.convertToType(data['description'], 'String');
                }
                if (data.hasOwnProperty('logo')) {
                    obj['logo'] = _ApiClient2.default.convertToType(data['logo'], 'String');
                }
                if (data.hasOwnProperty('commission')) {
                    obj['commission'] = _ApiClient2.default.convertToType(data['commission'], 'Number');
                }
                if (data.hasOwnProperty('vtc_id')) {
                    obj['vtc_id'] = _ApiClient2.default.convertToType(data['vtc_id'], 'String');
                }
                if (data.hasOwnProperty('ean_intern')) {
                    obj['ean_intern'] = _ApiClient2.default.convertToType(data['ean_intern'], 'String');
                }
                if (data.hasOwnProperty('itemgroup')) {
                    obj['itemgroup'] = _ItemGroup2.default.constructFromObject(data['itemgroup']);
                }
                if (data.hasOwnProperty('stock_limit_max')) {
                    obj['stock_limit_max'] = _ApiClient2.default.convertToType(data['stock_limit_max'], 'Number');
                }
                if (data.hasOwnProperty('stock_limit_min')) {
                    obj['stock_limit_min'] = _ApiClient2.default.convertToType(data['stock_limit_min'], 'Number');
                }
                if (data.hasOwnProperty('taxable')) {
                    obj['taxable'] = _ApiClient2.default.convertToType(data['taxable'], 'Boolean');
                }
                if (data.hasOwnProperty('type')) {
                    obj['type'] = _ApiClient2.default.convertToType(data['type'], 'String');
                }
            }
            return obj;
        }

        /**
        * Object of prepaid item
        * @member {String} object
        */

        /**
        * Id of prepaid item
        * @member {String} id
        */

        /**
        * Retail price
        * @member {Number} retail_price
        */

        /**
        * Currency
        * @member {String} currency
        */

        /**
        * Description
        * @member {String} description
        */

        /**
        * Logo
        * @member {String} logo
        */

        /**
        * Commission
        * @member {Number} commission
        */

        /**
        * Vtc id
        * @member {String} vtc_id
        */

        /**
        * Ean intern
        * @member {String} ean_intern
        */

        /**
        * Item group
        * @member {module:model/ItemGroup} itemgroup
        */

        /**
        * Stock limit max
        * @member {Number} stock_limit_max
        */

        /**
        * Stock limit min
        * @member {Number} stock_limit_min
        */

        /**
        * Taxable
        * @member {Boolean} taxable
        */

        /**
        * Type
        * @member {String} type
        */

    }]);

    return PrepaidItemsProductModel;
}();

exports.default = PrepaidItemsProductModel;
},{"../ApiClient":21,"./ItemGroup":77}],140:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The PrepaidSalesItem model module.
* @module model/PrepaidSalesItem
*/
PrepaidSalesItem = function () {
    /**
    * Constructs a new <code>PrepaidSalesItem</code>.
    * @alias module:model/PrepaidSalesItem
    * @class
    */

    function PrepaidSalesItem() {
        _classCallCheck(this, PrepaidSalesItem);

        this.object = undefined;
        this.id = undefined;
        this.description = undefined;
        this.logo = undefined;
        this.type = undefined;
    }

    /**
    * Constructs a <code>PrepaidSalesItem</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/PrepaidSalesItem} obj Optional instance to populate.
    * @return {module:model/PrepaidSalesItem} The populated <code>PrepaidSalesItem</code> instance.
    */


    _createClass(PrepaidSalesItem, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new PrepaidSalesItem();

                if (data.hasOwnProperty('object')) {
                    obj['object'] = _ApiClient2.default.convertToType(data['object'], 'String');
                }
                if (data.hasOwnProperty('id')) {
                    obj['id'] = _ApiClient2.default.convertToType(data['id'], 'String');
                }
                if (data.hasOwnProperty('description')) {
                    obj['description'] = _ApiClient2.default.convertToType(data['description'], 'String');
                }
                if (data.hasOwnProperty('logo')) {
                    obj['logo'] = _ApiClient2.default.convertToType(data['logo'], 'String');
                }
                if (data.hasOwnProperty('type')) {
                    obj['type'] = _ApiClient2.default.convertToType(data['type'], 'String');
                }
            }
            return obj;
        }

        /**
        * Object of item
        * @member {String} object
        */

        /**
        * Id of item
        * @member {String} id
        */

        /**
        * Item description
        * @member {String} description
        */

        /**
        * Item logo
        * @member {String} logo
        */

        /**
        * Item type
        * @member {String} type
        */

    }]);

    return PrepaidSalesItem;
}();

exports.default = PrepaidSalesItem;
},{"../ApiClient":21}],141:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _ItemGroup = require('./ItemGroup');

var _ItemGroup2 = _interopRequireDefault(_ItemGroup);

var _PrepaidSalesItem = require('./PrepaidSalesItem');

var _PrepaidSalesItem2 = _interopRequireDefault(_PrepaidSalesItem);

var _PrepaidSalesSmartDevice = require('./PrepaidSalesSmartDevice');

var _PrepaidSalesSmartDevice2 = _interopRequireDefault(_PrepaidSalesSmartDevice);

var _ProductInstanceUID = require('./ProductInstanceUID');

var _ProductInstanceUID2 = _interopRequireDefault(_ProductInstanceUID);

var _Store = require('./Store');

var _Store2 = _interopRequireDefault(_Store);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The PrepaidSalesProductModel model module.
* @module model/PrepaidSalesProductModel
*/
PrepaidSalesProductModel = function () {
    /**
    * Constructs a new <code>PrepaidSalesProductModel</code>.
    * @alias module:model/PrepaidSalesProductModel
    * @class
    */

    function PrepaidSalesProductModel() {
        _classCallCheck(this, PrepaidSalesProductModel);

        this.object = undefined;
        this.id = undefined;
        this.status = undefined;
        this.stock = undefined;
        this.item = undefined;
        this.itemgroup = undefined;
        this.smart_device = undefined;
        this.merchant = undefined;
        this.store = undefined;
        this.contract = undefined;
        this.created = undefined;
        this.demo = undefined;
        this.description = undefined;
        this.amount = undefined;
        this.currency = undefined;
        this.commission = undefined;
        this.commission_currency = undefined;
        this.code = undefined;
        this.serial = undefined;
        this.cardnumber = undefined;
        this.expire_date = undefined;
        this.provider_delivery_number = undefined;
        this.receipt_header = undefined;
        this.receipt_customer = undefined;
        this.receipt_zvt = undefined;
        this.receipt_dealer = undefined;
        this.vtc_tid = undefined;
    }

    /**
    * Constructs a <code>PrepaidSalesProductModel</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/PrepaidSalesProductModel} obj Optional instance to populate.
    * @return {module:model/PrepaidSalesProductModel} The populated <code>PrepaidSalesProductModel</code> instance.
    */


    _createClass(PrepaidSalesProductModel, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new PrepaidSalesProductModel();

                if (data.hasOwnProperty('object')) {
                    obj['object'] = _ApiClient2.default.convertToType(data['object'], 'String');
                }
                if (data.hasOwnProperty('id')) {
                    obj['id'] = _ApiClient2.default.convertToType(data['id'], 'String');
                }
                if (data.hasOwnProperty('status')) {
                    obj['status'] = _ApiClient2.default.convertToType(data['status'], 'String');
                }
                if (data.hasOwnProperty('stock')) {
                    obj['stock'] = _ProductInstanceUID2.default.constructFromObject(data['stock']);
                }
                if (data.hasOwnProperty('item')) {
                    obj['item'] = _PrepaidSalesItem2.default.constructFromObject(data['item']);
                }
                if (data.hasOwnProperty('itemgroup')) {
                    obj['itemgroup'] = _ItemGroup2.default.constructFromObject(data['itemgroup']);
                }
                if (data.hasOwnProperty('smart_device')) {
                    obj['smart_device'] = _PrepaidSalesSmartDevice2.default.constructFromObject(data['smart_device']);
                }
                if (data.hasOwnProperty('merchant')) {
                    obj['merchant'] = _ProductInstanceUID2.default.constructFromObject(data['merchant']);
                }
                if (data.hasOwnProperty('store')) {
                    obj['store'] = _Store2.default.constructFromObject(data['store']);
                }
                if (data.hasOwnProperty('contract')) {
                    obj['contract'] = _ProductInstanceUID2.default.constructFromObject(data['contract']);
                }
                if (data.hasOwnProperty('created')) {
                    obj['created'] = _ApiClient2.default.convertToType(data['created'], 'Date');
                }
                if (data.hasOwnProperty('demo')) {
                    obj['demo'] = _ApiClient2.default.convertToType(data['demo'], 'Boolean');
                }
                if (data.hasOwnProperty('description')) {
                    obj['description'] = _ApiClient2.default.convertToType(data['description'], 'String');
                }
                if (data.hasOwnProperty('amount')) {
                    obj['amount'] = _ApiClient2.default.convertToType(data['amount'], 'Number');
                }
                if (data.hasOwnProperty('currency')) {
                    obj['currency'] = _ApiClient2.default.convertToType(data['currency'], 'String');
                }
                if (data.hasOwnProperty('commission')) {
                    obj['commission'] = _ApiClient2.default.convertToType(data['commission'], 'Number');
                }
                if (data.hasOwnProperty('commission_currency')) {
                    obj['commission_currency'] = _ApiClient2.default.convertToType(data['commission_currency'], 'String');
                }
                if (data.hasOwnProperty('code')) {
                    obj['code'] = _ApiClient2.default.convertToType(data['code'], 'String');
                }
                if (data.hasOwnProperty('serial')) {
                    obj['serial'] = _ApiClient2.default.convertToType(data['serial'], 'String');
                }
                if (data.hasOwnProperty('cardnumber')) {
                    obj['cardnumber'] = _ApiClient2.default.convertToType(data['cardnumber'], 'String');
                }
                if (data.hasOwnProperty('expire_date')) {
                    obj['expire_date'] = _ApiClient2.default.convertToType(data['expire_date'], 'Date');
                }
                if (data.hasOwnProperty('provider_delivery_number')) {
                    obj['provider_delivery_number'] = _ApiClient2.default.convertToType(data['provider_delivery_number'], 'String');
                }
                if (data.hasOwnProperty('receipt_header')) {
                    obj['receipt_header'] = _ApiClient2.default.convertToType(data['receipt_header'], 'String');
                }
                if (data.hasOwnProperty('receipt_customer')) {
                    obj['receipt_customer'] = _ApiClient2.default.convertToType(data['receipt_customer'], 'String');
                }
                if (data.hasOwnProperty('receipt_zvt')) {
                    obj['receipt_zvt'] = _ApiClient2.default.convertToType(data['receipt_zvt'], 'String');
                }
                if (data.hasOwnProperty('receipt_dealer')) {
                    obj['receipt_dealer'] = _ApiClient2.default.convertToType(data['receipt_dealer'], 'String');
                }
                if (data.hasOwnProperty('vtc_tid')) {
                    obj['vtc_tid'] = _ApiClient2.default.convertToType(data['vtc_tid'], 'String');
                }
            }
            return obj;
        }

        /**
        * Object of prepaid sale
        * @member {String} object
        */

        /**
        * Id of prepaid sale
        * @member {String} id
        */

        /**
        * Status
        * @member {String} status
        */

        /**
        * Prepaid stock
        * @member {module:model/ProductInstanceUID} stock
        */

        /**
        * Prepaid item
        * @member {module:model/PrepaidSalesItem} item
        */

        /**
        * Prepaid item group
        * @member {module:model/ItemGroup} itemgroup
        */

        /**
        * Smart device
        * @member {module:model/PrepaidSalesSmartDevice} smart_device
        */

        /**
        * General merchant
        * @member {module:model/ProductInstanceUID} merchant
        */

        /**
        * General store
        * @member {module:model/Store} store
        */

        /**
        * Prepaid contract
        * @member {module:model/ProductInstanceUID} contract
        */

        /**
        * Prepaid sale creation date
        * @member {Date} created
        */

        /**
        * Demo
        * @member {Boolean} demo
        */

        /**
        * Description
        * @member {String} description
        */

        /**
        * Amount
        * @member {Number} amount
        */

        /**
        * Currency
        * @member {String} currency
        */

        /**
        * Commission
        * @member {Number} commission
        */

        /**
        * Commission currency
        * @member {String} commission_currency
        */

        /**
        * Code
        * @member {String} code
        */

        /**
        * Serial
        * @member {String} serial
        */

        /**
        * Card number
        * @member {String} cardnumber
        */

        /**
        * Expire date
        * @member {Date} expire_date
        */

        /**
        * Provider delivery number
        * @member {String} provider_delivery_number
        */

        /**
        * Receipt header
        * @member {String} receipt_header
        */

        /**
        * Receipt customer
        * @member {String} receipt_customer
        */

        /**
        * Receipt zvt
        * @member {String} receipt_zvt
        */

        /**
        * Receipt dealer
        * @member {String} receipt_dealer
        */

        /**
        * Vtc tid
        * @member {String} vtc_tid
        */

    }]);

    return PrepaidSalesProductModel;
}();

exports.default = PrepaidSalesProductModel;
},{"../ApiClient":21,"./ItemGroup":77,"./PrepaidSalesItem":140,"./PrepaidSalesSmartDevice":142,"./ProductInstanceUID":145,"./Store":197}],142:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The PrepaidSalesSmartDevice model module.
* @module model/PrepaidSalesSmartDevice
*/
PrepaidSalesSmartDevice = function () {
    /**
    * Constructs a new <code>PrepaidSalesSmartDevice</code>.
    * @alias module:model/PrepaidSalesSmartDevice
    * @class
    */

    function PrepaidSalesSmartDevice() {
        _classCallCheck(this, PrepaidSalesSmartDevice);

        this.object = undefined;
        this.id = undefined;
        this.description = undefined;
        this.vendor_uid = undefined;
    }

    /**
    * Constructs a <code>PrepaidSalesSmartDevice</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/PrepaidSalesSmartDevice} obj Optional instance to populate.
    * @return {module:model/PrepaidSalesSmartDevice} The populated <code>PrepaidSalesSmartDevice</code> instance.
    */


    _createClass(PrepaidSalesSmartDevice, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new PrepaidSalesSmartDevice();

                if (data.hasOwnProperty('object')) {
                    obj['object'] = _ApiClient2.default.convertToType(data['object'], 'String');
                }
                if (data.hasOwnProperty('id')) {
                    obj['id'] = _ApiClient2.default.convertToType(data['id'], 'String');
                }
                if (data.hasOwnProperty('description')) {
                    obj['description'] = _ApiClient2.default.convertToType(data['description'], 'String');
                }
                if (data.hasOwnProperty('vendor_uid')) {
                    obj['vendor_uid'] = _ApiClient2.default.convertToType(data['vendor_uid'], 'String');
                }
            }
            return obj;
        }

        /**
        * Object of smart device
        * @member {String} object
        */

        /**
        * Id of smart device
        * @member {String} id
        */

        /**
        * Smart device description
        * @member {String} description
        */

        /**
        * Smart device vendor uid
        * @member {String} vendor_uid
        */

    }]);

    return PrepaidSalesSmartDevice;
}();

exports.default = PrepaidSalesSmartDevice;
},{"../ApiClient":21}],143:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The ProductExceptionPayload model module.
* @module model/ProductExceptionPayload
*/
ProductExceptionPayload = function () {
    /**
    * Constructs a new <code>ProductExceptionPayload</code>.
    * Payload of exceptions returned by API
    * @alias module:model/ProductExceptionPayload
    * @class
    */

    function ProductExceptionPayload() {
        _classCallCheck(this, ProductExceptionPayload);

        this.status = undefined;
        this.error = undefined;
        this.error_details = undefined;
        this.error_user = undefined;
        this.code = undefined;
        this.supportId = undefined;
    }

    /**
    * Constructs a <code>ProductExceptionPayload</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/ProductExceptionPayload} obj Optional instance to populate.
    * @return {module:model/ProductExceptionPayload} The populated <code>ProductExceptionPayload</code> instance.
    */


    _createClass(ProductExceptionPayload, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new ProductExceptionPayload();

                if (data.hasOwnProperty('status')) {
                    obj['status'] = _ApiClient2.default.convertToType(data['status'], 'String');
                }
                if (data.hasOwnProperty('error')) {
                    obj['error'] = _ApiClient2.default.convertToType(data['error'], 'String');
                }
                if (data.hasOwnProperty('error_details')) {
                    obj['error_details'] = _ApiClient2.default.convertToType(data['error_details'], 'String');
                }
                if (data.hasOwnProperty('error_user')) {
                    obj['error_user'] = _ApiClient2.default.convertToType(data['error_user'], 'String');
                }
                if (data.hasOwnProperty('code')) {
                    obj['code'] = _ApiClient2.default.convertToType(data['code'], 'String');
                }
                if (data.hasOwnProperty('supportId')) {
                    obj['supportId'] = _ApiClient2.default.convertToType(data['supportId'], 'String');
                }
            }
            return obj;
        }

        /**
        * Request status (always equals to 'error')
        * @member {String} status
        */

        /**
        * Error type identifier
        * @member {String} error
        */

        /**
        * Error details
        * @member {String} error_details
        */

        /**
        * Error details in German
        * @member {String} error_user
        */

        /**
        * HTTP code corresponding to error
        * @member {String} code
        */

        /**
        * ID by which support team can relate error with action(s) that caused it
        * @member {String} supportId
        */

    }]);

    return ProductExceptionPayload;
}();

exports.default = ProductExceptionPayload;
},{"../ApiClient":21}],144:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The ProductInstanceID model module.
* @module model/ProductInstanceID
*/
ProductInstanceID = function () {
    /**
    * Constructs a new <code>ProductInstanceID</code>.
    * Product instance id, uniquely identifying instance of Product
    * @alias module:model/ProductInstanceID
    * @class
    */

    function ProductInstanceID() {
        _classCallCheck(this, ProductInstanceID);

        this.id = undefined;
    }

    /**
    * Constructs a <code>ProductInstanceID</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/ProductInstanceID} obj Optional instance to populate.
    * @return {module:model/ProductInstanceID} The populated <code>ProductInstanceID</code> instance.
    */


    _createClass(ProductInstanceID, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new ProductInstanceID();

                if (data.hasOwnProperty('id')) {
                    obj['id'] = _ApiClient2.default.convertToType(data['id'], 'String');
                }
            }
            return obj;
        }

        /**
        * ID of instance
        * @member {String} id
        */

    }]);

    return ProductInstanceID;
}();

exports.default = ProductInstanceID;
},{"../ApiClient":21}],145:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The ProductInstanceUID model module.
* @module model/ProductInstanceUID
*/
ProductInstanceUID = function () {
    /**
    * Constructs a new <code>ProductInstanceUID</code>.
    * Product name and instance id, uniquely identifying instance of Product
    * @alias module:model/ProductInstanceUID
    * @class
    */

    function ProductInstanceUID() {
        _classCallCheck(this, ProductInstanceUID);

        this.object = undefined;
        this.id = undefined;
    }

    /**
    * Constructs a <code>ProductInstanceUID</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/ProductInstanceUID} obj Optional instance to populate.
    * @return {module:model/ProductInstanceUID} The populated <code>ProductInstanceUID</code> instance.
    */


    _createClass(ProductInstanceUID, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new ProductInstanceUID();

                if (data.hasOwnProperty('object')) {
                    obj['object'] = _ApiClient2.default.convertToType(data['object'], 'String');
                }
                if (data.hasOwnProperty('id')) {
                    obj['id'] = _ApiClient2.default.convertToType(data['id'], 'String');
                }
            }
            return obj;
        }

        /**
        * Object type of instance
        * @member {String} object
        */

        /**
        * ID of instance
        * @member {String} id
        */

    }]);

    return ProductInstanceUID;
}();

exports.default = ProductInstanceUID;
},{"../ApiClient":21}],146:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The ReceiptType model module.
* @module model/ReceiptType
*/
ReceiptType = function () {
    /**
    * Constructs a new <code>ReceiptType</code>.
    * @alias module:model/ReceiptType
    * @class
    */

    function ReceiptType() {
        _classCallCheck(this, ReceiptType);

        this.type = undefined;
    }

    /**
    * Constructs a <code>ReceiptType</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/ReceiptType} obj Optional instance to populate.
    * @return {module:model/ReceiptType} The populated <code>ReceiptType</code> instance.
    */


    _createClass(ReceiptType, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new ReceiptType();

                if (data.hasOwnProperty('type')) {
                    obj['type'] = _ApiClient2.default.convertToType(data['type'], 'String');
                }
            }
            return obj;
        }

        /**
        * Type
        * @member {String} type
        */

    }]);

    return ReceiptType;
}();

exports.default = ReceiptType;
},{"../ApiClient":21}],147:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _ReceiptType = require('./ReceiptType');

var _ReceiptType2 = _interopRequireDefault(_ReceiptType);

var _ReceiptValue = require('./ReceiptValue');

var _ReceiptValue2 = _interopRequireDefault(_ReceiptValue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The ReceiptTypeValue model module.
* @module model/ReceiptTypeValue
*/
ReceiptTypeValue = function () {
    /**
    * Constructs a new <code>ReceiptTypeValue</code>.
    * @alias module:model/ReceiptTypeValue
    * @class
    * @implements module:model/ReceiptType
    */

    function ReceiptTypeValue() {
        _classCallCheck(this, ReceiptTypeValue);

        this.value = undefined;
        this.type = undefined;


        _ReceiptType2.default.call(this);
    }

    /**
    * Constructs a <code>ReceiptTypeValue</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/ReceiptTypeValue} obj Optional instance to populate.
    * @return {module:model/ReceiptTypeValue} The populated <code>ReceiptTypeValue</code> instance.
    */


    _createClass(ReceiptTypeValue, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new ReceiptTypeValue();

                _ReceiptType2.default.constructFromObject(data, obj);

                if (data.hasOwnProperty('value')) {
                    obj['value'] = _ReceiptValue2.default.constructFromObject(data['value']);
                }
            }
            return obj;
        }

        /**
        * Value object
        * @member {module:model/ReceiptValue} value
        */


        // Implement ReceiptType interface:
        /**
        * Type
        * @member {String} type
        */

    }]);

    return ReceiptTypeValue;
}();

exports.default = ReceiptTypeValue;
},{"../ApiClient":21,"./ReceiptType":146,"./ReceiptValue":148}],148:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The ReceiptValue model module.
* @module model/ReceiptValue
*/
ReceiptValue = function () {
    /**
    * Constructs a new <code>ReceiptValue</code>.
    * @alias module:model/ReceiptValue
    * @class
    */

    function ReceiptValue() {
        _classCallCheck(this, ReceiptValue);

        this.caption = undefined;
        this.name = undefined;
        this.value = undefined;
        this.text = undefined;
        this.decoration = undefined;
    }

    /**
    * Constructs a <code>ReceiptValue</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/ReceiptValue} obj Optional instance to populate.
    * @return {module:model/ReceiptValue} The populated <code>ReceiptValue</code> instance.
    */


    _createClass(ReceiptValue, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new ReceiptValue();

                if (data.hasOwnProperty('caption')) {
                    obj['caption'] = _ApiClient2.default.convertToType(data['caption'], 'String');
                }
                if (data.hasOwnProperty('name')) {
                    obj['name'] = _ApiClient2.default.convertToType(data['name'], 'String');
                }
                if (data.hasOwnProperty('value')) {
                    obj['value'] = _ApiClient2.default.convertToType(data['value'], 'String');
                }
                if (data.hasOwnProperty('text')) {
                    obj['text'] = _ApiClient2.default.convertToType(data['text'], 'String');
                }
                if (data.hasOwnProperty('decoration')) {
                    obj['decoration'] = _ApiClient2.default.convertToType(data['decoration'], ['String']);
                }
            }
            return obj;
        }

        /**
        * Caption
        * @member {String} caption
        */

        /**
        * Name
        * @member {String} name
        */

        /**
        * Value
        * @member {String} value
        */

        /**
        * Text
        * @member {String} text
        */

        /**
        * Decoration
        * @member {Array.<String>} decoration
        */

    }]);

    return ReceiptValue;
}();

exports.default = ReceiptValue;
},{"../ApiClient":21}],149:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The SecupayBasketItem model module.
* @module model/SecupayBasketItem
*/
SecupayBasketItem = function () {
    /**
    * Constructs a new <code>SecupayBasketItem</code>.
    * Item describing single position in basket in transaction
    * @alias module:model/SecupayBasketItem
    * @class
    */

    function SecupayBasketItem() {
        _classCallCheck(this, SecupayBasketItem);

        this.item_type = undefined;
        this.article_number = undefined;
        this.quantity = undefined;
        this.name = undefined;
        this.model = undefined;
        this.ean = undefined;
        this.tax = undefined;
        this.total = undefined;
        this.price = undefined;
        this.apikey = undefined;
        this.transaction_hash = undefined;
        this.contract_id = undefined;
        this.reference_id = undefined;
        this.sub_basket = undefined;
    }

    /**
    * Constructs a <code>SecupayBasketItem</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SecupayBasketItem} obj Optional instance to populate.
    * @return {module:model/SecupayBasketItem} The populated <code>SecupayBasketItem</code> instance.
    */


    _createClass(SecupayBasketItem, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new SecupayBasketItem();

                if (data.hasOwnProperty('item_type')) {
                    obj['item_type'] = _ApiClient2.default.convertToType(data['item_type'], 'String');
                }
                if (data.hasOwnProperty('article_number')) {
                    obj['article_number'] = _ApiClient2.default.convertToType(data['article_number'], 'String');
                }
                if (data.hasOwnProperty('quantity')) {
                    obj['quantity'] = _ApiClient2.default.convertToType(data['quantity'], 'Number');
                }
                if (data.hasOwnProperty('name')) {
                    obj['name'] = _ApiClient2.default.convertToType(data['name'], 'String');
                }
                if (data.hasOwnProperty('model')) {
                    obj['model'] = _ApiClient2.default.convertToType(data['model'], 'String');
                }
                if (data.hasOwnProperty('ean')) {
                    obj['ean'] = _ApiClient2.default.convertToType(data['ean'], 'String');
                }
                if (data.hasOwnProperty('tax')) {
                    obj['tax'] = _ApiClient2.default.convertToType(data['tax'], 'String');
                }
                if (data.hasOwnProperty('total')) {
                    obj['total'] = _ApiClient2.default.convertToType(data['total'], 'Number');
                }
                if (data.hasOwnProperty('price')) {
                    obj['price'] = _ApiClient2.default.convertToType(data['price'], 'Number');
                }
                if (data.hasOwnProperty('apikey')) {
                    obj['apikey'] = _ApiClient2.default.convertToType(data['apikey'], 'String');
                }
                if (data.hasOwnProperty('transaction_hash')) {
                    obj['transaction_hash'] = _ApiClient2.default.convertToType(data['transaction_hash'], 'String');
                }
                if (data.hasOwnProperty('contract_id')) {
                    obj['contract_id'] = _ApiClient2.default.convertToType(data['contract_id'], 'String');
                }
                if (data.hasOwnProperty('reference_id')) {
                    obj['reference_id'] = _ApiClient2.default.convertToType(data['reference_id'], 'String');
                }
                if (data.hasOwnProperty('sub_basket')) {
                    obj['sub_basket'] = _ApiClient2.default.convertToType(data['sub_basket'], [SecupayBasketItem]);
                }
            }
            return obj;
        }

        /**
        * Category of item
        * @member {String} item_type
        */

        /**
        * Article number of item
        * @member {String} article_number
        */

        /**
        * Quantity of articles in item
        * @member {Number} quantity
        */

        /**
        * Descriptive name of item
        * @member {String} name
        */

        /**
        * Model of item
        * @member {String} model
        */

        /**
        * EAN, European Article Number
        * @member {String} ean
        */

        /**
        * Applicable tax in percentages
        * @member {String} tax
        */

        /**
        * Total price
        * @member {Number} total
        */

        /**
        * Price of single article, if item is of article category
        * @member {Number} price
        */

        /**
        * Special param for stakeholder payments
        * @member {String} apikey
        */

        /**
        * Special param for payout payments
        * @member {String} transaction_hash
        */

        /**
        * Contract id - Special param for stakeholder payments
        * @member {String} contract_id
        */

        /**
        * Reference id - must be unique for the entire basket
        * @member {String} reference_id
        */

        /**
        * Mixed-Basket: All basket items for one merchant.
        * @member {Array.<module:model/SecupayBasketItem>} sub_basket
        */

    }]);

    return SecupayBasketItem;
}();

exports.default = SecupayBasketItem;
},{"../ApiClient":21}],150:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The SecupaySubTransactionProductModel model module.
* @module model/SecupaySubTransactionProductModel
*/
SecupaySubTransactionProductModel = function () {
    /**
    * Constructs a new <code>SecupaySubTransactionProductModel</code>.
    * @alias module:model/SecupaySubTransactionProductModel
    * @class
    */

    function SecupaySubTransactionProductModel() {
        _classCallCheck(this, SecupaySubTransactionProductModel);

        this.id = undefined;
        this.trans_id = undefined;
        this.reference_id = undefined;
    }

    /**
    * Constructs a <code>SecupaySubTransactionProductModel</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SecupaySubTransactionProductModel} obj Optional instance to populate.
    * @return {module:model/SecupaySubTransactionProductModel} The populated <code>SecupaySubTransactionProductModel</code> instance.
    */


    _createClass(SecupaySubTransactionProductModel, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new SecupaySubTransactionProductModel();

                if (data.hasOwnProperty('id')) {
                    obj['id'] = _ApiClient2.default.convertToType(data['id'], 'String');
                }
                if (data.hasOwnProperty('trans_id')) {
                    obj['trans_id'] = _ApiClient2.default.convertToType(data['trans_id'], 'Number');
                }
                if (data.hasOwnProperty('reference_id')) {
                    obj['reference_id'] = _ApiClient2.default.convertToType(data['reference_id'], 'String');
                }
            }
            return obj;
        }

        /**
        * The payment id of the sub-transaction
        * @member {String} id
        */

        /**
        * Transaction identifier
        * @member {Number} trans_id
        */

        /**
        * Reference id - which was used in the mixed basket
        * @member {String} reference_id
        */

    }]);

    return SecupaySubTransactionProductModel;
}();

exports.default = SecupaySubTransactionProductModel;
},{"../ApiClient":21}],151:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The SecupayTransactionCancelDTO model module.
* @module model/SecupayTransactionCancelDTO
*/
SecupayTransactionCancelDTO = function () {
    /**
    * Constructs a new <code>SecupayTransactionCancelDTO</code>.
    * @alias module:model/SecupayTransactionCancelDTO
    * @class
    */

    function SecupayTransactionCancelDTO() {
        _classCallCheck(this, SecupayTransactionCancelDTO);

        this.contract = undefined;
        this.amount = undefined;
        this.reduce_stakeholder_payment = false;
    }

    /**
    * Constructs a <code>SecupayTransactionCancelDTO</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SecupayTransactionCancelDTO} obj Optional instance to populate.
    * @return {module:model/SecupayTransactionCancelDTO} The populated <code>SecupayTransactionCancelDTO</code> instance.
    */


    _createClass(SecupayTransactionCancelDTO, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new SecupayTransactionCancelDTO();

                if (data.hasOwnProperty('contract')) {
                    obj['contract'] = _ApiClient2.default.convertToType(data['contract'], Object);
                }
                if (data.hasOwnProperty('amount')) {
                    obj['amount'] = _ApiClient2.default.convertToType(data['amount'], 'Number');
                }
                if (data.hasOwnProperty('reduce_stakeholder_payment')) {
                    obj['reduce_stakeholder_payment'] = _ApiClient2.default.convertToType(data['reduce_stakeholder_payment'], 'Boolean');
                }
            }
            return obj;
        }

        /**
        * The payment contract object
        * @member {Object} contract
        */

        /**
        * partial or full refund amount, \"0\" means full refund
        * @member {Number} amount
        */

        /**
        * Mixed-Basket: (percentage) reduce the stakeholder amount too
        * @member {Boolean} reduce_stakeholder_payment
        * @default false
        */

    }]);

    return SecupayTransactionCancelDTO;
}();

exports.default = SecupayTransactionCancelDTO;
},{"../ApiClient":21}],152:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The SecupayTransactionCaptureDTO model module.
* @module model/SecupayTransactionCaptureDTO
*/
SecupayTransactionCaptureDTO = function () {
    /**
    * Constructs a new <code>SecupayTransactionCaptureDTO</code>.
    * @alias module:model/SecupayTransactionCaptureDTO
    * @class
    */

    function SecupayTransactionCaptureDTO() {
        _classCallCheck(this, SecupayTransactionCaptureDTO);

        this.contract = undefined;
    }

    /**
    * Constructs a <code>SecupayTransactionCaptureDTO</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SecupayTransactionCaptureDTO} obj Optional instance to populate.
    * @return {module:model/SecupayTransactionCaptureDTO} The populated <code>SecupayTransactionCaptureDTO</code> instance.
    */


    _createClass(SecupayTransactionCaptureDTO, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new SecupayTransactionCaptureDTO();

                if (data.hasOwnProperty('contract')) {
                    obj['contract'] = _ApiClient2.default.convertToType(data['contract'], Object);
                }
            }
            return obj;
        }

        /**
        * The payment contract object
        * @member {Object} contract
        */

    }]);

    return SecupayTransactionCaptureDTO;
}();

exports.default = SecupayTransactionCaptureDTO;
},{"../ApiClient":21}],153:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The SecupayTransactionDTOExternalInvoicePdf model module.
* @module model/SecupayTransactionDTOExternalInvoicePdf
*/
SecupayTransactionDTOExternalInvoicePdf = function () {
    /**
    * Constructs a new <code>SecupayTransactionDTOExternalInvoicePdf</code>.
    * @alias module:model/SecupayTransactionDTOExternalInvoicePdf
    * @class
    */

    function SecupayTransactionDTOExternalInvoicePdf() {
        _classCallCheck(this, SecupayTransactionDTOExternalInvoicePdf);

        this.update_existing = undefined;
    }

    /**
    * Constructs a <code>SecupayTransactionDTOExternalInvoicePdf</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SecupayTransactionDTOExternalInvoicePdf} obj Optional instance to populate.
    * @return {module:model/SecupayTransactionDTOExternalInvoicePdf} The populated <code>SecupayTransactionDTOExternalInvoicePdf</code> instance.
    */


    _createClass(SecupayTransactionDTOExternalInvoicePdf, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new SecupayTransactionDTOExternalInvoicePdf();

                if (data.hasOwnProperty('update_existing')) {
                    obj['update_existing'] = _ApiClient2.default.convertToType(data['update_existing'], 'Boolean');
                }
            }
            return obj;
        }

        /**
        * Update existing invoice PDF
        * @member {Boolean} update_existing
        */

    }]);

    return SecupayTransactionDTOExternalInvoicePdf;
}();

exports.default = SecupayTransactionDTOExternalInvoicePdf;
},{"../ApiClient":21}],154:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _SecupayTransactionExternalInvoicePdfDocument = require('./SecupayTransactionExternalInvoicePdfDocument');

var _SecupayTransactionExternalInvoicePdfDocument2 = _interopRequireDefault(_SecupayTransactionExternalInvoicePdfDocument);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The SecupayTransactionExternalInvoicePdf model module.
* @module model/SecupayTransactionExternalInvoicePdf
*/
SecupayTransactionExternalInvoicePdf = function () {
    /**
    * Constructs a new <code>SecupayTransactionExternalInvoicePdf</code>.
    * @alias module:model/SecupayTransactionExternalInvoicePdf
    * @class
    */

    function SecupayTransactionExternalInvoicePdf() {
        _classCallCheck(this, SecupayTransactionExternalInvoicePdf);

        this.document = undefined;
    }

    /**
    * Constructs a <code>SecupayTransactionExternalInvoicePdf</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SecupayTransactionExternalInvoicePdf} obj Optional instance to populate.
    * @return {module:model/SecupayTransactionExternalInvoicePdf} The populated <code>SecupayTransactionExternalInvoicePdf</code> instance.
    */


    _createClass(SecupayTransactionExternalInvoicePdf, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new SecupayTransactionExternalInvoicePdf();

                if (data.hasOwnProperty('document')) {
                    obj['document'] = _SecupayTransactionExternalInvoicePdfDocument2.default.constructFromObject(data['document']);
                }
            }
            return obj;
        }

        /**
        * @member {module:model/SecupayTransactionExternalInvoicePdfDocument} document
        */

    }]);

    return SecupayTransactionExternalInvoicePdf;
}();

exports.default = SecupayTransactionExternalInvoicePdf;
},{"../ApiClient":21,"./SecupayTransactionExternalInvoicePdfDocument":155}],155:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The SecupayTransactionExternalInvoicePdfDocument model module.
* @module model/SecupayTransactionExternalInvoicePdfDocument
*/
SecupayTransactionExternalInvoicePdfDocument = function () {
    /**
    * Constructs a new <code>SecupayTransactionExternalInvoicePdfDocument</code>.
    * Information about the saved document
    * @alias module:model/SecupayTransactionExternalInvoicePdfDocument
    * @class
    */

    function SecupayTransactionExternalInvoicePdfDocument() {
        _classCallCheck(this, SecupayTransactionExternalInvoicePdfDocument);

        this.id = undefined;
        this.mime_type = undefined;
        this.name = undefined;
        this.size = undefined;
        this.url = undefined;
    }

    /**
    * Constructs a <code>SecupayTransactionExternalInvoicePdfDocument</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SecupayTransactionExternalInvoicePdfDocument} obj Optional instance to populate.
    * @return {module:model/SecupayTransactionExternalInvoicePdfDocument} The populated <code>SecupayTransactionExternalInvoicePdfDocument</code> instance.
    */


    _createClass(SecupayTransactionExternalInvoicePdfDocument, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new SecupayTransactionExternalInvoicePdfDocument();

                if (data.hasOwnProperty('id')) {
                    obj['id'] = _ApiClient2.default.convertToType(data['id'], 'String');
                }
                if (data.hasOwnProperty('mime_type')) {
                    obj['mime_type'] = _ApiClient2.default.convertToType(data['mime_type'], 'String');
                }
                if (data.hasOwnProperty('name')) {
                    obj['name'] = _ApiClient2.default.convertToType(data['name'], 'String');
                }
                if (data.hasOwnProperty('size')) {
                    obj['size'] = _ApiClient2.default.convertToType(data['size'], 'Number');
                }
                if (data.hasOwnProperty('url')) {
                    obj['url'] = _ApiClient2.default.convertToType(data['url'], 'String');
                }
            }
            return obj;
        }

        /**
        * The Document File ID
        * @member {String} id
        */

        /**
        * The MIME Type
        * @member {String} mime_type
        */

        /**
        * The file name
        * @member {String} name
        */

        /**
        * The size of the file in bytes
        * @member {Number} size
        */

        /**
        * The download-url to this file
        * @member {String} url
        */

    }]);

    return SecupayTransactionExternalInvoicePdfDocument;
}();

exports.default = SecupayTransactionExternalInvoicePdfDocument;
},{"../ApiClient":21}],156:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _PaymentCustomersProductModel = require('./PaymentCustomersProductModel');

var _PaymentCustomersProductModel2 = _interopRequireDefault(_PaymentCustomersProductModel);

var _SecupayBasketItem = require('./SecupayBasketItem');

var _SecupayBasketItem2 = _interopRequireDefault(_SecupayBasketItem);

var _SecupayTransactionProductDTOExperience = require('./SecupayTransactionProductDTOExperience');

var _SecupayTransactionProductDTOExperience2 = _interopRequireDefault(_SecupayTransactionProductDTOExperience);

var _SecupayTransactionProductDTOOptData = require('./SecupayTransactionProductDTOOptData');

var _SecupayTransactionProductDTOOptData2 = _interopRequireDefault(_SecupayTransactionProductDTOOptData);

var _SecupayTransactionProductDTORedirectUrl = require('./SecupayTransactionProductDTORedirectUrl');

var _SecupayTransactionProductDTORedirectUrl2 = _interopRequireDefault(_SecupayTransactionProductDTORedirectUrl);

var _SecupayTransactionProductDTOSubscription = require('./SecupayTransactionProductDTOSubscription');

var _SecupayTransactionProductDTOSubscription2 = _interopRequireDefault(_SecupayTransactionProductDTOSubscription);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The SecupayTransactionProductDTO model module.
* @module model/SecupayTransactionProductDTO
*/
SecupayTransactionProductDTO = function () {
    /**
    * Constructs a new <code>SecupayTransactionProductDTO</code>.
    * @alias module:model/SecupayTransactionProductDTO
    * @class
    */

    function SecupayTransactionProductDTO() {
        _classCallCheck(this, SecupayTransactionProductDTO);

        this.amount = undefined;
        this.currency = undefined;
        this.purpose = undefined;
        this.order_id = undefined;
        this.basket = undefined;
        this.accrual = undefined;
        this.payment_action = undefined;
        this.customer = undefined;
        this.redirect_url = undefined;
        this.contract = undefined;
        this.container = undefined;
        this.opt_data = undefined;
        this.subscription = undefined;
        this.demo = undefined;
        this.experience = undefined;
    }

    /**
    * Constructs a <code>SecupayTransactionProductDTO</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SecupayTransactionProductDTO} obj Optional instance to populate.
    * @return {module:model/SecupayTransactionProductDTO} The populated <code>SecupayTransactionProductDTO</code> instance.
    */


    _createClass(SecupayTransactionProductDTO, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new SecupayTransactionProductDTO();

                if (data.hasOwnProperty('amount')) {
                    obj['amount'] = _ApiClient2.default.convertToType(data['amount'], 'Number');
                }
                if (data.hasOwnProperty('currency')) {
                    obj['currency'] = _ApiClient2.default.convertToType(data['currency'], 'String');
                }
                if (data.hasOwnProperty('purpose')) {
                    obj['purpose'] = _ApiClient2.default.convertToType(data['purpose'], 'String');
                }
                if (data.hasOwnProperty('order_id')) {
                    obj['order_id'] = _ApiClient2.default.convertToType(data['order_id'], 'String');
                }
                if (data.hasOwnProperty('basket')) {
                    obj['basket'] = _ApiClient2.default.convertToType(data['basket'], [_SecupayBasketItem2.default]);
                }
                if (data.hasOwnProperty('accrual')) {
                    obj['accrual'] = _ApiClient2.default.convertToType(data['accrual'], 'Boolean');
                }
                if (data.hasOwnProperty('payment_action')) {
                    obj['payment_action'] = _ApiClient2.default.convertToType(data['payment_action'], 'String');
                }
                if (data.hasOwnProperty('customer')) {
                    obj['customer'] = _PaymentCustomersProductModel2.default.constructFromObject(data['customer']);
                }
                if (data.hasOwnProperty('redirect_url')) {
                    obj['redirect_url'] = _SecupayTransactionProductDTORedirectUrl2.default.constructFromObject(data['redirect_url']);
                }
                if (data.hasOwnProperty('contract')) {
                    obj['contract'] = _ApiClient2.default.convertToType(data['contract'], 'String');
                }
                if (data.hasOwnProperty('container')) {
                    obj['container'] = _ApiClient2.default.convertToType(data['container'], 'String');
                }
                if (data.hasOwnProperty('opt_data')) {
                    obj['opt_data'] = _SecupayTransactionProductDTOOptData2.default.constructFromObject(data['opt_data']);
                }
                if (data.hasOwnProperty('subscription')) {
                    obj['subscription'] = _SecupayTransactionProductDTOSubscription2.default.constructFromObject(data['subscription']);
                }
                if (data.hasOwnProperty('demo')) {
                    obj['demo'] = _ApiClient2.default.convertToType(data['demo'], 'Boolean');
                }
                if (data.hasOwnProperty('experience')) {
                    obj['experience'] = _SecupayTransactionProductDTOExperience2.default.constructFromObject(data['experience']);
                }
            }
            return obj;
        }

        /**
        * Total amount of payment in cents (or the smallest cash unit of the relevant currency)
        * @member {Number} amount
        */

        /**
        * ISO 4217 code of currency, eg EUR for Euro.
        * @member {String} currency
        */

        /**
        * The purpose of the payment. This is the later assignment of the payment is for example on the account statement of the buyer.
        * @member {String} purpose
        */

        /**
        * Specifying an order number. Depending on the contract setting, this must be unique for each payment.
        * @member {String} order_id
        */

        /**
        * A list of items that are being purchased.
        * @member {Array.<module:model/SecupayBasketItem>} basket
        */

        /**
        * Indicates whether the payment is locked for pay-out (TRUE) or not (FALSE). Standard value here is FALSE.
        * @member {Boolean} accrual
        */

        /**
        * Specifies whether a pre-authorization (\"authorization\") or instant payment (\"sale\") is to be performed. Standard value here is \"sale\". The collection of the pre-authorized payment is made with the \"capture\" command.
        * @member {String} payment_action
        */

        /**
        * The customer object
        * @member {module:model/PaymentCustomersProductModel} customer
        */

        /**
        * @member {module:model/SecupayTransactionProductDTORedirectUrl} redirect_url
        */

        /**
        * Contract id
        * @member {String} contract
        */

        /**
        * Container id
        * @member {String} container
        */

        /**
        * @member {module:model/SecupayTransactionProductDTOOptData} opt_data
        */

        /**
        * @member {module:model/SecupayTransactionProductDTOSubscription} subscription
        */

        /**
        * Demo
        * @member {Boolean} demo
        */

        /**
        * @member {module:model/SecupayTransactionProductDTOExperience} experience
        */

    }]);

    return SecupayTransactionProductDTO;
}();

exports.default = SecupayTransactionProductDTO;
},{"../ApiClient":21,"./PaymentCustomersProductModel":129,"./SecupayBasketItem":149,"./SecupayTransactionProductDTOExperience":157,"./SecupayTransactionProductDTOOptData":158,"./SecupayTransactionProductDTORedirectUrl":159,"./SecupayTransactionProductDTOSubscription":160}],157:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The SecupayTransactionProductDTOExperience model module.
* @module model/SecupayTransactionProductDTOExperience
*/
SecupayTransactionProductDTOExperience = function () {
    /**
    * Constructs a new <code>SecupayTransactionProductDTOExperience</code>.
    * Customer experience score
    * @alias module:model/SecupayTransactionProductDTOExperience
    * @class
    */

    function SecupayTransactionProductDTOExperience() {
        _classCallCheck(this, SecupayTransactionProductDTOExperience);

        this.positive = undefined;
        this.negative = undefined;
    }

    /**
    * Constructs a <code>SecupayTransactionProductDTOExperience</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SecupayTransactionProductDTOExperience} obj Optional instance to populate.
    * @return {module:model/SecupayTransactionProductDTOExperience} The populated <code>SecupayTransactionProductDTOExperience</code> instance.
    */


    _createClass(SecupayTransactionProductDTOExperience, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new SecupayTransactionProductDTOExperience();

                if (data.hasOwnProperty('positive')) {
                    obj['positive'] = _ApiClient2.default.convertToType(data['positive'], 'Number');
                }
                if (data.hasOwnProperty('negative')) {
                    obj['negative'] = _ApiClient2.default.convertToType(data['negative'], 'Number');
                }
            }
            return obj;
        }

        /**
        * Score of positive experience (paid orders)
        * @member {Number} positive
        */

        /**
        * Score of negative experience (open/unpaid orders)
        * @member {Number} negative
        */

    }]);

    return SecupayTransactionProductDTOExperience;
}();

exports.default = SecupayTransactionProductDTOExperience;
},{"../ApiClient":21}],158:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The SecupayTransactionProductDTOOptData model module.
* @module model/SecupayTransactionProductDTOOptData
*/
SecupayTransactionProductDTOOptData = function () {
    /**
    * Constructs a new <code>SecupayTransactionProductDTOOptData</code>.
    * Options for customizing the checkout page
    * @alias module:model/SecupayTransactionProductDTOOptData
    * @class
    */

    function SecupayTransactionProductDTOOptData() {
        _classCallCheck(this, SecupayTransactionProductDTOOptData);

        this.has_accepted_disclaimer = undefined;
        this.language = undefined;
    }

    /**
    * Constructs a <code>SecupayTransactionProductDTOOptData</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SecupayTransactionProductDTOOptData} obj Optional instance to populate.
    * @return {module:model/SecupayTransactionProductDTOOptData} The populated <code>SecupayTransactionProductDTOOptData</code> instance.
    */


    _createClass(SecupayTransactionProductDTOOptData, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new SecupayTransactionProductDTOOptData();

                if (data.hasOwnProperty('has_accepted_disclaimer')) {
                    obj['has_accepted_disclaimer'] = _ApiClient2.default.convertToType(data['has_accepted_disclaimer'], 'String');
                }
                if (data.hasOwnProperty('language')) {
                    obj['language'] = _ApiClient2.default.convertToType(data['language'], 'String');
                }
            }
            return obj;
        }

        /**
        * Customer accepted disclaimer
        * @member {String} has_accepted_disclaimer
        */

        /**
        * Client language
        * @member {String} language
        */

    }]);

    return SecupayTransactionProductDTOOptData;
}();

exports.default = SecupayTransactionProductDTOOptData;
},{"../ApiClient":21}],159:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The SecupayTransactionProductDTORedirectUrl model module.
* @module model/SecupayTransactionProductDTORedirectUrl
*/
SecupayTransactionProductDTORedirectUrl = function () {
    /**
    * Constructs a new <code>SecupayTransactionProductDTORedirectUrl</code>.
    * A list of redirect urls used for the payment checkout page
    * @alias module:model/SecupayTransactionProductDTORedirectUrl
    * @class
    */

    function SecupayTransactionProductDTORedirectUrl() {
        _classCallCheck(this, SecupayTransactionProductDTORedirectUrl);

        this.url_success = undefined;
        this.url_failure = undefined;
        this.url_push = undefined;
    }

    /**
    * Constructs a <code>SecupayTransactionProductDTORedirectUrl</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SecupayTransactionProductDTORedirectUrl} obj Optional instance to populate.
    * @return {module:model/SecupayTransactionProductDTORedirectUrl} The populated <code>SecupayTransactionProductDTORedirectUrl</code> instance.
    */


    _createClass(SecupayTransactionProductDTORedirectUrl, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new SecupayTransactionProductDTORedirectUrl();

                if (data.hasOwnProperty('url_success')) {
                    obj['url_success'] = _ApiClient2.default.convertToType(data['url_success'], 'String');
                }
                if (data.hasOwnProperty('url_failure')) {
                    obj['url_failure'] = _ApiClient2.default.convertToType(data['url_failure'], 'String');
                }
                if (data.hasOwnProperty('url_push')) {
                    obj['url_push'] = _ApiClient2.default.convertToType(data['url_push'], 'String');
                }
            }
            return obj;
        }

        /**
        * After successfully entering the cash data of the payer is returned to this page.
        * @member {String} url_success
        */

        /**
        * After canceling or on errors the payer will be redirected to this page and can select there an another payment method.
        * @member {String} url_failure
        */

        /**
        * The secupay system will be send status change notifications to this URL.
        * @member {String} url_push
        */

    }]);

    return SecupayTransactionProductDTORedirectUrl;
}();

exports.default = SecupayTransactionProductDTORedirectUrl;
},{"../ApiClient":21}],160:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The SecupayTransactionProductDTOSubscription model module.
* @module model/SecupayTransactionProductDTOSubscription
*/
SecupayTransactionProductDTOSubscription = function () {
    /**
    * Constructs a new <code>SecupayTransactionProductDTOSubscription</code>.
    * Recurring payments
    * @alias module:model/SecupayTransactionProductDTOSubscription
    * @class
    */

    function SecupayTransactionProductDTOSubscription() {
        _classCallCheck(this, SecupayTransactionProductDTOSubscription);

        this.purpose = undefined;
        this.id = undefined;
    }

    /**
    * Constructs a <code>SecupayTransactionProductDTOSubscription</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SecupayTransactionProductDTOSubscription} obj Optional instance to populate.
    * @return {module:model/SecupayTransactionProductDTOSubscription} The populated <code>SecupayTransactionProductDTOSubscription</code> instance.
    */


    _createClass(SecupayTransactionProductDTOSubscription, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new SecupayTransactionProductDTOSubscription();

                if (data.hasOwnProperty('purpose')) {
                    obj['purpose'] = _ApiClient2.default.convertToType(data['purpose'], 'String');
                }
                if (data.hasOwnProperty('id')) {
                    obj['id'] = _ApiClient2.default.convertToType(data['id'], 'Number');
                }
            }
            return obj;
        }

        /**
        * The purpose of the subscription
        * @member {String} purpose
        */

        /**
        * Id of subscription, if exists
        * @member {Number} id
        */

    }]);

    return SecupayTransactionProductDTOSubscription;
}();

exports.default = SecupayTransactionProductDTOSubscription;
},{"../ApiClient":21}],161:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _PaymentContainersProductModel = require('./PaymentContainersProductModel');

var _PaymentContainersProductModel2 = _interopRequireDefault(_PaymentContainersProductModel);

var _PaymentCustomersProductModel = require('./PaymentCustomersProductModel');

var _PaymentCustomersProductModel2 = _interopRequireDefault(_PaymentCustomersProductModel);

var _SecupayBasketItem = require('./SecupayBasketItem');

var _SecupayBasketItem2 = _interopRequireDefault(_SecupayBasketItem);

var _SecupaySubTransactionProductModel = require('./SecupaySubTransactionProductModel');

var _SecupaySubTransactionProductModel2 = _interopRequireDefault(_SecupaySubTransactionProductModel);

var _SecupayTransactionProductModelRedirectUrl = require('./SecupayTransactionProductModelRedirectUrl');

var _SecupayTransactionProductModelRedirectUrl2 = _interopRequireDefault(_SecupayTransactionProductModelRedirectUrl);

var _SecupayTransactionProductModelTransferAccount = require('./SecupayTransactionProductModelTransferAccount');

var _SecupayTransactionProductModelTransferAccount2 = _interopRequireDefault(_SecupayTransactionProductModelTransferAccount);

var _SecupayTransactionProductModelUsedPaymentInstrument = require('./SecupayTransactionProductModelUsedPaymentInstrument');

var _SecupayTransactionProductModelUsedPaymentInstrument2 = _interopRequireDefault(_SecupayTransactionProductModelUsedPaymentInstrument);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The SecupayTransactionProductModel model module.
* @module model/SecupayTransactionProductModel
*/
SecupayTransactionProductModel = function () {
    /**
    * Constructs a new <code>SecupayTransactionProductModel</code>.
    * @alias module:model/SecupayTransactionProductModel
    * @class
    */

    function SecupayTransactionProductModel() {
        _classCallCheck(this, SecupayTransactionProductModel);

        this.object = undefined;
        this.id = undefined;
        this.trans_id = undefined;
        this.status = undefined;
        this.amount = undefined;
        this.currency = undefined;
        this.purpose = undefined;
        this.order_id = undefined;
        this.basket = undefined;
        this.transaction_status = undefined;
        this.accrual = undefined;
        this.payment_action = undefined;
        this.transfer_purpose = undefined;
        this.transfer_account = undefined;
        this.customer = undefined;
        this.used_payment_instrument = undefined;
        this.redirect_url = undefined;
        this.iframe_url = undefined;
        this.container = undefined;
        this.sub_transactions = undefined;
    }

    /**
    * Constructs a <code>SecupayTransactionProductModel</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SecupayTransactionProductModel} obj Optional instance to populate.
    * @return {module:model/SecupayTransactionProductModel} The populated <code>SecupayTransactionProductModel</code> instance.
    */


    _createClass(SecupayTransactionProductModel, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new SecupayTransactionProductModel();

                if (data.hasOwnProperty('object')) {
                    obj['object'] = _ApiClient2.default.convertToType(data['object'], 'String');
                }
                if (data.hasOwnProperty('id')) {
                    obj['id'] = _ApiClient2.default.convertToType(data['id'], 'String');
                }
                if (data.hasOwnProperty('trans_id')) {
                    obj['trans_id'] = _ApiClient2.default.convertToType(data['trans_id'], 'Number');
                }
                if (data.hasOwnProperty('status')) {
                    obj['status'] = _ApiClient2.default.convertToType(data['status'], 'String');
                }
                if (data.hasOwnProperty('amount')) {
                    obj['amount'] = _ApiClient2.default.convertToType(data['amount'], 'Number');
                }
                if (data.hasOwnProperty('currency')) {
                    obj['currency'] = _ApiClient2.default.convertToType(data['currency'], 'String');
                }
                if (data.hasOwnProperty('purpose')) {
                    obj['purpose'] = _ApiClient2.default.convertToType(data['purpose'], 'String');
                }
                if (data.hasOwnProperty('order_id')) {
                    obj['order_id'] = _ApiClient2.default.convertToType(data['order_id'], 'String');
                }
                if (data.hasOwnProperty('basket')) {
                    obj['basket'] = _ApiClient2.default.convertToType(data['basket'], [_SecupayBasketItem2.default]);
                }
                if (data.hasOwnProperty('transaction_status')) {
                    obj['transaction_status'] = _ApiClient2.default.convertToType(data['transaction_status'], 'String');
                }
                if (data.hasOwnProperty('accrual')) {
                    obj['accrual'] = _ApiClient2.default.convertToType(data['accrual'], 'Boolean');
                }
                if (data.hasOwnProperty('payment_action')) {
                    obj['payment_action'] = _ApiClient2.default.convertToType(data['payment_action'], 'String');
                }
                if (data.hasOwnProperty('transfer_purpose')) {
                    obj['transfer_purpose'] = _ApiClient2.default.convertToType(data['transfer_purpose'], 'String');
                }
                if (data.hasOwnProperty('transfer_account')) {
                    obj['transfer_account'] = _SecupayTransactionProductModelTransferAccount2.default.constructFromObject(data['transfer_account']);
                }
                if (data.hasOwnProperty('customer')) {
                    obj['customer'] = _PaymentCustomersProductModel2.default.constructFromObject(data['customer']);
                }
                if (data.hasOwnProperty('used_payment_instrument')) {
                    obj['used_payment_instrument'] = _SecupayTransactionProductModelUsedPaymentInstrument2.default.constructFromObject(data['used_payment_instrument']);
                }
                if (data.hasOwnProperty('redirect_url')) {
                    obj['redirect_url'] = _SecupayTransactionProductModelRedirectUrl2.default.constructFromObject(data['redirect_url']);
                }
                if (data.hasOwnProperty('iframe_url')) {
                    obj['iframe_url'] = _ApiClient2.default.convertToType(data['iframe_url'], 'String');
                }
                if (data.hasOwnProperty('container')) {
                    obj['container'] = _PaymentContainersProductModel2.default.constructFromObject(data['container']);
                }
                if (data.hasOwnProperty('sub_transactions')) {
                    obj['sub_transactions'] = _ApiClient2.default.convertToType(data['sub_transactions'], [_SecupaySubTransactionProductModel2.default]);
                }
            }
            return obj;
        }

        /**
        * Product name
        * @member {String} object
        */

        /**
        * ID of instance
        * @member {String} id
        */

        /**
        * Transaction identifier
        * @member {Number} trans_id
        */

        /**
        * Transaction status
        * @member {String} status
        */

        /**
        * Total amount of payment in cents (or the smallest cash unit of the relevant currency)
        * @member {Number} amount
        */

        /**
        * ISO 4217 code of currency, eg EUR for Euro.
        * @member {String} currency
        */

        /**
        * The purpose of the payment. This is the later assignment of the payment is for example on the account statement of the buyer.
        * @member {String} purpose
        */

        /**
        * Specifying an order number. Depending on the contract setting, this must be unique for each payment.
        * @member {String} order_id
        */

        /**
        * A list of items that are being purchased.
        * @member {Array.<module:model/SecupayBasketItem>} basket
        */

        /**
        * Transaction status (number)
        * @member {String} transaction_status
        */

        /**
        * Indicates whether the payment is locked for pay-out (TRUE) or not (FALSE). Standard value here is FALSE.
        * @member {Boolean} accrual
        */

        /**
        * Specifies whether a pre-authorization (\"authorization\") or instant payment ( \"sale\") is to be performed. Standard value here is \"sale\". The collection of the pre-authorized payment is made with the \"capture\" command.
        * @member {String} payment_action
        */

        /**
        * The purpose the payer needs to use for his transfer
        * @member {String} transfer_purpose
        */

        /**
        * @member {module:model/SecupayTransactionProductModelTransferAccount} transfer_account
        */

        /**
        * The customer object
        * @member {module:model/PaymentCustomersProductModel} customer
        */

        /**
        * @member {module:model/SecupayTransactionProductModelUsedPaymentInstrument} used_payment_instrument
        */

        /**
        * @member {module:model/SecupayTransactionProductModelRedirectUrl} redirect_url
        */

        /**
        * The url of the payment checkout iframe
        * @member {String} iframe_url
        */

        /**
        * The container object
        * @member {module:model/PaymentContainersProductModel} container
        */

        /**
        * A list of sub-transactions (for mixed basket)
        * @member {Array.<module:model/SecupaySubTransactionProductModel>} sub_transactions
        */

    }]);

    return SecupayTransactionProductModel;
}();

exports.default = SecupayTransactionProductModel;
},{"../ApiClient":21,"./PaymentContainersProductModel":119,"./PaymentCustomersProductModel":129,"./SecupayBasketItem":149,"./SecupaySubTransactionProductModel":150,"./SecupayTransactionProductModelRedirectUrl":162,"./SecupayTransactionProductModelTransferAccount":163,"./SecupayTransactionProductModelUsedPaymentInstrument":164}],162:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The SecupayTransactionProductModelRedirectUrl model module.
* @module model/SecupayTransactionProductModelRedirectUrl
*/
SecupayTransactionProductModelRedirectUrl = function () {
    /**
    * Constructs a new <code>SecupayTransactionProductModelRedirectUrl</code>.
    * A list of redirect urls used for the payment checkout page
    * @alias module:model/SecupayTransactionProductModelRedirectUrl
    * @class
    */

    function SecupayTransactionProductModelRedirectUrl() {
        _classCallCheck(this, SecupayTransactionProductModelRedirectUrl);

        this.iframe_url = undefined;
        this.url_success = undefined;
        this.url_failure = undefined;
        this.url_push = undefined;
    }

    /**
    * Constructs a <code>SecupayTransactionProductModelRedirectUrl</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SecupayTransactionProductModelRedirectUrl} obj Optional instance to populate.
    * @return {module:model/SecupayTransactionProductModelRedirectUrl} The populated <code>SecupayTransactionProductModelRedirectUrl</code> instance.
    */


    _createClass(SecupayTransactionProductModelRedirectUrl, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new SecupayTransactionProductModelRedirectUrl();

                if (data.hasOwnProperty('iframe_url')) {
                    obj['iframe_url'] = _ApiClient2.default.convertToType(data['iframe_url'], 'String');
                }
                if (data.hasOwnProperty('url_success')) {
                    obj['url_success'] = _ApiClient2.default.convertToType(data['url_success'], 'String');
                }
                if (data.hasOwnProperty('url_failure')) {
                    obj['url_failure'] = _ApiClient2.default.convertToType(data['url_failure'], 'String');
                }
                if (data.hasOwnProperty('url_push')) {
                    obj['url_push'] = _ApiClient2.default.convertToType(data['url_push'], 'String');
                }
            }
            return obj;
        }

        /**
        * The url of the payment checkout iframe
        * @member {String} iframe_url
        */

        /**
        * After successfully entering the cash data of the payer is returned to this page.
        * @member {String} url_success
        */

        /**
        * After canceling or on errors the payer will be redirected to this page and can select there an another payment method.
        * @member {String} url_failure
        */

        /**
        * The secupay system will be send status change notifications to this URL.
        * @member {String} url_push
        */

    }]);

    return SecupayTransactionProductModelRedirectUrl;
}();

exports.default = SecupayTransactionProductModelRedirectUrl;
},{"../ApiClient":21}],163:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The SecupayTransactionProductModelTransferAccount model module.
* @module model/SecupayTransactionProductModelTransferAccount
*/
SecupayTransactionProductModelTransferAccount = function () {
    /**
    * Constructs a new <code>SecupayTransactionProductModelTransferAccount</code>.
    * The bank account the payer needs to use for his transfer
    * @alias module:model/SecupayTransactionProductModelTransferAccount
    * @class
    */

    function SecupayTransactionProductModelTransferAccount() {
        _classCallCheck(this, SecupayTransactionProductModelTransferAccount);

        this.iban = undefined;
        this.bic = undefined;
        this.accountnumber = undefined;
        this.bankcode = undefined;
        this.account_owner = undefined;
    }

    /**
    * Constructs a <code>SecupayTransactionProductModelTransferAccount</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SecupayTransactionProductModelTransferAccount} obj Optional instance to populate.
    * @return {module:model/SecupayTransactionProductModelTransferAccount} The populated <code>SecupayTransactionProductModelTransferAccount</code> instance.
    */


    _createClass(SecupayTransactionProductModelTransferAccount, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new SecupayTransactionProductModelTransferAccount();

                if (data.hasOwnProperty('iban')) {
                    obj['iban'] = _ApiClient2.default.convertToType(data['iban'], 'String');
                }
                if (data.hasOwnProperty('bic')) {
                    obj['bic'] = _ApiClient2.default.convertToType(data['bic'], 'String');
                }
                if (data.hasOwnProperty('accountnumber')) {
                    obj['accountnumber'] = _ApiClient2.default.convertToType(data['accountnumber'], 'String');
                }
                if (data.hasOwnProperty('bankcode')) {
                    obj['bankcode'] = _ApiClient2.default.convertToType(data['bankcode'], 'String');
                }
                if (data.hasOwnProperty('account_owner')) {
                    obj['account_owner'] = _ApiClient2.default.convertToType(data['account_owner'], 'String');
                }
            }
            return obj;
        }

        /**
        * IBAN
        * @member {String} iban
        */

        /**
        * BIC
        * @member {String} bic
        */

        /**
        * Bank account number
        * @member {String} accountnumber
        */

        /**
        * The name of the bank institute
        * @member {String} bankcode
        */

        /**
        * The owner of bank account
        * @member {String} account_owner
        */

    }]);

    return SecupayTransactionProductModelTransferAccount;
}();

exports.default = SecupayTransactionProductModelTransferAccount;
},{"../ApiClient":21}],164:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _BankAccountDescriptor = require('./BankAccountDescriptor');

var _BankAccountDescriptor2 = _interopRequireDefault(_BankAccountDescriptor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The SecupayTransactionProductModelUsedPaymentInstrument model module.
* @module model/SecupayTransactionProductModelUsedPaymentInstrument
*/
SecupayTransactionProductModelUsedPaymentInstrument = function () {
    /**
    * Constructs a new <code>SecupayTransactionProductModelUsedPaymentInstrument</code>.
    * The payment data which has the payer used (like bank account, credit card, ...). This data is always masked.
    * @alias module:model/SecupayTransactionProductModelUsedPaymentInstrument
    * @class
    */

    function SecupayTransactionProductModelUsedPaymentInstrument() {
        _classCallCheck(this, SecupayTransactionProductModelUsedPaymentInstrument);

        this.type = undefined;
        this.data = undefined;
    }

    /**
    * Constructs a <code>SecupayTransactionProductModelUsedPaymentInstrument</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SecupayTransactionProductModelUsedPaymentInstrument} obj Optional instance to populate.
    * @return {module:model/SecupayTransactionProductModelUsedPaymentInstrument} The populated <code>SecupayTransactionProductModelUsedPaymentInstrument</code> instance.
    */


    _createClass(SecupayTransactionProductModelUsedPaymentInstrument, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new SecupayTransactionProductModelUsedPaymentInstrument();

                if (data.hasOwnProperty('type')) {
                    obj['type'] = _ApiClient2.default.convertToType(data['type'], 'String');
                }
                if (data.hasOwnProperty('data')) {
                    obj['data'] = _BankAccountDescriptor2.default.constructFromObject(data['data']);
                }
            }
            return obj;
        }

        /**
        * The type of the payment instrument data, like: 'bank_account' or 'credit_card'
        * @member {String} type
        */

        /**
        * Holds the payment instrument data
        * @member {module:model/BankAccountDescriptor} data
        */

    }]);

    return SecupayTransactionProductModelUsedPaymentInstrument;
}();

exports.default = SecupayTransactionProductModelUsedPaymentInstrument;
},{"../ApiClient":21,"./BankAccountDescriptor":53}],165:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The SecupayTransactionReverseAccrualDTO model module.
* @module model/SecupayTransactionReverseAccrualDTO
*/
SecupayTransactionReverseAccrualDTO = function () {
    /**
    * Constructs a new <code>SecupayTransactionReverseAccrualDTO</code>.
    * @alias module:model/SecupayTransactionReverseAccrualDTO
    * @class
    */

    function SecupayTransactionReverseAccrualDTO() {
        _classCallCheck(this, SecupayTransactionReverseAccrualDTO);

        this.accrual = false;
    }

    /**
    * Constructs a <code>SecupayTransactionReverseAccrualDTO</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SecupayTransactionReverseAccrualDTO} obj Optional instance to populate.
    * @return {module:model/SecupayTransactionReverseAccrualDTO} The populated <code>SecupayTransactionReverseAccrualDTO</code> instance.
    */


    _createClass(SecupayTransactionReverseAccrualDTO, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new SecupayTransactionReverseAccrualDTO();

                if (data.hasOwnProperty('accrual')) {
                    obj['accrual'] = _ApiClient2.default.convertToType(data['accrual'], 'Boolean');
                }
            }
            return obj;
        }

        /**
        * Indicates whether the payment is locked for pay-out (TRUE) or not (FALSE).
        * @member {Boolean} accrual
        * @default false
        */

    }]);

    return SecupayTransactionReverseAccrualDTO;
}();

exports.default = SecupayTransactionReverseAccrualDTO;
},{"../ApiClient":21}],166:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The SecupayTransactionSetShippingInformationDTO model module.
* @module model/SecupayTransactionSetShippingInformationDTO
*/
SecupayTransactionSetShippingInformationDTO = function () {
    /**
    * Constructs a new <code>SecupayTransactionSetShippingInformationDTO</code>.
    * @alias module:model/SecupayTransactionSetShippingInformationDTO
    * @class
    */

    function SecupayTransactionSetShippingInformationDTO() {
        _classCallCheck(this, SecupayTransactionSetShippingInformationDTO);

        this.carrier = undefined;
        this.tracking_id = undefined;
        this.invoice_number = undefined;
    }

    /**
    * Constructs a <code>SecupayTransactionSetShippingInformationDTO</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SecupayTransactionSetShippingInformationDTO} obj Optional instance to populate.
    * @return {module:model/SecupayTransactionSetShippingInformationDTO} The populated <code>SecupayTransactionSetShippingInformationDTO</code> instance.
    */


    _createClass(SecupayTransactionSetShippingInformationDTO, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new SecupayTransactionSetShippingInformationDTO();

                if (data.hasOwnProperty('carrier')) {
                    obj['carrier'] = _ApiClient2.default.convertToType(data['carrier'], 'String');
                }
                if (data.hasOwnProperty('tracking_id')) {
                    obj['tracking_id'] = _ApiClient2.default.convertToType(data['tracking_id'], 'String');
                }
                if (data.hasOwnProperty('invoice_number')) {
                    obj['invoice_number'] = _ApiClient2.default.convertToType(data['invoice_number'], 'String');
                }
            }
            return obj;
        }

        /**
        * Shipping provider name
        * @member {String} carrier
        */

        /**
        * Tracking-ID
        * @member {String} tracking_id
        */

        /**
        * Merchants invoice number
        * @member {String} invoice_number
        */

    }]);

    return SecupayTransactionSetShippingInformationDTO;
}();

exports.default = SecupayTransactionSetShippingInformationDTO;
},{"../ApiClient":21}],167:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _SecupayBasketItem = require('./SecupayBasketItem');

var _SecupayBasketItem2 = _interopRequireDefault(_SecupayBasketItem);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The SecupayTransactionUpdateBasketDTO model module.
* @module model/SecupayTransactionUpdateBasketDTO
*/
SecupayTransactionUpdateBasketDTO = function () {
    /**
    * Constructs a new <code>SecupayTransactionUpdateBasketDTO</code>.
    * @alias module:model/SecupayTransactionUpdateBasketDTO
    * @class
    */

    function SecupayTransactionUpdateBasketDTO() {
        _classCallCheck(this, SecupayTransactionUpdateBasketDTO);

        this.contract = undefined;
        this.basket = undefined;
    }

    /**
    * Constructs a <code>SecupayTransactionUpdateBasketDTO</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SecupayTransactionUpdateBasketDTO} obj Optional instance to populate.
    * @return {module:model/SecupayTransactionUpdateBasketDTO} The populated <code>SecupayTransactionUpdateBasketDTO</code> instance.
    */


    _createClass(SecupayTransactionUpdateBasketDTO, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new SecupayTransactionUpdateBasketDTO();

                if (data.hasOwnProperty('contract')) {
                    obj['contract'] = _ApiClient2.default.convertToType(data['contract'], Object);
                }
                if (data.hasOwnProperty('basket')) {
                    obj['basket'] = _ApiClient2.default.convertToType(data['basket'], [_SecupayBasketItem2.default]);
                }
            }
            return obj;
        }

        /**
        * The payment contract object
        * @member {Object} contract
        */

        /**
        * A list of items that are being purchased.
        * @member {Array.<module:model/SecupayBasketItem>} basket
        */

    }]);

    return SecupayTransactionUpdateBasketDTO;
}();

exports.default = SecupayTransactionUpdateBasketDTO;
},{"../ApiClient":21,"./SecupayBasketItem":149}],168:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The SmartDeviceProductsEnabled model module.
* @module model/SmartDeviceProductsEnabled
*/
SmartDeviceProductsEnabled = function () {
    /**
    * Constructs a new <code>SmartDeviceProductsEnabled</code>.
    * @alias module:model/SmartDeviceProductsEnabled
    * @class
    */

    function SmartDeviceProductsEnabled() {
        _classCallCheck(this, SmartDeviceProductsEnabled);

        this.enabled = undefined;
    }

    /**
    * Constructs a <code>SmartDeviceProductsEnabled</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SmartDeviceProductsEnabled} obj Optional instance to populate.
    * @return {module:model/SmartDeviceProductsEnabled} The populated <code>SmartDeviceProductsEnabled</code> instance.
    */


    _createClass(SmartDeviceProductsEnabled, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new SmartDeviceProductsEnabled();

                if (data.hasOwnProperty('enabled')) {
                    obj['enabled'] = _ApiClient2.default.convertToType(data['enabled'], 'Boolean');
                }
            }
            return obj;
        }

        /**
        * Enabled
        * @member {Boolean} enabled
        */

    }]);

    return SmartDeviceProductsEnabled;
}();

exports.default = SmartDeviceProductsEnabled;
},{"../ApiClient":21}],169:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The SmartDeviceProductsPrepaid model module.
* @module model/SmartDeviceProductsPrepaid
*/
SmartDeviceProductsPrepaid = function () {
    /**
    * Constructs a new <code>SmartDeviceProductsPrepaid</code>.
    * @alias module:model/SmartDeviceProductsPrepaid
    * @class
    */

    function SmartDeviceProductsPrepaid() {
        _classCallCheck(this, SmartDeviceProductsPrepaid);

        this.enabled = undefined;
        this.simulate_force = undefined;
        this.demo_force = undefined;
        this.vtc_tid = undefined;
    }

    /**
    * Constructs a <code>SmartDeviceProductsPrepaid</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SmartDeviceProductsPrepaid} obj Optional instance to populate.
    * @return {module:model/SmartDeviceProductsPrepaid} The populated <code>SmartDeviceProductsPrepaid</code> instance.
    */


    _createClass(SmartDeviceProductsPrepaid, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new SmartDeviceProductsPrepaid();

                if (data.hasOwnProperty('enabled')) {
                    obj['enabled'] = _ApiClient2.default.convertToType(data['enabled'], 'Boolean');
                }
                if (data.hasOwnProperty('simulate_force')) {
                    obj['simulate_force'] = _ApiClient2.default.convertToType(data['simulate_force'], 'Boolean');
                }
                if (data.hasOwnProperty('demo_force')) {
                    obj['demo_force'] = _ApiClient2.default.convertToType(data['demo_force'], 'Boolean');
                }
                if (data.hasOwnProperty('vtc_tid')) {
                    obj['vtc_tid'] = _ApiClient2.default.convertToType(data['vtc_tid'], 'String');
                }
            }
            return obj;
        }

        /**
        * Enabled
        * @member {Boolean} enabled
        */

        /**
        * Simulate force
        * @member {Boolean} simulate_force
        */

        /**
        * Demo force
        * @member {Boolean} demo_force
        */

        /**
        * Vtc tid
        * @member {String} vtc_tid
        */

    }]);

    return SmartDeviceProductsPrepaid;
}();

exports.default = SmartDeviceProductsPrepaid;
},{"../ApiClient":21}],170:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The SmartDevicesDTO model module.
* @module model/SmartDevicesDTO
*/
SmartDevicesDTO = function () {
    /**
    * Constructs a new <code>SmartDevicesDTO</code>.
    * @alias module:model/SmartDevicesDTO
    * @class
    */

    function SmartDevicesDTO() {
        _classCallCheck(this, SmartDevicesDTO);

        this.merchant = undefined;
        this.store = undefined;
        this.terminal = undefined;
        this.vendor = undefined;
        this.vendor_uid = undefined;
        this.type = undefined;
        this.description = undefined;
        this.products = undefined;
        this.base_version = undefined;
        this.terminal_type = undefined;
    }

    /**
    * Constructs a <code>SmartDevicesDTO</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SmartDevicesDTO} obj Optional instance to populate.
    * @return {module:model/SmartDevicesDTO} The populated <code>SmartDevicesDTO</code> instance.
    */


    _createClass(SmartDevicesDTO, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new SmartDevicesDTO();

                if (data.hasOwnProperty('merchant')) {
                    obj['merchant'] = _ApiClient2.default.convertToType(data['merchant'], 'String');
                }
                if (data.hasOwnProperty('store')) {
                    obj['store'] = _ApiClient2.default.convertToType(data['store'], 'String');
                }
                if (data.hasOwnProperty('terminal')) {
                    obj['terminal'] = _ApiClient2.default.convertToType(data['terminal'], 'String');
                }
                if (data.hasOwnProperty('vendor')) {
                    obj['vendor'] = _ApiClient2.default.convertToType(data['vendor'], 'String');
                }
                if (data.hasOwnProperty('vendor_uid')) {
                    obj['vendor_uid'] = _ApiClient2.default.convertToType(data['vendor_uid'], 'String');
                }
                if (data.hasOwnProperty('type')) {
                    obj['type'] = _ApiClient2.default.convertToType(data['type'], 'String');
                }
                if (data.hasOwnProperty('description')) {
                    obj['description'] = _ApiClient2.default.convertToType(data['description'], 'String');
                }
                if (data.hasOwnProperty('products')) {
                    obj['products'] = _ApiClient2.default.convertToType(data['products'], ['String']);
                }
                if (data.hasOwnProperty('base_version')) {
                    obj['base_version'] = _ApiClient2.default.convertToType(data['base_version'], 'String');
                }
                if (data.hasOwnProperty('terminal_type')) {
                    obj['terminal_type'] = _ApiClient2.default.convertToType(data['terminal_type'], 'String');
                }
            }
            return obj;
        }

        /**
        * Merchant
        * @member {String} merchant
        */

        /**
        * Store
        * @member {String} store
        */

        /**
        * Terminal
        * @member {String} terminal
        */

        /**
        * Vendor
        * @member {String} vendor
        */

        /**
        * Vendor uid
        * @member {String} vendor_uid
        */

        /**
        * Type
        * @member {String} type
        */

        /**
        * Description
        * @member {String} description
        */

        /**
        * Products
        * @member {Array.<String>} products
        */

        /**
        * Base version
        * @member {String} base_version
        */

        /**
        * Terminal type
        * @member {String} terminal_type
        */

    }]);

    return SmartDevicesDTO;
}();

exports.default = SmartDevicesDTO;
},{"../ApiClient":21}],171:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The SmartDevicesDTOPrepaidTid model module.
* @module model/SmartDevicesDTOPrepaidTid
*/
SmartDevicesDTOPrepaidTid = function () {
    /**
    * Constructs a new <code>SmartDevicesDTOPrepaidTid</code>.
    * @alias module:model/SmartDevicesDTOPrepaidTid
    * @class
    */

    function SmartDevicesDTOPrepaidTid() {
        _classCallCheck(this, SmartDevicesDTOPrepaidTid);

        this.tid = undefined;
        this.force = undefined;
    }

    /**
    * Constructs a <code>SmartDevicesDTOPrepaidTid</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SmartDevicesDTOPrepaidTid} obj Optional instance to populate.
    * @return {module:model/SmartDevicesDTOPrepaidTid} The populated <code>SmartDevicesDTOPrepaidTid</code> instance.
    */


    _createClass(SmartDevicesDTOPrepaidTid, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new SmartDevicesDTOPrepaidTid();

                if (data.hasOwnProperty('tid')) {
                    obj['tid'] = _ApiClient2.default.convertToType(data['tid'], 'String');
                }
                if (data.hasOwnProperty('force')) {
                    obj['force'] = _ApiClient2.default.convertToType(data['force'], 'Boolean');
                }
            }
            return obj;
        }

        /**
        * Tid
        * @member {String} tid
        */

        /**
        * Force
        * @member {Boolean} force
        */

    }]);

    return SmartDevicesDTOPrepaidTid;
}();

exports.default = SmartDevicesDTOPrepaidTid;
},{"../ApiClient":21}],172:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The SmartDevicesDTOSecubaseConfig model module.
* @module model/SmartDevicesDTOSecubaseConfig
*/
SmartDevicesDTOSecubaseConfig = function () {
    /**
    * Constructs a new <code>SmartDevicesDTOSecubaseConfig</code>.
    * @alias module:model/SmartDevicesDTOSecubaseConfig
    * @class
    */

    function SmartDevicesDTOSecubaseConfig() {
        _classCallCheck(this, SmartDevicesDTOSecubaseConfig);

        this.secubaseVersion = undefined;
        this.baseVersion = undefined;
        this.oaiVersion = undefined;
    }

    /**
    * Constructs a <code>SmartDevicesDTOSecubaseConfig</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SmartDevicesDTOSecubaseConfig} obj Optional instance to populate.
    * @return {module:model/SmartDevicesDTOSecubaseConfig} The populated <code>SmartDevicesDTOSecubaseConfig</code> instance.
    */


    _createClass(SmartDevicesDTOSecubaseConfig, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new SmartDevicesDTOSecubaseConfig();

                if (data.hasOwnProperty('secubaseVersion')) {
                    obj['secubaseVersion'] = _ApiClient2.default.convertToType(data['secubaseVersion'], 'String');
                }
                if (data.hasOwnProperty('baseVersion')) {
                    obj['baseVersion'] = _ApiClient2.default.convertToType(data['baseVersion'], 'String');
                }
                if (data.hasOwnProperty('oaiVersion')) {
                    obj['oaiVersion'] = _ApiClient2.default.convertToType(data['oaiVersion'], 'String');
                }
            }
            return obj;
        }

        /**
        * Secubase version
        * @member {String} secubaseVersion
        */

        /**
        * Base version
        * @member {String} baseVersion
        */

        /**
        * Oai version
        * @member {String} oaiVersion
        */

    }]);

    return SmartDevicesDTOSecubaseConfig;
}();

exports.default = SmartDevicesDTOSecubaseConfig;
},{"../ApiClient":21}],173:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The SmartDevicesDevice model module.
* @module model/SmartDevicesDevice
*/
SmartDevicesDevice = function () {
    /**
    * Constructs a new <code>SmartDevicesDevice</code>.
    * @alias module:model/SmartDevicesDevice
    * @class
    */

    function SmartDevicesDevice() {
        _classCallCheck(this, SmartDevicesDevice);

        this.object = undefined;
        this.id = undefined;
        this.serial_number = undefined;
    }

    /**
    * Constructs a <code>SmartDevicesDevice</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SmartDevicesDevice} obj Optional instance to populate.
    * @return {module:model/SmartDevicesDevice} The populated <code>SmartDevicesDevice</code> instance.
    */


    _createClass(SmartDevicesDevice, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new SmartDevicesDevice();

                if (data.hasOwnProperty('object')) {
                    obj['object'] = _ApiClient2.default.convertToType(data['object'], 'String');
                }
                if (data.hasOwnProperty('id')) {
                    obj['id'] = _ApiClient2.default.convertToType(data['id'], 'String');
                }
                if (data.hasOwnProperty('serial_number')) {
                    obj['serial_number'] = _ApiClient2.default.convertToType(data['serial_number'], 'String');
                }
            }
            return obj;
        }

        /**
        * Object of device
        * @member {String} object
        */

        /**
        * Id of device
        * @member {String} id
        */

        /**
        * Serial number
        * @member {String} serial_number
        */

    }]);

    return SmartDevicesDevice;
}();

exports.default = SmartDevicesDevice;
},{"../ApiClient":21}],174:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _SmartDevicesProductModel = require('./SmartDevicesProductModel');

var _SmartDevicesProductModel2 = _interopRequireDefault(_SmartDevicesProductModel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The SmartDevicesList model module.
* @module model/SmartDevicesList
*/
SmartDevicesList = function () {
    /**
    * Constructs a new <code>SmartDevicesList</code>.
    * @alias module:model/SmartDevicesList
    * @class
    */

    function SmartDevicesList() {
        _classCallCheck(this, SmartDevicesList);

        this.count = undefined;
        this.data = undefined;
    }

    /**
    * Constructs a <code>SmartDevicesList</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SmartDevicesList} obj Optional instance to populate.
    * @return {module:model/SmartDevicesList} The populated <code>SmartDevicesList</code> instance.
    */


    _createClass(SmartDevicesList, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new SmartDevicesList();

                if (data.hasOwnProperty('count')) {
                    obj['count'] = _ApiClient2.default.convertToType(data['count'], 'Number');
                }
                if (data.hasOwnProperty('data')) {
                    obj['data'] = _ApiClient2.default.convertToType(data['data'], [_SmartDevicesProductModel2.default]);
                }
            }
            return obj;
        }

        /**
        * Number of existing smart devices
        * @member {Number} count
        */

        /**
        * GET Smart/Devices
        * @member {Array.<module:model/SmartDevicesProductModel>} data
        */

    }]);

    return SmartDevicesList;
}();

exports.default = SmartDevicesList;
},{"../ApiClient":21,"./SmartDevicesProductModel":176}],175:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _SmartDevicesProductModel = require('./SmartDevicesProductModel');

var _SmartDevicesProductModel2 = _interopRequireDefault(_SmartDevicesProductModel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The SmartDevicesList1 model module.
* @module model/SmartDevicesList1
*/
SmartDevicesList1 = function () {
    /**
    * Constructs a new <code>SmartDevicesList1</code>.
    * @alias module:model/SmartDevicesList1
    * @class
    */

    function SmartDevicesList1() {
        _classCallCheck(this, SmartDevicesList1);

        this.count = undefined;
        this.data = undefined;
    }

    /**
    * Constructs a <code>SmartDevicesList1</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SmartDevicesList1} obj Optional instance to populate.
    * @return {module:model/SmartDevicesList1} The populated <code>SmartDevicesList1</code> instance.
    */


    _createClass(SmartDevicesList1, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new SmartDevicesList1();

                if (data.hasOwnProperty('count')) {
                    obj['count'] = _ApiClient2.default.convertToType(data['count'], 'Number');
                }
                if (data.hasOwnProperty('data')) {
                    obj['data'] = _ApiClient2.default.convertToType(data['data'], [_SmartDevicesProductModel2.default]);
                }
            }
            return obj;
        }

        /**
        * Number of existing smart devices
        * @member {Number} count
        */

        /**
        * GET Smart/Devices/{smartDeviceId}/routing/type/{type}
        * @member {Array.<module:model/SmartDevicesProductModel>} data
        */

    }]);

    return SmartDevicesList1;
}();

exports.default = SmartDevicesList1;
},{"../ApiClient":21,"./SmartDevicesProductModel":176}],176:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _ProductInstanceUID = require('./ProductInstanceUID');

var _ProductInstanceUID2 = _interopRequireDefault(_ProductInstanceUID);

var _SmartDevicesDevice = require('./SmartDevicesDevice');

var _SmartDevicesDevice2 = _interopRequireDefault(_SmartDevicesDevice);

var _SmartDevicesProducts = require('./SmartDevicesProducts');

var _SmartDevicesProducts2 = _interopRequireDefault(_SmartDevicesProducts);

var _Store = require('./Store');

var _Store2 = _interopRequireDefault(_Store);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The SmartDevicesProductModel model module.
* @module model/SmartDevicesProductModel
*/
SmartDevicesProductModel = function () {
    /**
    * Constructs a new <code>SmartDevicesProductModel</code>.
    * @alias module:model/SmartDevicesProductModel
    * @class
    */

    function SmartDevicesProductModel() {
        _classCallCheck(this, SmartDevicesProductModel);

        this.object = undefined;
        this.id = undefined;
        this.merchant = undefined;
        this.store = undefined;
        this.vendor = undefined;
        this.vendor_uid = undefined;
        this.type = undefined;
        this.device = undefined;
        this.routing = undefined;
        this.user_pin = undefined;
        this.products = undefined;
        this.description = undefined;
        this.idle_screen_register = undefined;
        this.idle_screen_terminal = undefined;
        this.created = undefined;
        this.online = undefined;
        this.terminal_type = undefined;
        this.base_version = undefined;
    }

    /**
    * Constructs a <code>SmartDevicesProductModel</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SmartDevicesProductModel} obj Optional instance to populate.
    * @return {module:model/SmartDevicesProductModel} The populated <code>SmartDevicesProductModel</code> instance.
    */


    _createClass(SmartDevicesProductModel, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new SmartDevicesProductModel();

                if (data.hasOwnProperty('object')) {
                    obj['object'] = _ApiClient2.default.convertToType(data['object'], 'String');
                }
                if (data.hasOwnProperty('id')) {
                    obj['id'] = _ApiClient2.default.convertToType(data['id'], 'String');
                }
                if (data.hasOwnProperty('merchant')) {
                    obj['merchant'] = _ProductInstanceUID2.default.constructFromObject(data['merchant']);
                }
                if (data.hasOwnProperty('store')) {
                    obj['store'] = _Store2.default.constructFromObject(data['store']);
                }
                if (data.hasOwnProperty('vendor')) {
                    obj['vendor'] = _ApiClient2.default.convertToType(data['vendor'], 'String');
                }
                if (data.hasOwnProperty('vendor_uid')) {
                    obj['vendor_uid'] = _ApiClient2.default.convertToType(data['vendor_uid'], 'String');
                }
                if (data.hasOwnProperty('type')) {
                    obj['type'] = _ApiClient2.default.convertToType(data['type'], 'String');
                }
                if (data.hasOwnProperty('device')) {
                    obj['device'] = _SmartDevicesDevice2.default.constructFromObject(data['device']);
                }
                if (data.hasOwnProperty('routing')) {
                    obj['routing'] = _ProductInstanceUID2.default.constructFromObject(data['routing']);
                }
                if (data.hasOwnProperty('user_pin')) {
                    obj['user_pin'] = _ApiClient2.default.convertToType(data['user_pin'], 'String');
                }
                if (data.hasOwnProperty('products')) {
                    obj['products'] = _SmartDevicesProducts2.default.constructFromObject(data['products']);
                }
                if (data.hasOwnProperty('description')) {
                    obj['description'] = _ApiClient2.default.convertToType(data['description'], 'String');
                }
                if (data.hasOwnProperty('idle_screen_register')) {
                    obj['idle_screen_register'] = _ApiClient2.default.convertToType(data['idle_screen_register'], 'String');
                }
                if (data.hasOwnProperty('idle_screen_terminal')) {
                    obj['idle_screen_terminal'] = _ApiClient2.default.convertToType(data['idle_screen_terminal'], 'String');
                }
                if (data.hasOwnProperty('created')) {
                    obj['created'] = _ApiClient2.default.convertToType(data['created'], 'Date');
                }
                if (data.hasOwnProperty('online')) {
                    obj['online'] = _ApiClient2.default.convertToType(data['online'], 'Boolean');
                }
                if (data.hasOwnProperty('terminal_type')) {
                    obj['terminal_type'] = _ApiClient2.default.convertToType(data['terminal_type'], 'String');
                }
                if (data.hasOwnProperty('base_version')) {
                    obj['base_version'] = _ApiClient2.default.convertToType(data['base_version'], 'String');
                }
            }
            return obj;
        }

        /**
        * Object of smart device
        * @member {String} object
        */

        /**
        * Id of smart device
        * @member {String} id
        */

        /**
        * Merchant
        * @member {module:model/ProductInstanceUID} merchant
        */

        /**
        * Store
        * @member {module:model/Store} store
        */

        /**
        * Vendor
        * @member {String} vendor
        */

        /**
        * Vendor uid
        * @member {String} vendor_uid
        */

        /**
        * Type
        * @member {String} type
        */

        /**
        * Device
        * @member {module:model/SmartDevicesDevice} device
        */

        /**
        * Routing
        * @member {module:model/ProductInstanceUID} routing
        */

        /**
        * User pin
        * @member {String} user_pin
        */

        /**
        * Products
        * @member {module:model/SmartDevicesProducts} products
        */

        /**
        * Description
        * @member {String} description
        */

        /**
        * Idle screen register
        * @member {String} idle_screen_register
        */

        /**
        * Idle screen terminal
        * @member {String} idle_screen_terminal
        */

        /**
        * Created at date
        * @member {Date} created
        */

        /**
        * Online
        * @member {Boolean} online
        */

        /**
        * Terminal type
        * @member {String} terminal_type
        */

        /**
        * Base version
        * @member {String} base_version
        */

    }]);

    return SmartDevicesProductModel;
}();

exports.default = SmartDevicesProductModel;
},{"../ApiClient":21,"./ProductInstanceUID":145,"./SmartDevicesDevice":173,"./SmartDevicesProducts":177,"./Store":197}],177:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _SmartDeviceProductsEnabled = require('./SmartDeviceProductsEnabled');

var _SmartDeviceProductsEnabled2 = _interopRequireDefault(_SmartDeviceProductsEnabled);

var _SmartDeviceProductsPrepaid = require('./SmartDeviceProductsPrepaid');

var _SmartDeviceProductsPrepaid2 = _interopRequireDefault(_SmartDeviceProductsPrepaid);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The SmartDevicesProducts model module.
* @module model/SmartDevicesProducts
*/
SmartDevicesProducts = function () {
    /**
    * Constructs a new <code>SmartDevicesProducts</code>.
    * @alias module:model/SmartDevicesProducts
    * @class
    */

    function SmartDevicesProducts() {
        _classCallCheck(this, SmartDevicesProducts);

        this.loyalty = undefined;
        this.smart = undefined;
        this.cashreg = undefined;
        this.collect = undefined;
        this.showcase = undefined;
        this.vtm = undefined;
        this.prepaid = undefined;
    }

    /**
    * Constructs a <code>SmartDevicesProducts</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SmartDevicesProducts} obj Optional instance to populate.
    * @return {module:model/SmartDevicesProducts} The populated <code>SmartDevicesProducts</code> instance.
    */


    _createClass(SmartDevicesProducts, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new SmartDevicesProducts();

                if (data.hasOwnProperty('loyalty')) {
                    obj['loyalty'] = _SmartDeviceProductsEnabled2.default.constructFromObject(data['loyalty']);
                }
                if (data.hasOwnProperty('smart')) {
                    obj['smart'] = _SmartDeviceProductsEnabled2.default.constructFromObject(data['smart']);
                }
                if (data.hasOwnProperty('cashreg')) {
                    obj['cashreg'] = _SmartDeviceProductsEnabled2.default.constructFromObject(data['cashreg']);
                }
                if (data.hasOwnProperty('collect')) {
                    obj['collect'] = _SmartDeviceProductsEnabled2.default.constructFromObject(data['collect']);
                }
                if (data.hasOwnProperty('showcase')) {
                    obj['showcase'] = _SmartDeviceProductsEnabled2.default.constructFromObject(data['showcase']);
                }
                if (data.hasOwnProperty('vtm')) {
                    obj['vtm'] = _SmartDeviceProductsEnabled2.default.constructFromObject(data['vtm']);
                }
                if (data.hasOwnProperty('prepaid')) {
                    obj['prepaid'] = _SmartDeviceProductsPrepaid2.default.constructFromObject(data['prepaid']);
                }
            }
            return obj;
        }

        /**
        * Loyalty
        * @member {module:model/SmartDeviceProductsEnabled} loyalty
        */

        /**
        * Smart
        * @member {module:model/SmartDeviceProductsEnabled} smart
        */

        /**
        * Cashreg
        * @member {module:model/SmartDeviceProductsEnabled} cashreg
        */

        /**
        * Collect
        * @member {module:model/SmartDeviceProductsEnabled} collect
        */

        /**
        * Showcase
        * @member {module:model/SmartDeviceProductsEnabled} showcase
        */

        /**
        * Vtm
        * @member {module:model/SmartDeviceProductsEnabled} vtm
        */

        /**
        * Prepaid
        * @member {module:model/SmartDeviceProductsPrepaid} prepaid
        */

    }]);

    return SmartDevicesProducts;
}();

exports.default = SmartDevicesProducts;
},{"../ApiClient":21,"./SmartDeviceProductsEnabled":168,"./SmartDeviceProductsPrepaid":169}],178:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _SmartDevicesSecubaseConfigLogging = require('./SmartDevicesSecubaseConfigLogging');

var _SmartDevicesSecubaseConfigLogging2 = _interopRequireDefault(_SmartDevicesSecubaseConfigLogging);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The SmartDevicesSecubaseConfig model module.
* @module model/SmartDevicesSecubaseConfig
*/
SmartDevicesSecubaseConfig = function () {
    /**
    * Constructs a new <code>SmartDevicesSecubaseConfig</code>.
    * @alias module:model/SmartDevicesSecubaseConfig
    * @class
    */

    function SmartDevicesSecubaseConfig() {
        _classCallCheck(this, SmartDevicesSecubaseConfig);

        this.apps = undefined;
        this.logging = undefined;
    }

    /**
    * Constructs a <code>SmartDevicesSecubaseConfig</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SmartDevicesSecubaseConfig} obj Optional instance to populate.
    * @return {module:model/SmartDevicesSecubaseConfig} The populated <code>SmartDevicesSecubaseConfig</code> instance.
    */


    _createClass(SmartDevicesSecubaseConfig, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new SmartDevicesSecubaseConfig();

                if (data.hasOwnProperty('apps')) {
                    obj['apps'] = _ApiClient2.default.convertToType(data['apps'], ['String']);
                }
                if (data.hasOwnProperty('logging')) {
                    obj['logging'] = _SmartDevicesSecubaseConfigLogging2.default.constructFromObject(data['logging']);
                }
            }
            return obj;
        }

        /**
        * Apps
        * @member {Array.<String>} apps
        */

        /**
        * Logging
        * @member {module:model/SmartDevicesSecubaseConfigLogging} logging
        */

    }]);

    return SmartDevicesSecubaseConfig;
}();

exports.default = SmartDevicesSecubaseConfig;
},{"../ApiClient":21,"./SmartDevicesSecubaseConfigLogging":179}],179:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _SmartDevicesSecubaseConfigLoggingFileNet = require('./SmartDevicesSecubaseConfigLoggingFileNet');

var _SmartDevicesSecubaseConfigLoggingFileNet2 = _interopRequireDefault(_SmartDevicesSecubaseConfigLoggingFileNet);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The SmartDevicesSecubaseConfigLogging model module.
* @module model/SmartDevicesSecubaseConfigLogging
*/
SmartDevicesSecubaseConfigLogging = function () {
    /**
    * Constructs a new <code>SmartDevicesSecubaseConfigLogging</code>.
    * @alias module:model/SmartDevicesSecubaseConfigLogging
    * @class
    */

    function SmartDevicesSecubaseConfigLogging() {
        _classCallCheck(this, SmartDevicesSecubaseConfigLogging);

        this.secubase = undefined;
        this.app = undefined;
    }

    /**
    * Constructs a <code>SmartDevicesSecubaseConfigLogging</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SmartDevicesSecubaseConfigLogging} obj Optional instance to populate.
    * @return {module:model/SmartDevicesSecubaseConfigLogging} The populated <code>SmartDevicesSecubaseConfigLogging</code> instance.
    */


    _createClass(SmartDevicesSecubaseConfigLogging, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new SmartDevicesSecubaseConfigLogging();

                if (data.hasOwnProperty('secubase')) {
                    obj['secubase'] = _SmartDevicesSecubaseConfigLoggingFileNet2.default.constructFromObject(data['secubase']);
                }
                if (data.hasOwnProperty('app')) {
                    obj['app'] = _SmartDevicesSecubaseConfigLoggingFileNet2.default.constructFromObject(data['app']);
                }
            }
            return obj;
        }

        /**
        * Secubase
        * @member {module:model/SmartDevicesSecubaseConfigLoggingFileNet} secubase
        */

        /**
        * App
        * @member {module:model/SmartDevicesSecubaseConfigLoggingFileNet} app
        */

    }]);

    return SmartDevicesSecubaseConfigLogging;
}();

exports.default = SmartDevicesSecubaseConfigLogging;
},{"../ApiClient":21,"./SmartDevicesSecubaseConfigLoggingFileNet":180}],180:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The SmartDevicesSecubaseConfigLoggingFileNet model module.
* @module model/SmartDevicesSecubaseConfigLoggingFileNet
*/
SmartDevicesSecubaseConfigLoggingFileNet = function () {
    /**
    * Constructs a new <code>SmartDevicesSecubaseConfigLoggingFileNet</code>.
    * @alias module:model/SmartDevicesSecubaseConfigLoggingFileNet
    * @class
    */

    function SmartDevicesSecubaseConfigLoggingFileNet() {
        _classCallCheck(this, SmartDevicesSecubaseConfigLoggingFileNet);

        this.file = undefined;
        this.net = undefined;
    }

    /**
    * Constructs a <code>SmartDevicesSecubaseConfigLoggingFileNet</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SmartDevicesSecubaseConfigLoggingFileNet} obj Optional instance to populate.
    * @return {module:model/SmartDevicesSecubaseConfigLoggingFileNet} The populated <code>SmartDevicesSecubaseConfigLoggingFileNet</code> instance.
    */


    _createClass(SmartDevicesSecubaseConfigLoggingFileNet, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new SmartDevicesSecubaseConfigLoggingFileNet();

                if (data.hasOwnProperty('file')) {
                    obj['file'] = _ApiClient2.default.convertToType(data['file'], ['String']);
                }
                if (data.hasOwnProperty('net')) {
                    obj['net'] = _ApiClient2.default.convertToType(data['net'], ['String']);
                }
            }
            return obj;
        }

        /**
        * File
        * @member {Array.<String>} file
        */

        /**
        * Net
        * @member {Array.<String>} net
        */

    }]);

    return SmartDevicesSecubaseConfigLoggingFileNet;
}();

exports.default = SmartDevicesSecubaseConfigLoggingFileNet;
},{"../ApiClient":21}],181:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _SmartTransactionsBasketProduct = require('./SmartTransactionsBasketProduct');

var _SmartTransactionsBasketProduct2 = _interopRequireDefault(_SmartTransactionsBasketProduct);

var _SmartTransactionsBasketText = require('./SmartTransactionsBasketText');

var _SmartTransactionsBasketText2 = _interopRequireDefault(_SmartTransactionsBasketText);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The SmartTransactionsBasket model module.
* @module model/SmartTransactionsBasket
*/
SmartTransactionsBasket = function () {
    /**
    * Constructs a new <code>SmartTransactionsBasket</code>.
    * @alias module:model/SmartTransactionsBasket
    * @class
    */

    function SmartTransactionsBasket() {
        _classCallCheck(this, SmartTransactionsBasket);

        this.products = undefined;
        this.texts = undefined;
    }

    /**
    * Constructs a <code>SmartTransactionsBasket</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SmartTransactionsBasket} obj Optional instance to populate.
    * @return {module:model/SmartTransactionsBasket} The populated <code>SmartTransactionsBasket</code> instance.
    */


    _createClass(SmartTransactionsBasket, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new SmartTransactionsBasket();

                if (data.hasOwnProperty('products')) {
                    obj['products'] = _ApiClient2.default.convertToType(data['products'], [_SmartTransactionsBasketProduct2.default]);
                }
                if (data.hasOwnProperty('texts')) {
                    obj['texts'] = _ApiClient2.default.convertToType(data['texts'], [_SmartTransactionsBasketText2.default]);
                }
            }
            return obj;
        }

        /**
        * Products
        * @member {Array.<module:model/SmartTransactionsBasketProduct>} products
        */

        /**
        * Texts
        * @member {Array.<module:model/SmartTransactionsBasketText>} texts
        */

    }]);

    return SmartTransactionsBasket;
}();

exports.default = SmartTransactionsBasket;
},{"../ApiClient":21,"./SmartTransactionsBasketProduct":183,"./SmartTransactionsBasketText":185}],182:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The SmartTransactionsBasketInfo model module.
* @module model/SmartTransactionsBasketInfo
*/
SmartTransactionsBasketInfo = function () {
    /**
    * Constructs a new <code>SmartTransactionsBasketInfo</code>.
    * @alias module:model/SmartTransactionsBasketInfo
    * @class
    */

    function SmartTransactionsBasketInfo() {
        _classCallCheck(this, SmartTransactionsBasketInfo);

        this.sum = undefined;
        this.gratuity = undefined;
        this.currency = undefined;
    }

    /**
    * Constructs a <code>SmartTransactionsBasketInfo</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SmartTransactionsBasketInfo} obj Optional instance to populate.
    * @return {module:model/SmartTransactionsBasketInfo} The populated <code>SmartTransactionsBasketInfo</code> instance.
    */


    _createClass(SmartTransactionsBasketInfo, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new SmartTransactionsBasketInfo();

                if (data.hasOwnProperty('sum')) {
                    obj['sum'] = _ApiClient2.default.convertToType(data['sum'], 'Number');
                }
                if (data.hasOwnProperty('gratuity')) {
                    obj['gratuity'] = _ApiClient2.default.convertToType(data['gratuity'], 'Number');
                }
                if (data.hasOwnProperty('currency')) {
                    obj['currency'] = _ApiClient2.default.convertToType(data['currency'], 'String');
                }
            }
            return obj;
        }

        /**
        * Sum
        * @member {Number} sum
        */

        /**
        * Gratuity
        * @member {Number} gratuity
        */

        /**
        * Currency
        * @member {String} currency
        */

    }]);

    return SmartTransactionsBasketInfo;
}();

exports.default = SmartTransactionsBasketInfo;
},{"../ApiClient":21}],183:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _SmartTransactionsBasketProductGroup = require('./SmartTransactionsBasketProductGroup');

var _SmartTransactionsBasketProductGroup2 = _interopRequireDefault(_SmartTransactionsBasketProductGroup);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The SmartTransactionsBasketProduct model module.
* @module model/SmartTransactionsBasketProduct
*/
SmartTransactionsBasketProduct = function () {
    /**
    * Constructs a new <code>SmartTransactionsBasketProduct</code>.
    * @alias module:model/SmartTransactionsBasketProduct
    * @class
    */

    function SmartTransactionsBasketProduct() {
        _classCallCheck(this, SmartTransactionsBasketProduct);

        this.id = undefined;
        this.parent = undefined;
        this.desc = undefined;
        this.articleNumber = undefined;
        this.ean = undefined;
        this.quantity = undefined;
        this.priceOne = undefined;
        this.tax = undefined;
        this.group = undefined;
    }

    /**
    * Constructs a <code>SmartTransactionsBasketProduct</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SmartTransactionsBasketProduct} obj Optional instance to populate.
    * @return {module:model/SmartTransactionsBasketProduct} The populated <code>SmartTransactionsBasketProduct</code> instance.
    */


    _createClass(SmartTransactionsBasketProduct, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new SmartTransactionsBasketProduct();

                if (data.hasOwnProperty('id')) {
                    obj['id'] = _ApiClient2.default.convertToType(data['id'], 'Number');
                }
                if (data.hasOwnProperty('parent')) {
                    obj['parent'] = _ApiClient2.default.convertToType(data['parent'], 'Number');
                }
                if (data.hasOwnProperty('desc')) {
                    obj['desc'] = _ApiClient2.default.convertToType(data['desc'], 'String');
                }
                if (data.hasOwnProperty('articleNumber')) {
                    obj['articleNumber'] = _ApiClient2.default.convertToType(data['articleNumber'], 'String');
                }
                if (data.hasOwnProperty('ean')) {
                    obj['ean'] = _ApiClient2.default.convertToType(data['ean'], 'String');
                }
                if (data.hasOwnProperty('quantity')) {
                    obj['quantity'] = _ApiClient2.default.convertToType(data['quantity'], 'Number');
                }
                if (data.hasOwnProperty('priceOne')) {
                    obj['priceOne'] = _ApiClient2.default.convertToType(data['priceOne'], 'Number');
                }
                if (data.hasOwnProperty('tax')) {
                    obj['tax'] = _ApiClient2.default.convertToType(data['tax'], 'Number');
                }
                if (data.hasOwnProperty('group')) {
                    obj['group'] = _ApiClient2.default.convertToType(data['group'], [_SmartTransactionsBasketProductGroup2.default]);
                }
            }
            return obj;
        }

        /**
        * Product id
        * @member {Number} id
        */

        /**
        * Parent
        * @member {Number} parent
        */

        /**
        * Desc
        * @member {String} desc
        */

        /**
        * Article number
        * @member {String} articleNumber
        */

        /**
        * Ean
        * @member {String} ean
        */

        /**
        * Quantity
        * @member {Number} quantity
        */

        /**
        * Price one
        * @member {Number} priceOne
        */

        /**
        * Tax
        * @member {Number} tax
        */

        /**
        * Group
        * @member {Array.<module:model/SmartTransactionsBasketProductGroup>} group
        */

    }]);

    return SmartTransactionsBasketProduct;
}();

exports.default = SmartTransactionsBasketProduct;
},{"../ApiClient":21,"./SmartTransactionsBasketProductGroup":184}],184:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The SmartTransactionsBasketProductGroup model module.
* @module model/SmartTransactionsBasketProductGroup
*/
SmartTransactionsBasketProductGroup = function () {
    /**
    * Constructs a new <code>SmartTransactionsBasketProductGroup</code>.
    * @alias module:model/SmartTransactionsBasketProductGroup
    * @class
    */

    function SmartTransactionsBasketProductGroup() {
        _classCallCheck(this, SmartTransactionsBasketProductGroup);

        this.id = undefined;
        this.desc = undefined;
        this.level = undefined;
    }

    /**
    * Constructs a <code>SmartTransactionsBasketProductGroup</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SmartTransactionsBasketProductGroup} obj Optional instance to populate.
    * @return {module:model/SmartTransactionsBasketProductGroup} The populated <code>SmartTransactionsBasketProductGroup</code> instance.
    */


    _createClass(SmartTransactionsBasketProductGroup, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new SmartTransactionsBasketProductGroup();

                if (data.hasOwnProperty('id')) {
                    obj['id'] = _ApiClient2.default.convertToType(data['id'], 'String');
                }
                if (data.hasOwnProperty('desc')) {
                    obj['desc'] = _ApiClient2.default.convertToType(data['desc'], 'String');
                }
                if (data.hasOwnProperty('level')) {
                    obj['level'] = _ApiClient2.default.convertToType(data['level'], 'Number');
                }
            }
            return obj;
        }

        /**
        * Group id
        * @member {String} id
        */

        /**
        * Desc
        * @member {String} desc
        */

        /**
        * Level
        * @member {Number} level
        */

    }]);

    return SmartTransactionsBasketProductGroup;
}();

exports.default = SmartTransactionsBasketProductGroup;
},{"../ApiClient":21}],185:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The SmartTransactionsBasketText model module.
* @module model/SmartTransactionsBasketText
*/
SmartTransactionsBasketText = function () {
    /**
    * Constructs a new <code>SmartTransactionsBasketText</code>.
    * @alias module:model/SmartTransactionsBasketText
    * @class
    */

    function SmartTransactionsBasketText() {
        _classCallCheck(this, SmartTransactionsBasketText);

        this.id = undefined;
        this.parent = undefined;
        this.desc = undefined;
    }

    /**
    * Constructs a <code>SmartTransactionsBasketText</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SmartTransactionsBasketText} obj Optional instance to populate.
    * @return {module:model/SmartTransactionsBasketText} The populated <code>SmartTransactionsBasketText</code> instance.
    */


    _createClass(SmartTransactionsBasketText, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new SmartTransactionsBasketText();

                if (data.hasOwnProperty('id')) {
                    obj['id'] = _ApiClient2.default.convertToType(data['id'], 'Number');
                }
                if (data.hasOwnProperty('parent')) {
                    obj['parent'] = _ApiClient2.default.convertToType(data['parent'], 'Number');
                }
                if (data.hasOwnProperty('desc')) {
                    obj['desc'] = _ApiClient2.default.convertToType(data['desc'], 'String');
                }
            }
            return obj;
        }

        /**
        * Text id
        * @member {Number} id
        */

        /**
        * Parent
        * @member {Number} parent
        */

        /**
        * Desc
        * @member {String} desc
        */

    }]);

    return SmartTransactionsBasketText;
}();

exports.default = SmartTransactionsBasketText;
},{"../ApiClient":21}],186:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The SmartTransactionsBonusProducts model module.
* @module model/SmartTransactionsBonusProducts
*/
SmartTransactionsBonusProducts = function () {
    /**
    * Constructs a new <code>SmartTransactionsBonusProducts</code>.
    * @alias module:model/SmartTransactionsBonusProducts
    * @class
    */

    function SmartTransactionsBonusProducts() {
        _classCallCheck(this, SmartTransactionsBonusProducts);

        this.id = undefined;
        this.tax = undefined;
        this.priceOne = undefined;
        this.quantity = undefined;
        this.desc = undefined;
        this.articleNumber = undefined;
        this.ean = undefined;
    }

    /**
    * Constructs a <code>SmartTransactionsBonusProducts</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SmartTransactionsBonusProducts} obj Optional instance to populate.
    * @return {module:model/SmartTransactionsBonusProducts} The populated <code>SmartTransactionsBonusProducts</code> instance.
    */


    _createClass(SmartTransactionsBonusProducts, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new SmartTransactionsBonusProducts();

                if (data.hasOwnProperty('id')) {
                    obj['id'] = _ApiClient2.default.convertToType(data['id'], 'Number');
                }
                if (data.hasOwnProperty('tax')) {
                    obj['tax'] = _ApiClient2.default.convertToType(data['tax'], 'Number');
                }
                if (data.hasOwnProperty('priceOne')) {
                    obj['priceOne'] = _ApiClient2.default.convertToType(data['priceOne'], 'Number');
                }
                if (data.hasOwnProperty('quantity')) {
                    obj['quantity'] = _ApiClient2.default.convertToType(data['quantity'], 'Number');
                }
                if (data.hasOwnProperty('desc')) {
                    obj['desc'] = _ApiClient2.default.convertToType(data['desc'], 'String');
                }
                if (data.hasOwnProperty('articleNumber')) {
                    obj['articleNumber'] = _ApiClient2.default.convertToType(data['articleNumber'], 'String');
                }
                if (data.hasOwnProperty('ean')) {
                    obj['ean'] = _ApiClient2.default.convertToType(data['ean'], 'String');
                }
            }
            return obj;
        }

        /**
        * Bonus Product ID
        * @member {Number} id
        */

        /**
        * Tax
        * @member {Number} tax
        */

        /**
        * price of one bonus product
        * @member {Number} priceOne
        */

        /**
        * amount of bonus products
        * @member {Number} quantity
        */

        /**
        * description
        * @member {String} desc
        */

        /**
        * article Number
        * @member {String} articleNumber
        */

        /**
        * ean
        * @member {String} ean
        */

    }]);

    return SmartTransactionsBonusProducts;
}();

exports.default = SmartTransactionsBonusProducts;
},{"../ApiClient":21}],187:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The SmartTransactionsCheckin model module.
* @module model/SmartTransactionsCheckin
*/
SmartTransactionsCheckin = function () {
    /**
    * Constructs a new <code>SmartTransactionsCheckin</code>.
    * @alias module:model/SmartTransactionsCheckin
    * @class
    */

    function SmartTransactionsCheckin() {
        _classCallCheck(this, SmartTransactionsCheckin);

        this.object = undefined;
        this.id = undefined;
        this.email = undefined;
    }

    /**
    * Constructs a <code>SmartTransactionsCheckin</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SmartTransactionsCheckin} obj Optional instance to populate.
    * @return {module:model/SmartTransactionsCheckin} The populated <code>SmartTransactionsCheckin</code> instance.
    */


    _createClass(SmartTransactionsCheckin, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new SmartTransactionsCheckin();

                if (data.hasOwnProperty('object')) {
                    obj['object'] = _ApiClient2.default.convertToType(data['object'], 'String');
                }
                if (data.hasOwnProperty('id')) {
                    obj['id'] = _ApiClient2.default.convertToType(data['id'], 'String');
                }
                if (data.hasOwnProperty('email')) {
                    obj['email'] = _ApiClient2.default.convertToType(data['email'], 'String');
                }
            }
            return obj;
        }

        /**
        * Object of smart transaction check in
        * @member {String} object
        */

        /**
        * Id of smart transaction check in
        * @member {String} id
        */

        /**
        * Email
        * @member {String} email
        */

    }]);

    return SmartTransactionsCheckin;
}();

exports.default = SmartTransactionsCheckin;
},{"../ApiClient":21}],188:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _ProductInstanceID = require('./ProductInstanceID');

var _ProductInstanceID2 = _interopRequireDefault(_ProductInstanceID);

var _SmartTransactionsBasket = require('./SmartTransactionsBasket');

var _SmartTransactionsBasket2 = _interopRequireDefault(_SmartTransactionsBasket);

var _SmartTransactionsBasketInfo = require('./SmartTransactionsBasketInfo');

var _SmartTransactionsBasketInfo2 = _interopRequireDefault(_SmartTransactionsBasketInfo);

var _SmartTransactionsIdent = require('./SmartTransactionsIdent');

var _SmartTransactionsIdent2 = _interopRequireDefault(_SmartTransactionsIdent);

var _SmartTransactionsPickupOptions = require('./SmartTransactionsPickupOptions');

var _SmartTransactionsPickupOptions2 = _interopRequireDefault(_SmartTransactionsPickupOptions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The SmartTransactionsDTO model module.
* @module model/SmartTransactionsDTO
*/
SmartTransactionsDTO = function () {
    /**
    * Constructs a new <code>SmartTransactionsDTO</code>.
    * @alias module:model/SmartTransactionsDTO
    * @class
    */

    function SmartTransactionsDTO() {
        _classCallCheck(this, SmartTransactionsDTO);

        this.merchant = undefined;
        this.marketplace_contract = undefined;
        this.order_option = undefined;
        this.status = undefined;
        this.transactionRef = undefined;
        this.merchantRef = undefined;
        this.basket = undefined;
        this.basket_info = undefined;
        this.idents = undefined;
        this.tax_amount = undefined;
        this.tax_rate = undefined;
        this.market = undefined;
        this.cashier = undefined;
        this.product = undefined;
        this.receipt = undefined;
        this.receipt_number = undefined;
        this.device_source = undefined;
        this.trans_id = undefined;
        this.contract = undefined;
        this.pickup_options = undefined;
        this.last_visited_page = undefined;
    }

    /**
    * Constructs a <code>SmartTransactionsDTO</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SmartTransactionsDTO} obj Optional instance to populate.
    * @return {module:model/SmartTransactionsDTO} The populated <code>SmartTransactionsDTO</code> instance.
    */


    _createClass(SmartTransactionsDTO, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new SmartTransactionsDTO();

                if (data.hasOwnProperty('merchant')) {
                    obj['merchant'] = _ApiClient2.default.convertToType(data['merchant'], 'String');
                }
                if (data.hasOwnProperty('marketplace_contract')) {
                    obj['marketplace_contract'] = _ProductInstanceID2.default.constructFromObject(data['marketplace_contract']);
                }
                if (data.hasOwnProperty('order_option')) {
                    obj['order_option'] = _ApiClient2.default.convertToType(data['order_option'], 'String');
                }
                if (data.hasOwnProperty('status')) {
                    obj['status'] = _ApiClient2.default.convertToType(data['status'], 'String');
                }
                if (data.hasOwnProperty('transactionRef')) {
                    obj['transactionRef'] = _ApiClient2.default.convertToType(data['transactionRef'], 'String');
                }
                if (data.hasOwnProperty('merchantRef')) {
                    obj['merchantRef'] = _ApiClient2.default.convertToType(data['merchantRef'], 'String');
                }
                if (data.hasOwnProperty('basket')) {
                    obj['basket'] = _SmartTransactionsBasket2.default.constructFromObject(data['basket']);
                }
                if (data.hasOwnProperty('basket_info')) {
                    obj['basket_info'] = _SmartTransactionsBasketInfo2.default.constructFromObject(data['basket_info']);
                }
                if (data.hasOwnProperty('idents')) {
                    obj['idents'] = _ApiClient2.default.convertToType(data['idents'], [_SmartTransactionsIdent2.default]);
                }
                if (data.hasOwnProperty('tax_amount')) {
                    obj['tax_amount'] = _ApiClient2.default.convertToType(data['tax_amount'], 'Number');
                }
                if (data.hasOwnProperty('tax_rate')) {
                    obj['tax_rate'] = _ApiClient2.default.convertToType(data['tax_rate'], 'Number');
                }
                if (data.hasOwnProperty('market')) {
                    obj['market'] = _ApiClient2.default.convertToType(data['market'], 'String');
                }
                if (data.hasOwnProperty('cashier')) {
                    obj['cashier'] = _ApiClient2.default.convertToType(data['cashier'], 'String');
                }
                if (data.hasOwnProperty('product')) {
                    obj['product'] = _ApiClient2.default.convertToType(data['product'], 'String');
                }
                if (data.hasOwnProperty('receipt')) {
                    obj['receipt'] = _ApiClient2.default.convertToType(data['receipt'], 'String');
                }
                if (data.hasOwnProperty('receipt_number')) {
                    obj['receipt_number'] = _ApiClient2.default.convertToType(data['receipt_number'], 'Number');
                }
                if (data.hasOwnProperty('device_source')) {
                    obj['device_source'] = _ApiClient2.default.convertToType(data['device_source'], 'String');
                }
                if (data.hasOwnProperty('trans_id')) {
                    obj['trans_id'] = _ApiClient2.default.convertToType(data['trans_id'], 'Number');
                }
                if (data.hasOwnProperty('contract')) {
                    obj['contract'] = _ProductInstanceID2.default.constructFromObject(data['contract']);
                }
                if (data.hasOwnProperty('pickup_options')) {
                    obj['pickup_options'] = _SmartTransactionsPickupOptions2.default.constructFromObject(data['pickup_options']);
                }
                if (data.hasOwnProperty('last_visited_page')) {
                    obj['last_visited_page'] = _ApiClient2.default.convertToType(data['last_visited_page'], 'String');
                }
            }
            return obj;
        }

        /**
        * Merchant
        * @member {String} merchant
        */

        /**
        * Marketplace contract
        * @member {module:model/ProductInstanceID} marketplace_contract
        */

        /**
        * Order option
        * @member {String} order_option
        */

        /**
        * Status
        * @member {String} status
        */

        /**
        * Transaction ref
        * @member {String} transactionRef
        */

        /**
        * Merchant ref
        * @member {String} merchantRef
        */

        /**
        * Basket
        * @member {module:model/SmartTransactionsBasket} basket
        */

        /**
        * Basket info
        * @member {module:model/SmartTransactionsBasketInfo} basket_info
        */

        /**
        * Idents
        * @member {Array.<module:model/SmartTransactionsIdent>} idents
        */

        /**
        * Tax amount
        * @member {Number} tax_amount
        */

        /**
        * Tax rate
        * @member {Number} tax_rate
        */

        /**
        * Market
        * @member {String} market
        */

        /**
        * Cashier
        * @member {String} cashier
        */

        /**
        * Product
        * @member {String} product
        */

        /**
        * Receipt
        * @member {String} receipt
        */

        /**
        * Receipt number
        * @member {Number} receipt_number
        */

        /**
        * Device source
        * @member {String} device_source
        */

        /**
        * Transaction id
        * @member {Number} trans_id
        */

        /**
        * Contract
        * @member {module:model/ProductInstanceID} contract
        */

        /**
        * Pickup options
        * @member {module:model/SmartTransactionsPickupOptions} pickup_options
        */

        /**
        * Last visited page
        * @member {String} last_visited_page
        */

    }]);

    return SmartTransactionsDTO;
}();

exports.default = SmartTransactionsDTO;
},{"../ApiClient":21,"./ProductInstanceID":144,"./SmartTransactionsBasket":181,"./SmartTransactionsBasketInfo":182,"./SmartTransactionsIdent":189,"./SmartTransactionsPickupOptions":192}],189:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _LoyaltyMerchantcardsProductModel = require('./LoyaltyMerchantcardsProductModel');

var _LoyaltyMerchantcardsProductModel2 = _interopRequireDefault(_LoyaltyMerchantcardsProductModel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The SmartTransactionsIdent model module.
* @module model/SmartTransactionsIdent
*/
SmartTransactionsIdent = function () {
    /**
    * Constructs a new <code>SmartTransactionsIdent</code>.
    * @alias module:model/SmartTransactionsIdent
    * @class
    */

    function SmartTransactionsIdent() {
        _classCallCheck(this, SmartTransactionsIdent);

        this.object = undefined;
        this.id = undefined;
        this.prefix = undefined;
        this.name = undefined;
        this.type = undefined;
        this.value = undefined;
        this.valid = undefined;
        this.merchantcard = undefined;
    }

    /**
    * Constructs a <code>SmartTransactionsIdent</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SmartTransactionsIdent} obj Optional instance to populate.
    * @return {module:model/SmartTransactionsIdent} The populated <code>SmartTransactionsIdent</code> instance.
    */


    _createClass(SmartTransactionsIdent, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new SmartTransactionsIdent();

                if (data.hasOwnProperty('object')) {
                    obj['object'] = _ApiClient2.default.convertToType(data['object'], 'String');
                }
                if (data.hasOwnProperty('id')) {
                    obj['id'] = _ApiClient2.default.convertToType(data['id'], 'String');
                }
                if (data.hasOwnProperty('prefix')) {
                    obj['prefix'] = _ApiClient2.default.convertToType(data['prefix'], 'String');
                }
                if (data.hasOwnProperty('name')) {
                    obj['name'] = _ApiClient2.default.convertToType(data['name'], 'String');
                }
                if (data.hasOwnProperty('type')) {
                    obj['type'] = _ApiClient2.default.convertToType(data['type'], 'String');
                }
                if (data.hasOwnProperty('value')) {
                    obj['value'] = _ApiClient2.default.convertToType(data['value'], 'String');
                }
                if (data.hasOwnProperty('valid')) {
                    obj['valid'] = _ApiClient2.default.convertToType(data['valid'], 'Boolean');
                }
                if (data.hasOwnProperty('merchantcard')) {
                    obj['merchantcard'] = _LoyaltyMerchantcardsProductModel2.default.constructFromObject(data['merchantcard']);
                }
            }
            return obj;
        }

        /**
        * Object of smart transaction ident
        * @member {String} object
        */

        /**
        * Id of smart transaction ident
        * @member {String} id
        */

        /**
        * Prefix
        * @member {String} prefix
        */

        /**
        * Name
        * @member {String} name
        */

        /**
        * Type
        * @member {String} type
        */

        /**
        * Value
        * @member {String} value
        */

        /**
        * Valid
        * @member {Boolean} valid
        */

        /**
        * Loyalty merchant card
        * @member {module:model/LoyaltyMerchantcardsProductModel} merchantcard
        */

    }]);

    return SmartTransactionsIdent;
}();

exports.default = SmartTransactionsIdent;
},{"../ApiClient":21,"./LoyaltyMerchantcardsProductModel":105}],190:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _SmartTransactionsProductModel = require('./SmartTransactionsProductModel');

var _SmartTransactionsProductModel2 = _interopRequireDefault(_SmartTransactionsProductModel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The SmartTransactionsList model module.
* @module model/SmartTransactionsList
*/
SmartTransactionsList = function () {
    /**
    * Constructs a new <code>SmartTransactionsList</code>.
    * @alias module:model/SmartTransactionsList
    * @class
    */

    function SmartTransactionsList() {
        _classCallCheck(this, SmartTransactionsList);

        this.count = undefined;
        this.data = undefined;
    }

    /**
    * Constructs a <code>SmartTransactionsList</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SmartTransactionsList} obj Optional instance to populate.
    * @return {module:model/SmartTransactionsList} The populated <code>SmartTransactionsList</code> instance.
    */


    _createClass(SmartTransactionsList, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new SmartTransactionsList();

                if (data.hasOwnProperty('count')) {
                    obj['count'] = _ApiClient2.default.convertToType(data['count'], 'Number');
                }
                if (data.hasOwnProperty('data')) {
                    obj['data'] = _ApiClient2.default.convertToType(data['data'], [_SmartTransactionsProductModel2.default]);
                }
            }
            return obj;
        }

        /**
        * Number of existing smart transactions
        * @member {Number} count
        */

        /**
        * GET Smart/Transactions
        * @member {Array.<module:model/SmartTransactionsProductModel>} data
        */

    }]);

    return SmartTransactionsList;
}();

exports.default = SmartTransactionsList;
},{"../ApiClient":21,"./SmartTransactionsProductModel":194}],191:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * The SmartTransactionsMerchant model module.
 * @module model/SmartTransactionsMerchant
 */
SmartTransactionsMerchant = function () {
  /**
   * Constructs a new <code>SmartTransactionsMerchant</code>.
   * @alias module:model/SmartTransactionsMerchant
   * @class
   */

  function SmartTransactionsMerchant() {
    _classCallCheck(this, SmartTransactionsMerchant);

    this.object = undefined;
    this.id = undefined;
    this.companyname = undefined;
  }

  /**
   * Constructs a <code>SmartTransactionsMerchant</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SmartTransactionsMerchant} obj Optional instance to populate.
   * @return {module:model/SmartTransactionsMerchant} The populated <code>SmartTransactionsMerchant</code> instance.
   */


  _createClass(SmartTransactionsMerchant, null, [{
    key: 'constructFromObject',
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new SmartTransactionsMerchant();

        if (data.hasOwnProperty('object')) {
          obj['object'] = _ApiClient2.default.convertToType(data['object'], 'String');
        }
        if (data.hasOwnProperty('id')) {
          obj['id'] = _ApiClient2.default.convertToType(data['id'], 'String');
        }
        if (data.hasOwnProperty('companyname')) {
          obj['companyname'] = _ApiClient2.default.convertToType(data['companyname'], 'String');
        }
      }
      return obj;
    }

    /**
     * Object type of instance
     * @member {String} object
     */

    /**
     * ID of instance
     * @member {String} id
     */

    /**
     * Company name
     * @member {String} companyname
     */

  }]);

  return SmartTransactionsMerchant;
}();

exports.default = SmartTransactionsMerchant;
},{"../ApiClient":21}],192:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _ProductInstanceUID = require('./ProductInstanceUID');

var _ProductInstanceUID2 = _interopRequireDefault(_ProductInstanceUID);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The SmartTransactionsPickupOptions model module.
* @module model/SmartTransactionsPickupOptions
*/
SmartTransactionsPickupOptions = function () {
    /**
    * Constructs a new <code>SmartTransactionsPickupOptions</code>.
    * @alias module:model/SmartTransactionsPickupOptions
    * @class
    */

    function SmartTransactionsPickupOptions() {
        _classCallCheck(this, SmartTransactionsPickupOptions);

        this.code = undefined;
        this.date = undefined;
        this.store = undefined;
    }

    /**
    * Constructs a <code>SmartTransactionsPickupOptions</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SmartTransactionsPickupOptions} obj Optional instance to populate.
    * @return {module:model/SmartTransactionsPickupOptions} The populated <code>SmartTransactionsPickupOptions</code> instance.
    */


    _createClass(SmartTransactionsPickupOptions, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new SmartTransactionsPickupOptions();

                if (data.hasOwnProperty('code')) {
                    obj['code'] = _ApiClient2.default.convertToType(data['code'], 'String');
                }
                if (data.hasOwnProperty('date')) {
                    obj['date'] = _ApiClient2.default.convertToType(data['date'], 'Date');
                }
                if (data.hasOwnProperty('store')) {
                    obj['store'] = _ProductInstanceUID2.default.constructFromObject(data['store']);
                }
            }
            return obj;
        }

        /**
        * Code
        * @member {String} code
        */

        /**
        * Date
        * @member {Date} date
        */

        /**
        * Store
        * @member {module:model/ProductInstanceUID} store
        */

    }]);

    return SmartTransactionsPickupOptions;
}();

exports.default = SmartTransactionsPickupOptions;
},{"../ApiClient":21,"./ProductInstanceUID":145}],193:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _SmartTransactionsBonusProducts = require('./SmartTransactionsBonusProducts');

var _SmartTransactionsBonusProducts2 = _interopRequireDefault(_SmartTransactionsBonusProducts);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The SmartTransactionsPreTransactionModel model module.
* @module model/SmartTransactionsPreTransactionModel
*/
SmartTransactionsPreTransactionModel = function () {
    /**
    * Constructs a new <code>SmartTransactionsPreTransactionModel</code>.
    * @alias module:model/SmartTransactionsPreTransactionModel
    * @class
    */

    function SmartTransactionsPreTransactionModel() {
        _classCallCheck(this, SmartTransactionsPreTransactionModel);

        this.missing_sum = undefined;
        this.bonus_products = undefined;
    }

    /**
    * Constructs a <code>SmartTransactionsPreTransactionModel</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SmartTransactionsPreTransactionModel} obj Optional instance to populate.
    * @return {module:model/SmartTransactionsPreTransactionModel} The populated <code>SmartTransactionsPreTransactionModel</code> instance.
    */


    _createClass(SmartTransactionsPreTransactionModel, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new SmartTransactionsPreTransactionModel();

                if (data.hasOwnProperty('missing_sum')) {
                    obj['missing_sum'] = _ApiClient2.default.convertToType(data['missing_sum'], 'Number');
                }
                if (data.hasOwnProperty('bonus_products')) {
                    obj['bonus_products'] = _ApiClient2.default.convertToType(data['bonus_products'], [_SmartTransactionsBonusProducts2.default]);
                }
            }
            return obj;
        }

        /**
        * missing sum
        * @member {Number} missing_sum
        */

        /**
        * SmartTransactionsPreTransactionModel
        * @member {Array.<module:model/SmartTransactionsBonusProducts>} bonus_products
        */

    }]);

    return SmartTransactionsPreTransactionModel;
}();

exports.default = SmartTransactionsPreTransactionModel;
},{"../ApiClient":21,"./SmartTransactionsBonusProducts":186}],194:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _LoyaltyCustomersProductModel = require('./LoyaltyCustomersProductModel');

var _LoyaltyCustomersProductModel2 = _interopRequireDefault(_LoyaltyCustomersProductModel);

var _ProductInstanceUID = require('./ProductInstanceUID');

var _ProductInstanceUID2 = _interopRequireDefault(_ProductInstanceUID);

var _SmartTransactionsBasket = require('./SmartTransactionsBasket');

var _SmartTransactionsBasket2 = _interopRequireDefault(_SmartTransactionsBasket);

var _SmartTransactionsBasketInfo = require('./SmartTransactionsBasketInfo');

var _SmartTransactionsBasketInfo2 = _interopRequireDefault(_SmartTransactionsBasketInfo);

var _SmartTransactionsCheckin = require('./SmartTransactionsCheckin');

var _SmartTransactionsCheckin2 = _interopRequireDefault(_SmartTransactionsCheckin);

var _SmartTransactionsIdent = require('./SmartTransactionsIdent');

var _SmartTransactionsIdent2 = _interopRequireDefault(_SmartTransactionsIdent);

var _SmartTransactionsMerchant = require('./SmartTransactionsMerchant');

var _SmartTransactionsMerchant2 = _interopRequireDefault(_SmartTransactionsMerchant);

var _SmartTransactionsPickupOptions = require('./SmartTransactionsPickupOptions');

var _SmartTransactionsPickupOptions2 = _interopRequireDefault(_SmartTransactionsPickupOptions);

var _SmartTransactionsReceipt = require('./SmartTransactionsReceipt');

var _SmartTransactionsReceipt2 = _interopRequireDefault(_SmartTransactionsReceipt);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The SmartTransactionsProductModel model module.
* @module model/SmartTransactionsProductModel
*/
SmartTransactionsProductModel = function () {
    /**
    * Constructs a new <code>SmartTransactionsProductModel</code>.
    * @alias module:model/SmartTransactionsProductModel
    * @class
    */

    function SmartTransactionsProductModel() {
        _classCallCheck(this, SmartTransactionsProductModel);

        this.object = undefined;
        this.id = undefined;
        this.status = undefined;
        this.merchant = undefined;
        this.contract = undefined;
        this.marketplace_contract = undefined;
        this.customer = undefined;
        this.checkin = undefined;
        this.merchantRef = undefined;
        this.transactionRef = undefined;
        this.store = undefined;
        this.device_source = undefined;
        this.device_destination = undefined;
        this.created = undefined;
        this.updated = undefined;
        this.receipt_number = undefined;
        this.receipt = undefined;
        this.receipt_merchant = undefined;
        this.receipt_merchant_print = undefined;
        this.basket_info = undefined;
        this.basket = undefined;
        this.idents = undefined;
        this.tax_rate = undefined;
        this.tax_amount = undefined;
        this.cashier = undefined;
        this.market = undefined;
        this.order_option = undefined;
        this.pickup_options = undefined;
        this.product = undefined;
        this.trans_id = undefined;
        this.payment_method = undefined;
        this.transactions = undefined;
        this.last_visited_page = undefined;
    }

    /**
    * Constructs a <code>SmartTransactionsProductModel</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SmartTransactionsProductModel} obj Optional instance to populate.
    * @return {module:model/SmartTransactionsProductModel} The populated <code>SmartTransactionsProductModel</code> instance.
    */


    _createClass(SmartTransactionsProductModel, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new SmartTransactionsProductModel();

                if (data.hasOwnProperty('object')) {
                    obj['object'] = _ApiClient2.default.convertToType(data['object'], 'String');
                }
                if (data.hasOwnProperty('id')) {
                    obj['id'] = _ApiClient2.default.convertToType(data['id'], 'String');
                }
                if (data.hasOwnProperty('status')) {
                    obj['status'] = _ApiClient2.default.convertToType(data['status'], 'String');
                }
                if (data.hasOwnProperty('merchant')) {
                    obj['merchant'] = _SmartTransactionsMerchant2.default.constructFromObject(data['merchant']);
                }
                if (data.hasOwnProperty('contract')) {
                    obj['contract'] = _ProductInstanceUID2.default.constructFromObject(data['contract']);
                }
                if (data.hasOwnProperty('marketplace_contract')) {
                    obj['marketplace_contract'] = _ProductInstanceUID2.default.constructFromObject(data['marketplace_contract']);
                }
                if (data.hasOwnProperty('customer')) {
                    obj['customer'] = _LoyaltyCustomersProductModel2.default.constructFromObject(data['customer']);
                }
                if (data.hasOwnProperty('checkin')) {
                    obj['checkin'] = _SmartTransactionsCheckin2.default.constructFromObject(data['checkin']);
                }
                if (data.hasOwnProperty('merchantRef')) {
                    obj['merchantRef'] = _ApiClient2.default.convertToType(data['merchantRef'], 'String');
                }
                if (data.hasOwnProperty('transactionRef')) {
                    obj['transactionRef'] = _ApiClient2.default.convertToType(data['transactionRef'], 'String');
                }
                if (data.hasOwnProperty('store')) {
                    obj['store'] = _ProductInstanceUID2.default.constructFromObject(data['store']);
                }
                if (data.hasOwnProperty('device_source')) {
                    obj['device_source'] = _ProductInstanceUID2.default.constructFromObject(data['device_source']);
                }
                if (data.hasOwnProperty('device_destination')) {
                    obj['device_destination'] = _ProductInstanceUID2.default.constructFromObject(data['device_destination']);
                }
                if (data.hasOwnProperty('created')) {
                    obj['created'] = _ApiClient2.default.convertToType(data['created'], 'Date');
                }
                if (data.hasOwnProperty('updated')) {
                    obj['updated'] = _ApiClient2.default.convertToType(data['updated'], 'Date');
                }
                if (data.hasOwnProperty('receipt_number')) {
                    obj['receipt_number'] = _ApiClient2.default.convertToType(data['receipt_number'], 'Number');
                }
                if (data.hasOwnProperty('receipt')) {
                    obj['receipt'] = _ApiClient2.default.convertToType(data['receipt'], [_SmartTransactionsReceipt2.default]);
                }
                if (data.hasOwnProperty('receipt_merchant')) {
                    obj['receipt_merchant'] = _ApiClient2.default.convertToType(data['receipt_merchant'], 'String');
                }
                if (data.hasOwnProperty('receipt_merchant_print')) {
                    obj['receipt_merchant_print'] = _ApiClient2.default.convertToType(data['receipt_merchant_print'], 'Boolean');
                }
                if (data.hasOwnProperty('basket_info')) {
                    obj['basket_info'] = _SmartTransactionsBasketInfo2.default.constructFromObject(data['basket_info']);
                }
                if (data.hasOwnProperty('basket')) {
                    obj['basket'] = _SmartTransactionsBasket2.default.constructFromObject(data['basket']);
                }
                if (data.hasOwnProperty('idents')) {
                    obj['idents'] = _ApiClient2.default.convertToType(data['idents'], [_SmartTransactionsIdent2.default]);
                }
                if (data.hasOwnProperty('tax_rate')) {
                    obj['tax_rate'] = _ApiClient2.default.convertToType(data['tax_rate'], 'Number');
                }
                if (data.hasOwnProperty('tax_amount')) {
                    obj['tax_amount'] = _ApiClient2.default.convertToType(data['tax_amount'], 'Number');
                }
                if (data.hasOwnProperty('cashier')) {
                    obj['cashier'] = _ApiClient2.default.convertToType(data['cashier'], 'String');
                }
                if (data.hasOwnProperty('market')) {
                    obj['market'] = _ApiClient2.default.convertToType(data['market'], 'String');
                }
                if (data.hasOwnProperty('order_option')) {
                    obj['order_option'] = _ApiClient2.default.convertToType(data['order_option'], 'String');
                }
                if (data.hasOwnProperty('pickup_options')) {
                    obj['pickup_options'] = _SmartTransactionsPickupOptions2.default.constructFromObject(data['pickup_options']);
                }
                if (data.hasOwnProperty('product')) {
                    obj['product'] = _ApiClient2.default.convertToType(data['product'], 'String');
                }
                if (data.hasOwnProperty('trans_id')) {
                    obj['trans_id'] = _ApiClient2.default.convertToType(data['trans_id'], 'Number');
                }
                if (data.hasOwnProperty('payment_method')) {
                    obj['payment_method'] = _ApiClient2.default.convertToType(data['payment_method'], 'String');
                }
                if (data.hasOwnProperty('transactions')) {
                    obj['transactions'] = _ProductInstanceUID2.default.constructFromObject(data['transactions']);
                }
                if (data.hasOwnProperty('last_visited_page')) {
                    obj['last_visited_page'] = _ApiClient2.default.convertToType(data['last_visited_page'], 'String');
                }
            }
            return obj;
        }

        /**
        * Object of smart transaction
        * @member {String} object
        */

        /**
        * Id of smart transaction
        * @member {String} id
        */

        /**
        * Status of smart transaction
        * @member {String} status
        */

        /**
        * Merchant
        * @member {module:model/SmartTransactionsMerchant} merchant
        */

        /**
        * Contract
        * @member {module:model/ProductInstanceUID} contract
        */

        /**
        * Marketplace contract
        * @member {module:model/ProductInstanceUID} marketplace_contract
        */

        /**
        * Customer
        * @member {module:model/LoyaltyCustomersProductModel} customer
        */

        /**
        * Check in
        * @member {module:model/SmartTransactionsCheckin} checkin
        */

        /**
        * Merchant ref
        * @member {String} merchantRef
        */

        /**
        * Transaction ref
        * @member {String} transactionRef
        */

        /**
        * Store
        * @member {module:model/ProductInstanceUID} store
        */

        /**
        * Device source
        * @member {module:model/ProductInstanceUID} device_source
        */

        /**
        * Device destination
        * @member {module:model/ProductInstanceUID} device_destination
        */

        /**
        * Created at date
        * @member {Date} created
        */

        /**
        * Updated at date
        * @member {Date} updated
        */

        /**
        * Receipt number
        * @member {Number} receipt_number
        */

        /**
        * Receipt
        * @member {Array.<module:model/SmartTransactionsReceipt>} receipt
        */

        /**
        * Receipt merchant
        * @member {String} receipt_merchant
        */

        /**
        * Receipt merchant print
        * @member {Boolean} receipt_merchant_print
        */

        /**
        * Basket info
        * @member {module:model/SmartTransactionsBasketInfo} basket_info
        */

        /**
        * Basket
        * @member {module:model/SmartTransactionsBasket} basket
        */

        /**
        * Idents
        * @member {Array.<module:model/SmartTransactionsIdent>} idents
        */

        /**
        * Tax rate
        * @member {Number} tax_rate
        */

        /**
        * Tax amount
        * @member {Number} tax_amount
        */

        /**
        * Cashier
        * @member {String} cashier
        */

        /**
        * Market
        * @member {String} market
        */

        /**
        * Order option
        * @member {String} order_option
        */

        /**
        * Pickup options
        * @member {module:model/SmartTransactionsPickupOptions} pickup_options
        */

        /**
        * Product
        * @member {String} product
        */

        /**
        * Transaction id
        * @member {Number} trans_id
        */

        /**
        * Payment method
        * @member {String} payment_method
        */

        /**
        * Transactions
        * @member {module:model/ProductInstanceUID} transactions
        */

        /**
        * Last visited page
        * @member {String} last_visited_page
        */

    }]);

    return SmartTransactionsProductModel;
}();

exports.default = SmartTransactionsProductModel;
},{"../ApiClient":21,"./LoyaltyCustomersProductModel":90,"./ProductInstanceUID":145,"./SmartTransactionsBasket":181,"./SmartTransactionsBasketInfo":182,"./SmartTransactionsCheckin":187,"./SmartTransactionsIdent":189,"./SmartTransactionsMerchant":191,"./SmartTransactionsPickupOptions":192,"./SmartTransactionsReceipt":195}],195:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _SmartTransactionsReceiptValue = require('./SmartTransactionsReceiptValue');

var _SmartTransactionsReceiptValue2 = _interopRequireDefault(_SmartTransactionsReceiptValue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The SmartTransactionsReceipt model module.
* @module model/SmartTransactionsReceipt
*/
SmartTransactionsReceipt = function () {
    /**
    * Constructs a new <code>SmartTransactionsReceipt</code>.
    * @alias module:model/SmartTransactionsReceipt
    * @class
    */

    function SmartTransactionsReceipt() {
        _classCallCheck(this, SmartTransactionsReceipt);

        this.type = undefined;
        this.value = undefined;
    }

    /**
    * Constructs a <code>SmartTransactionsReceipt</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SmartTransactionsReceipt} obj Optional instance to populate.
    * @return {module:model/SmartTransactionsReceipt} The populated <code>SmartTransactionsReceipt</code> instance.
    */


    _createClass(SmartTransactionsReceipt, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new SmartTransactionsReceipt();

                if (data.hasOwnProperty('type')) {
                    obj['type'] = _ApiClient2.default.convertToType(data['type'], 'String');
                }
                if (data.hasOwnProperty('value')) {
                    obj['value'] = _SmartTransactionsReceiptValue2.default.constructFromObject(data['value']);
                }
            }
            return obj;
        }

        /**
        * Type
        * @member {String} type
        */

        /**
        * Value
        * @member {module:model/SmartTransactionsReceiptValue} value
        */

    }]);

    return SmartTransactionsReceipt;
}();

exports.default = SmartTransactionsReceipt;
},{"../ApiClient":21,"./SmartTransactionsReceiptValue":196}],196:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The SmartTransactionsReceiptValue model module.
* @module model/SmartTransactionsReceiptValue
*/
SmartTransactionsReceiptValue = function () {
    /**
    * Constructs a new <code>SmartTransactionsReceiptValue</code>.
    * @alias module:model/SmartTransactionsReceiptValue
    * @class
    */

    function SmartTransactionsReceiptValue() {
        _classCallCheck(this, SmartTransactionsReceiptValue);

        this.caption = undefined;
        this.text = undefined;
        this.name = undefined;
        this.value = undefined;
    }

    /**
    * Constructs a <code>SmartTransactionsReceiptValue</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/SmartTransactionsReceiptValue} obj Optional instance to populate.
    * @return {module:model/SmartTransactionsReceiptValue} The populated <code>SmartTransactionsReceiptValue</code> instance.
    */


    _createClass(SmartTransactionsReceiptValue, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new SmartTransactionsReceiptValue();

                if (data.hasOwnProperty('caption')) {
                    obj['caption'] = _ApiClient2.default.convertToType(data['caption'], 'String');
                }
                if (data.hasOwnProperty('text')) {
                    obj['text'] = _ApiClient2.default.convertToType(data['text'], 'String');
                }
                if (data.hasOwnProperty('name')) {
                    obj['name'] = _ApiClient2.default.convertToType(data['name'], 'String');
                }
                if (data.hasOwnProperty('value')) {
                    obj['value'] = _ApiClient2.default.convertToType(data['value'], 'String');
                }
            }
            return obj;
        }

        /**
        * Caption
        * @member {String} caption
        */

        /**
        * Text
        * @member {String} text
        */

        /**
        * Name
        * @member {String} name
        */

        /**
        * Value
        * @member {String} value
        */

    }]);

    return SmartTransactionsReceiptValue;
}();

exports.default = SmartTransactionsReceiptValue;
},{"../ApiClient":21}],197:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The Store model module.
* @module model/Store
*/
Store = function () {
    /**
    * Constructs a new <code>Store</code>.
    * @alias module:model/Store
    * @class
    */

    function Store() {
        _classCallCheck(this, Store);

        this.object = undefined;
        this.id = undefined;
        this.name = undefined;
        this.name_raw = undefined;
    }

    /**
    * Constructs a <code>Store</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/Store} obj Optional instance to populate.
    * @return {module:model/Store} The populated <code>Store</code> instance.
    */


    _createClass(Store, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new Store();

                if (data.hasOwnProperty('object')) {
                    obj['object'] = _ApiClient2.default.convertToType(data['object'], 'String');
                }
                if (data.hasOwnProperty('id')) {
                    obj['id'] = _ApiClient2.default.convertToType(data['id'], 'String');
                }
                if (data.hasOwnProperty('name')) {
                    obj['name'] = _ApiClient2.default.convertToType(data['name'], 'String');
                }
                if (data.hasOwnProperty('name_raw')) {
                    obj['name_raw'] = _ApiClient2.default.convertToType(data['name_raw'], 'String');
                }
            }
            return obj;
        }

        /**
        * Object of store
        * @member {String} object
        */

        /**
        * Id of store
        * @member {String} id
        */

        /**
        * Store name
        * @member {String} name
        */

        /**
        * Store name raw
        * @member {String} name_raw
        */

    }]);

    return Store;
}();

exports.default = Store;
},{"../ApiClient":21}],198:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiClient = require('../ApiClient');

var _ApiClient2 = _interopRequireDefault(_ApiClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
* The VirtualTerminalData model module.
* @module model/VirtualTerminalData
*/
VirtualTerminalData = function () {
    /**
    * Constructs a new <code>VirtualTerminalData</code>.
    * @alias module:model/VirtualTerminalData
    * @class
    */

    function VirtualTerminalData() {
        _classCallCheck(this, VirtualTerminalData);

        this.store = undefined;
        this.tid = undefined;
        this.actions = undefined;
        this.gift_terminal = undefined;
        this.amount_split_enabled = undefined;
    }

    /**
    * Constructs a <code>VirtualTerminalData</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/VirtualTerminalData} obj Optional instance to populate.
    * @return {module:model/VirtualTerminalData} The populated <code>VirtualTerminalData</code> instance.
    */


    _createClass(VirtualTerminalData, null, [{
        key: 'constructFromObject',
        value: function constructFromObject(data, obj) {
            if (data) {
                obj = obj || new VirtualTerminalData();

                if (data.hasOwnProperty('store')) {
                    obj['store'] = _ApiClient2.default.convertToType(data['store'], Object);
                }
                if (data.hasOwnProperty('tid')) {
                    obj['tid'] = _ApiClient2.default.convertToType(data['tid'], 'String');
                }
                if (data.hasOwnProperty('actions')) {
                    obj['actions'] = _ApiClient2.default.convertToType(data['actions'], ['String']);
                }
                if (data.hasOwnProperty('gift_terminal')) {
                    obj['gift_terminal'] = _ApiClient2.default.convertToType(data['gift_terminal'], 'Number');
                }
                if (data.hasOwnProperty('amount_split_enabled')) {
                    obj['amount_split_enabled'] = _ApiClient2.default.convertToType(data['amount_split_enabled'], 'Number');
                }
            }
            return obj;
        }

        /**
        * Store
        * @member {Object} store
        */

        /**
        * Terminal id
        * @member {String} tid
        */

        /**
        * Actions
        * @member {Array.<String>} actions
        */

        /**
        * Gift terminal
        * @member {Number} gift_terminal
        */

        /**
        * Amount split enabled
        * @member {Number} amount_split_enabled
        */

    }]);

    return VirtualTerminalData;
}();

exports.default = VirtualTerminalData;
},{"../ApiClient":21}],199:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.StompFactory = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Stomp = require('./main/Stomp');

var _Stomp2 = _interopRequireDefault(_Stomp);

var _SocketProvider = require('./socket/SocketProvider');

var _SocketProvider2 = _interopRequireDefault(_SocketProvider);

var _stompConfig = require('../../stomp-config.json');

var config = _interopRequireWildcard(_stompConfig);

var _StompGlobals = require('./StompGlobals');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

StompClient = function () {
    function StompClient(token, env, debugMode) {
        _classCallCheck(this, StompClient);

        if (token === undefined) throw 'token is not a valid value';
        if (config.host === '' || config.host === undefined) throw 'invalid host in stomp config';
        if (config.headers.content_type === '' || config.headers.content_type === undefined) throw 'invalid content_type in stomp config';
        if (config.headers.reply_to === '' || config.headers.reply_to === undefined) throw 'invalid reply_to in stomp config';
        if (config.headers.ack === '' || config.headers.ack === undefined) throw 'invalid ack in stomp config';

        if (env === _StompGlobals.Environments.NODE) {
            this.socketProvider = new _SocketProvider2.default(config.host, config.node_env.port, config.node_env.vhost);
        } else {
            this.socketProvider = new _SocketProvider2.default(config.host, config.browser_env.port, config.browser_env.vhost);
        }

        this.socket = this.socketProvider.createSocket(env);
        this.stomp = new _Stomp2.default(token, token, this.socket);
        this.token = token;

        if (!debugMode) {
            console.log = function () {};
        }
    }

    _createClass(StompClient, [{
        key: 'getToken',
        value: function getToken() {
            return this.token;
        }
    }, {
        key: 'connect',
        value: function connect() {
            var _this = this;

            return new Promise(function (resolve, reject) {
                // possible situations while connecting to socket
                _this.stomp.on('socket-error', function (error) {
                    console.error('Unexpected socket error' + error);

                    reject(error);
                });

                _this.stomp.on('disconnected', function (error) {
                    if (error) {
                        console.error('Disconnected from Stomp with error: ' + error);
                    } else {
                        console.log('Disconnected from Stomp');
                    }

                    reject(error);
                });

                // possible situations while connecting to stomp broker
                _this.stomp.on('error', function (frame) {
                    console.error('Error: ' + frame.body);

                    reject(frame);
                });

                _this.stomp.on('connected', function (frame) {
                    // if successfully connected then set proper listeners for soceket and stomp
                    _this.stomp.on('socket-error', function (error) {
                        console.log('Unexpected socket error' + error);
                    });

                    _this.stomp.on('disconnected', function (error) {
                        if (error) {
                            console.log('Disconnected from Stomp with error: ' + error);
                        } else {
                            console.log('Disconnected from Stomp');
                        }
                    });

                    _this.stomp.on('error', function (frame) {
                        console.error('Error: ' + frame.body);
                    });

                    _this.stomp.on('receipt', function (frame) {
                        console.log('Received receipt: ' + frame.headers['receipt-id']);
                    });

                    _this.stomp.on('message', function (frame) {
                        console.log('Received message: ' + frame.body);
                    });

                    resolve(frame);
                });

                // try connecting
                _this.stomp.connect();
            });
        }
    }, {
        key: 'sendMessage',
        value: function sendMessage(destination, body, want_receipt) {
            var headers = this.prepareHeaders();
            headers['destination'] = destination;
            this.stomp.send('SEND', headers, body, want_receipt);
        }
    }, {
        key: 'subscribe',
        value: function subscribe(destination, headers) {
            headers['session'] = this.session;
            headers['destination'] = destination;
            this.stomp.send('SUBSCRIBE', headers);
        }
    }, {
        key: 'unsubscribe',
        value: function unsubscribe(destination, headers) {
            headers['session'] = this.session;
            headers['destination'] = destination;
            this.stomp.send('UNSUBSCRIBE', headers);
        }
    }, {
        key: 'ack',
        value: function ack(message_id) {
            send('ACK', { 'message-id': message_id });
        }
    }, {
        key: 'nack',
        value: function nack(message_id) {
            send('NACK', { 'message-id': message_id });
        }
    }, {
        key: 'begin',
        value: function begin() {
            // generating random number (the multiplier '99999999999' has to be fairly big)
            var transaction_id = Math.floor(Math.random() * 99999999999).toString();
            send('BEGIN', { 'transaction': transaction_id });
            return transaction_id;
        }
    }, {
        key: 'commit',
        value: function commit(transaction_id) {
            send('COMMIT', { 'transaction': transaction_id });
        }
    }, {
        key: 'abort',
        value: function abort(transaction_id) {
            send('ABORT', { 'transaction': transaction_id });
        }
    }, {
        key: 'setDisconnectedListener',
        value: function setDisconnectedListener(listener) {
            if (this['disconnected']) {
                this.stomp.removeListener('disconnected', this['disconnected']);
            }
            this['disconnected'] = listener;
            this.stomp.on('disconnected', this['disconnected']);
        }
    }, {
        key: 'setSocketErrorListener',
        value: function setSocketErrorListener(listener) {
            if (this['socket-error']) {
                this.stomp.removeListener('socket-error', this['socket-error']);
            }
            this['socket-error'] = listener;
            this.stomp.on('socket-error', this['socket-error']);
        }
    }, {
        key: 'setMessageListener',
        value: function setMessageListener(listener) {
            if (this['message']) {
                this.stomp.removeListener('message', this['message']);
            }
            this['message'] = listener;
            this.stomp.on('message', this['message']);
        }
    }, {
        key: 'setReceiptListener',
        value: function setReceiptListener(listener) {
            if (this['receipt']) {
                this.stomp.removeListener('receipt', this['receipt']);
            }
            this['receipt'] = listener;
            this.stomp.on('receipt', this['receipt']);
        }
    }, {
        key: 'setErrorListener',
        value: function setErrorListener(listener) {
            if (this['error']) {
                this.stomp.removeListener('error', this['error']);
            }
            this['error'] = listener;
            this.stomp.on('error', this['error']);
        }
    }, {
        key: 'generateCorrelationId',
        value: function generateCorrelationId() {
            var date = new Date();
            var startUniquePart = Math.random().toString(36).substr(2, 115);
            var endUniquePart = Math.random().toString(36).substr(2, 115);

            return startUniquePart + '-' + date.toISOString().replace(/ /g, '') + '-' + endUniquePart;
        }
    }, {
        key: 'prepareHeaders',
        value: function prepareHeaders() {
            return {
                "content-type": config.headers.content_type,
                "reply-to": config.headers.reply_to,
                "user-id": this.getToken(),
                "correlation-id": this.generateCorrelationId(),
                "ack": config.headers.ack
            };
        }
    }]);

    return StompClient;
}();

;

var StompFactory = exports.StompFactory = {
    getInstance: function getInstance(token, env) {
        var debugMode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

        if (StompFactory.hasOwnProperty('instance')) {
            return StompFactory.instance;
        } else {
            StompFactory.instance = new StompClient(token, env, debugMode);
            StompFactory.instance.constructor = undefined;
            Object.freeze(StompFactory);
            return StompFactory.instance;
        }
    }
};
},{"../../stomp-config.json":207,"./StompGlobals":200,"./main/Stomp":203,"./socket/SocketProvider":206}],200:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
var StompFrameCommands = exports.StompFrameCommands = {
    CONNECTED: 'CONNECTED',
    MESSAGE: 'MESSAGE',
    RECEIPT: 'RECEIPT',
    ERROR: 'ERROR'
};

var Environments = exports.Environments = {
    NODE: 'NODE',
    BROWSER: 'BROWSER'
};

var ResponseStatus = exports.ResponseStatus = {
    ok: 'ok',
    error: 'error'
};
},{}],201:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _StompClient = require("../StompClient");

var _ApiClient = require("../../ApiClient");

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _SmartTransactionsProductModel = require("../../model/SmartTransactionsProductModel");

var _SmartTransactionsProductModel2 = _interopRequireDefault(_SmartTransactionsProductModel);

var _StompGlobals = require("../StompGlobals");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

StompSmartTransactionsApi = function () {
    function StompSmartTransactionsApi(authenticator) {
        var _this = this;

        var stompClient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

        _classCallCheck(this, StompSmartTransactionsApi);

        this.destination = ["/exchange/connect.api/api:", ":Smart.Transactions"];
        this.authenticator = authenticator;

        if (stompClient != null && stompClient instanceof StompClient) {
            this.stompClient = stompClient;
            this.connected = this.stompClient.connect();
        } else {
            this.connected = new Promise(function (resolve, reject) {
                _this.authenticator.getToken().then(function (token) {
                    _this.stompClient = _StompClient.StompFactory.getInstance(token.access_token, _StompGlobals.Environments.BROWSER);
                    _this.stompClient.connect().then(function (connectedFrame) {
                        resolve(connectedFrame);
                    });
                });
            });
        }
    }

    _createClass(StompSmartTransactionsApi, [{
        key: "addTransaction",
        value: function addTransaction(smartTransactionProperties) {
            var _this2 = this;

            return new Promise(function (resolve, reject) {
                _this2.connected.then(function (connectedFrame) {
                    _this2.stompClient.sendMessage(_this2.destination[0] + 'add' + _this2.destination[1], JSON.stringify({
                        'data': smartTransactionProperties }));

                    _this2.stompClient.setMessageListener(function (frame) {
                        var response = JSON.parse(frame.body);

                        if (response.status === _StompGlobals.ResponseStatus.ok) {
                            var smartTransaction = _ApiClient2.default.convertToType(response.data, _SmartTransactionsProductModel2.default);
                            resolve(smartTransaction);
                        } else {
                            reject(response.error_details);
                        }
                    });
                });
            });
        }
    }, {
        key: "updateTransaction",
        value: function updateTransaction(smartTransactionId, smartTransactionProperties) {
            var _this3 = this;

            return new Promise(function (resolve, reject) {
                _this3.connected.then(function () {
                    _this3.stompClient.sendMessage(_this3.destination[0] + 'update' + _this3.destination[1], JSON.stringify({
                        'pid': smartTransactionId,
                        'data': smartTransactionProperties
                    }));

                    _this3.stompClient.setMessageListener(function (frame) {
                        var response = JSON.parse(frame.body);

                        if (response.status === _StompGlobals.ResponseStatus.ok) {
                            var smartTransaction = _ApiClient2.default.convertToType(response.data, _SmartTransactionsProductModel2.default);
                            resolve(smartTransaction);
                        } else {
                            reject(response.error_details);
                        }
                    });
                });
            });
        }
    }, {
        key: "startTransaction",
        value: function startTransaction(smartTransactionId, paymentMethod) {
            var _this4 = this;

            return new Promise(function (resolve, reject) {
                _this4.connected.then(function () {
                    _this4.stompClient.sendMessage(_this4.destination[0] + 'update' + _this4.destination[1] + 'Start', JSON.stringify({
                        'pid': smartTransactionId,
                        'sid': paymentMethod
                    }));

                    _this4.stompClient.setMessageListener(function (frame) {
                        var response = JSON.parse(frame.body);

                        if (response.status === _StompGlobals.ResponseStatus.ok) {
                            var smartTransaction = _ApiClient2.default.convertToType(response.data, _SmartTransactionsProductModel2.default);
                            resolve(smartTransaction);
                        } else {
                            reject(response.error_details);
                        }
                    });
                });
            });
        }
    }, {
        key: "preTransaction",
        value: function preTransaction(smartTransactionId) {
            var _this5 = this;

            return new Promise(function (resolve, reject) {
                _this5.connected.then(function () {
                    _this5.stompClient.sendMessage(_this5.destination[0] + 'update' + _this5.destination[1] + 'Pretransaction', JSON.stringify({
                        'pid': smartTransactionId
                    }));

                    _this5.stompClient.setMessageListener(function (frame) {
                        var response = JSON.parse(frame.body);

                        if (response.status === _StompGlobals.ResponseStatus.ok) {
                            var smartTransaction = _ApiClient2.default.convertToType(response.data, _SmartTransactionsProductModel2.default);
                            resolve(smartTransaction);
                        } else {
                            reject(response.error_details);
                        }
                    });
                });
            });
        }
    }]);

    return StompSmartTransactionsApi;
}();

exports.default = StompSmartTransactionsApi;
},{"../../ApiClient":21,"../../model/SmartTransactionsProductModel":194,"../StompClient":199,"../StompGlobals":200}],202:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Frame = function () {
    function Frame(command, headers, body, want_receipt) {
        _classCallCheck(this, Frame);

        this.command = command || '';
        this.headers = headers || {};
        this.body = body || '';

        if (want_receipt) {
            this.headers['receipt'] = Math.floor(Math.random() * 99999999999).toString() + this.headers['session'] ? "-" + this.headers['session'] : '';
        }
    }

    _createClass(Frame, [{
        key: 'toString',
        value: function toString() {
            var frame = this.command + "\n";

            for (var key in this.headers) {
                frame += key + ':' + this.headers[key] + '\n';
            }

            if (this.body) {
                frame += '\n' + this.body;
            }

            return frame + '\n\x00';
        }
    }, {
        key: 'parseChunk',
        value: function parseChunk(chunk) {
            chunk = chunk.toString('utf8', 0, chunk.length);

            this.command = chunk.split('\n')[0];
            chunk = chunk.slice(this.command.length + 1, chunk.length).split('\n\n');

            var headers_split = chunk[0].split('\n');
            for (var i = 0; i < headers_split.length; i++) {
                var header = headers_split[i].split(':');
                if (header.length > 1) {
                    this.headers[header[0].trim()] = header[1].trim();
                }
            }
            this.headers['bytes_message'] = 'content-length' in this.headers;

            this.body = chunk.slice(1, chunk.length);

            return this;
        }
    }]);

    return Frame;
}();

exports.default = Frame;
;
},{}],203:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _events = require("events");

var _Frame = require("../frame/Frame");

var _Frame2 = _interopRequireDefault(_Frame);

var _StompGlobals = require("../StompGlobals");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Stomp = function (_EventEmitter) {
    _inherits(Stomp, _EventEmitter);

    function Stomp(login, passcode, socket) {
        _classCallCheck(this, Stomp);

        var _this = _possibleConstructorReturn(this, (Stomp.__proto__ || Object.getPrototypeOf(Stomp)).call(this));

        _events.EventEmitter.call(_this);

        _this.login = login; // broker's user login
        _this.passcode = passcode; // broker's user passcode (password)
        _this.socket = socket; // socket used to connect to broker
        _this.session = null; // session id
        return _this;
    }

    _createClass(Stomp, [{
        key: "connect",
        value: function connect() {
            var _this2 = this;

            this.socket.addOnOpenListener(function () {
                console.log('Connecting to Stomp');
                var headers = {};
                headers['login'] = _this2.login;
                headers['passcode'] = _this2.passcode;

                _this2.send('CONNECT', headers);
            });

            this.socket.addOnMessageListener(function (data) {
                var frames = data.split('\0\n');

                if (frames.length == 1) {
                    frames = data.split('\0');
                    if (frames.length == 1) {
                        console.error('Unexpected error when receiving data chunk from broker: ' + data, true);
                    }
                }
                frames.pop();

                var frame = null;
                while (frame = frames.shift()) {
                    _this2.handleFrame(new _Frame2.default().parseChunk(frame));
                }
            });

            this.socket.addOnErrorListener(function (error) {
                _this2.emit("socket-error", error);
            });

            this.socket.addOnCloseListener(function (error) {
                _this2.emit("disconnected", error);
            });

            this.socket.connect();
        }
    }, {
        key: "send",
        value: function send(command, headers, body, want_receipt) {
            var frame = new _Frame2.default(command, headers, body, want_receipt);

            console.log('sending frame:\n' + frame.toString());

            if (this.socket.write(frame.toString()) === false) {
                console.log('Write buffered');
            }
        }
    }, {
        key: "disconnect",
        value: function disconnect() {
            this.socket.end();

            if (this.socket.readyState == 'readOnly') {
                this.socket.destroy();
            }

            console.log('disconnect called');
        }
    }, {
        key: "handleFrame",
        value: function handleFrame(frame) {
            switch (frame.command) {
                case _StompGlobals.StompFrameCommands.MESSAGE:
                    console.log('Recived message from broker');
                    this.emit('message', frame);
                    break;
                case _StompGlobals.StompFrameCommands.RECEIPT:
                    console.log('Received receipt');
                    this.emit('receipt', frame);
                    break;
                case _StompGlobals.StompFrameCommands.CONNECTED:
                    console.log('Connected to Stomp broker');
                    this.session = frame.headers['session'];
                    this.emit('connected', frame);
                    break;
                case _StompGlobals.StompFrameCommands.ERROR:
                    console.warn('Received error message');
                    this.emit('error', frame);
                    break;
                default:
                    console.error("Unknown command: " + frame.command, true);
            }
        }
    }]);

    return Stomp;
}(_events.EventEmitter);

exports.default = Stomp;
;
},{"../StompGlobals":200,"../frame/Frame":202,"events":5}],204:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

BrowserSocket = function () {
    function BrowserSocket(host, port, vhost) {
        _classCallCheck(this, BrowserSocket);

        this.url = 'wss://' + host + ':' + port + vhost;
        this.connected = false;
    }

    _createClass(BrowserSocket, [{
        key: 'connect',
        value: function connect() {
            this.socket = new WebSocket(this.url);
            this.socket.onmessage = this.onmessage;
            this.socket.onerror = this.onerror;
            this.socket.onclose = this.onclose;
            this.socket.binaryType = "arraybuffer";
            this.socket.onopen = this.onopen;
        }
    }, {
        key: 'addOnOpenListener',
        value: function addOnOpenListener(onOpen) {
            var _this = this;

            this.onopen = function () {
                _this.connected = true;
                console.log('Connected to socket');
                onOpen();
            };
        }
    }, {
        key: 'addOnMessageListener',
        value: function addOnMessageListener(onMessage) {
            this.onmessage = function (messageEvent) {
                console.log('Received data on socket');
                onMessage(messageEvent.data);
            };
        }
    }, {
        key: 'addOnErrorListener',
        value: function addOnErrorListener(onError) {
            this.onerror = function (error) {
                console.error('Socket error');
                onError(error);
            };
        }
    }, {
        key: 'addOnCloseListener',
        value: function addOnCloseListener(onClose) {
            this.onclose = function (error) {
                console.log('Closing socket');
                onClose(error);
            };
        }
    }, {
        key: 'close',
        value: function close() {
            if (this.connected) {
                this.socket.close();
                this.connected = false;
            }
        }
    }, {
        key: 'write',
        value: function write(chunk) {
            if (this.connected) {
                this.socket.send(chunk);
            } else {
                throw 'can not write to an unopened socket';
            }
        }
    }]);

    return BrowserSocket;
}();

exports.default = BrowserSocket;
},{}],205:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _net = require('net');

var _net2 = _interopRequireDefault(_net);

var _tls = require('tls');

var _tls2 = _interopRequireDefault(_tls);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

NodeSocket = function () {
    function NodeSocket(host, port, vhost) {
        _classCallCheck(this, NodeSocket);

        this.host = host;
        this.port = port;
        this.vhost = vhost;
        this.connected = false;
    }

    _createClass(NodeSocket, [{
        key: 'connect',
        value: function connect() {
            var _this = this;

            this.socket = _tls2.default.connect(this.port, this.host, {}, function () {
                if (_this.socket.authorized) {
                    _this.socket.on('data', _this.onmessage);
                    _this.socket.on('error', _this.onerror);
                    _this.socket.on('close', _this.onclose);
                    _this.onopen();
                } else {
                    _this.onerror(socket.authorizationError);
                    _this.close();
                }
            });
        }
    }, {
        key: 'addOnOpenListener',
        value: function addOnOpenListener(onOpen) {
            var _this2 = this;

            this.onopen = function () {
                _this2.connected = true;
                console.log('Connected to socket');
                onOpen();
            };
        }
    }, {
        key: 'addOnMessageListener',
        value: function addOnMessageListener(onMessage) {
            this.onmessage = function (binaryData) {
                console.log('Received data on socket');
                onMessage('' + binaryData);
            };
        }
    }, {
        key: 'addOnErrorListener',
        value: function addOnErrorListener(onError) {
            this.onerror = function (error) {
                console.error('Socket error');
                onError(error);
            };
        }
    }, {
        key: 'addOnCloseListener',
        value: function addOnCloseListener(onClose) {
            this.onclose = function (error) {
                console.log('Closing socket');
                onClose(error);
            };
        }
    }, {
        key: 'close',
        value: function close() {
            if (this.connected) {
                socket.end();
                if (socket.readyState == 'readOnly') {
                    socket.destroy();
                }
                this.connected = false;
            }
        }
    }, {
        key: 'write',
        value: function write(chunk) {
            if (this.connected) {
                this.socket.write(chunk);
            } else {
                throw 'cannot write to an unopened socket';
            }
        }
    }]);

    return NodeSocket;
}();

exports.default = NodeSocket;
},{"net":1,"tls":1}],206:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _StompGlobals = require("../StompGlobals");

var _BrowserSocket = require("../socket/BrowserSocket");

var _BrowserSocket2 = _interopRequireDefault(_BrowserSocket);

var _NodeSocket = require("../socket/NodeSocket");

var _NodeSocket2 = _interopRequireDefault(_NodeSocket);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

SocketProvider = function () {
    function SocketProvider(host, port, vhost) {
        _classCallCheck(this, SocketProvider);

        this.host = host;
        this.port = port;
        this.vhost = vhost;
    }

    _createClass(SocketProvider, [{
        key: "createSocket",
        value: function createSocket(env) {
            switch (env) {
                case _StompGlobals.Environments.NODE:
                    return new _NodeSocket2.default(this.host, this.port, this.vhost);
                default:
                    // defaults to browser env
                    return new _BrowserSocket2.default(this.host, this.port, this.vhost);
            }
        }
    }]);

    return SocketProvider;
}();

exports.default = SocketProvider;
},{"../StompGlobals":200,"../socket/BrowserSocket":204,"../socket/NodeSocket":205}],207:[function(require,module,exports){
module.exports={
  "host": "connect-testing.secupay-ag.de",
  "node_env": {
    "port": "61614", 
    "vhost": "" 
  },
  "browser_env": {
    "port": "15671", 
    "vhost": "/stomp/websocket"
  },
  "headers": {
    "content_type": "application/json",
    "reply_to": "/temp-queue/main",
    "ack": "client-individual"
  }
}
},{}]},{},[49]);